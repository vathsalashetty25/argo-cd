{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 What Is Argo CD? \u00b6 Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Why Argo CD? \u00b6 Application definitions, configurations, and environments should be declarative and version controlled. Application deployment and lifecycle management should be automated, auditable, and easy to understand. Getting Started \u00b6 Quick Start \u00b6 kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml Follow our getting started guide . Further user oriented documentation is provided for additional features. If you are looking to upgrade ArgoCD, see the upgrade guide . Developer oriented documentation is available for people interested in building third-party integrations. How it works \u00b6 Argo CD follows the GitOps pattern of using Git repositories as the source of truth for defining the desired application state. Kubernetes manifests can be specified in several ways: kustomize applications helm charts ksonnet applications jsonnet files Plain directory of YAML/json manifests Any custom config management tool configured as a config management plugin Argo CD automates the deployment of the desired application states in the specified target environments. Application deployments can track updates to branches, tags, or pinned to a specific version of manifests at a Git commit. See tracking strategies for additional details about the different tracking strategies available. For a quick 10 minute overview of Argo CD, check out the demo presented to the Sig Apps community meeting: Architecture \u00b6 Argo CD is implemented as a kubernetes controller which continuously monitors running applications and compares the current, live state against the desired target state (as specified in the Git repo). A deployed application whose live state deviates from the target state is considered OutOfSync . Argo CD reports & visualizes the differences, while providing facilities to automatically or manually sync the live state back to the desired target state. Any modifications made to the desired target state in the Git repo can be automatically applied and reflected in the specified target environments. For additional details, see architecture overview . Features \u00b6 Automated deployment of applications to specified target environments Support for multiple config management/templating tools (Kustomize, Helm, Ksonnet, Jsonnet, plain-YAML) Ability to manage and deploy to multiple clusters SSO Integration (OIDC, OAuth2, LDAP, SAML 2.0, GitHub, GitLab, Microsoft, LinkedIn) Multi-tenancy and RBAC policies for authorization Rollback/Roll-anywhere to any application configuration committed in Git repository Health status analysis of application resources Automated configuration drift detection and visualization Automated or manual syncing of applications to its desired state Web UI which provides real-time view of application activity CLI for automation and CI integration Webhook integration (GitHub, BitBucket, GitLab) Access tokens for automation PreSync, Sync, PostSync hooks to support complex application rollouts (e.g.blue/green & canary upgrades) Audit trails for application events and API calls Prometheus metrics Parameter overrides for overriding ksonnet/helm parameters in Git Development Status \u00b6 Argo CD is being actively developed by the community. Our releases can be found here . Adoption \u00b6 Organizations who have officially adopted Argo CD can be found here .","title":"Overview"},{"location":"#overview","text":"","title":"Overview"},{"location":"#what-is-argo-cd","text":"Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.","title":"What Is Argo CD?"},{"location":"#why-argo-cd","text":"Application definitions, configurations, and environments should be declarative and version controlled. Application deployment and lifecycle management should be automated, auditable, and easy to understand.","title":"Why Argo CD?"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#quick-start","text":"kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml Follow our getting started guide . Further user oriented documentation is provided for additional features. If you are looking to upgrade ArgoCD, see the upgrade guide . Developer oriented documentation is available for people interested in building third-party integrations.","title":"Quick Start"},{"location":"#how-it-works","text":"Argo CD follows the GitOps pattern of using Git repositories as the source of truth for defining the desired application state. Kubernetes manifests can be specified in several ways: kustomize applications helm charts ksonnet applications jsonnet files Plain directory of YAML/json manifests Any custom config management tool configured as a config management plugin Argo CD automates the deployment of the desired application states in the specified target environments. Application deployments can track updates to branches, tags, or pinned to a specific version of manifests at a Git commit. See tracking strategies for additional details about the different tracking strategies available. For a quick 10 minute overview of Argo CD, check out the demo presented to the Sig Apps community meeting:","title":"How it works"},{"location":"#architecture","text":"Argo CD is implemented as a kubernetes controller which continuously monitors running applications and compares the current, live state against the desired target state (as specified in the Git repo). A deployed application whose live state deviates from the target state is considered OutOfSync . Argo CD reports & visualizes the differences, while providing facilities to automatically or manually sync the live state back to the desired target state. Any modifications made to the desired target state in the Git repo can be automatically applied and reflected in the specified target environments. For additional details, see architecture overview .","title":"Architecture"},{"location":"#features","text":"Automated deployment of applications to specified target environments Support for multiple config management/templating tools (Kustomize, Helm, Ksonnet, Jsonnet, plain-YAML) Ability to manage and deploy to multiple clusters SSO Integration (OIDC, OAuth2, LDAP, SAML 2.0, GitHub, GitLab, Microsoft, LinkedIn) Multi-tenancy and RBAC policies for authorization Rollback/Roll-anywhere to any application configuration committed in Git repository Health status analysis of application resources Automated configuration drift detection and visualization Automated or manual syncing of applications to its desired state Web UI which provides real-time view of application activity CLI for automation and CI integration Webhook integration (GitHub, BitBucket, GitLab) Access tokens for automation PreSync, Sync, PostSync hooks to support complex application rollouts (e.g.blue/green & canary upgrades) Audit trails for application events and API calls Prometheus metrics Parameter overrides for overriding ksonnet/helm parameters in Git","title":"Features"},{"location":"#development-status","text":"Argo CD is being actively developed by the community. Our releases can be found here .","title":"Development Status"},{"location":"#adoption","text":"Organizations who have officially adopted Argo CD can be found here .","title":"Adoption"},{"location":"CONTRIBUTING/","text":"Please refer to the Contribution Guide","title":"CONTRIBUTING"},{"location":"SUPPORT/","text":"Support \u00b6 Make sure you've read understanding the basics the getting started guide . Looked for an answer in the frequently asked questions . Ask a question in the Argo CD Slack channel \u29c9 . Read issues, report a bug, or request a feature \u29c9 .","title":"Support"},{"location":"SUPPORT/#support","text":"Make sure you've read understanding the basics the getting started guide . Looked for an answer in the frequently asked questions . Ask a question in the Argo CD Slack channel \u29c9 . Read issues, report a bug, or request a feature \u29c9 .","title":"Support"},{"location":"bug_triage/","text":"Bug triage proposal for ArgoCD \u00b6 Situation \u00b6 Lots of issues on our issue tracker. Many of them not bugs, but questions, or very environment related. It's easy to lose oversight. Also, it's not obvious which bugs are important. Which bugs should be fixed first? Can we make a new release with the current inventory of open bugs? Is there still a bug that should make it to the new release? Proposal \u00b6 We should agree upon a common issue triage process. The process must be lean and efficient, and should support us and the community looking into the GH issue tracker at making the following decisions: Is it even a real bug? If it is a real bug, what is the current status of the bug (next to \"open\" or \"closed\")? How important is it to fix the bug? How urgent is it to fix the bug? Who will be working to fix the bug? We need new methods to classify our bugs, at least into these categories: validity: Does the issue indeed represent a true bug severity: Denominates what impact the bug has priority: Denominates the urgency of the fix Triage process \u00b6 GH issue tracker provides us with the possibility to label issues. Using these labels is not perfect, but should give a good start. Each new issue created in our issue tracker should be correctly labeled during its lifecycle, so keeping an overview would be simplified by the ability to filter for labels. The triage process could be as follows: A new bug issue is created by someone on the tracker The first person of the core team to see it will start the triage by classifying the issue (see below). This will indicate the creator that we have noticed the issue, and that it's not \"fire & forget\" tracker. Initial classification should be possible even when much of the information is missing yet. In this case, the issue would be classified as such (see below). Again, this indicates that someone has noticed the issue, and there is activity in progress to get the required information. Classification of the issue can change over its life-cycle. However, once the issue has been initially classified correctly (that is, with something else than the \"placeholder\" classification discussed above), changes to the classification should be discussed first with the person who initially classified the issue. Classification \u00b6 We have introduced some new labels in the GH issue tracker for classifying the bug issues. These labels are prefixed with the string bug/ , and should be applied to all new issues in our tracker. Classification requires more information \u00b6 If it is not yet possible to classify the bug, i.e. because more information is required to correctly classify the bug, you should always set the label bug/in-triage to make it clear that triage process has started but could not yet be completed. Issue type \u00b6 If it's clear that a bug issue is not a bug, but a question or reach for support, it should be marked as such: Remove any of the labels prefixed bug/ that might be attached to the issue Remove the label bug from the issue Add the label inquiry to the issue If the inquiry turns out to be something that should be covered by the docs, but is not, the following actions should be taken: The title of the issue should be adapted that it will be clear that the bug affects the docs, not the code The label documentation should be attached to the issue If the issue is too confusing (can happen), another possibility is to close the issue and create a new one as described in above (with a meaningful title and the label documentation attached to it). Validity \u00b6 Some reported bugs may be invalid. It could be a user error, a misconfiguration or something along these lines. If it is clear that the bug falls into one of these categories: Remove any of the labels prefixed bug/ that might be attached to the issue Add the label invalid to the issue Retain the bug label to the issue Close the issue When closing the issue, it is important to let requester know why the issue has been closed. The optimum would be to provide a solution to his request in the comments of the issue, or at least pointers to possible solutions. Regressions \u00b6 Sometimes it happens that something that worked in a previous release does not work now when it should still work. If this is the case, the following actions should be done Add the label regression to the issue Continue with triage Severity \u00b6 It is important to find out how severe the impact of a bug is, and to label the bug with this information. For this purpose, the following labels exist in our tracker: bug/severity:minor : Bug has limited impact and maybe affects only an edge-case. Core functionality is not affected, and there is no data loss involved. Something might not work as expected. Example of these kind of bugs could be a CLI command that is not working as expected, a glitch in the UI, wrong documentation, etc. bug/severity:major : Malfunction in one of the core components, impacting a majority of users or one of the core functionalities in ArgoCD. There is no data loss involved, but for example a sync is not working due to a bug in ArgoCD (and not due to user error), manifests fail to render, etc. bug/severity:critical : A critical bug in ArgoCD, possibly resulting in data loss, integrity breach or severe degraded overall functionality. Priority \u00b6 The priority of an issue indicates how quickly the issue should be fixed and released. This information should help us in deciding the target release for the fix, and whether a bug would even justify a dedicated patch release. The following labels can be used to classify bugs into their priority: bug/priority:low : Will be fixed without any specific target release. bug/priority:medium : Should be fixed in the minor or major release, which ever comes first. bug/priority:high : Should be fixed with the next patch release. bug/priority:urgent : Should be fixed immediately and might even justify a dedicated patch release. The priority should be set according to the value of the fix and the attached severity. This means. a bug with a severity of minor could still be classified with priority high , when it is a low hanging fruit (i.e. the bug is easy to fix with low effort) and contributes to overall user experience of ArgoCD. Likewise, a bug classified with a severity of major could still have a priority of medium , if there is a workaround available for the bug which mitigates the effects of the bug to a bearable extend. Bugs classified with a severity of critical most likely belong to either the urgent priority, or to the high category when there is a workaround available. Bugs that have a regression label attached (see Regression above) should usually be handled with higher priority, so those kind of issues will most likely have a priority of high or urgent attached to it. Summary \u00b6 Applying a little discipline when working with our issue tracker could greatly help us in making informed decision about which bugs to fix when. Also, it would help us to get a clear view whether we can do for example a new minor release without having forgot any outstanding issues that should make it into that release. If we are able to work with classification of bug issues, we might want to extend the triage for enhancement proposals and PRs as well.","title":"Bug triage proposal for ArgoCD"},{"location":"bug_triage/#bug-triage-proposal-for-argocd","text":"","title":"Bug triage proposal for ArgoCD"},{"location":"bug_triage/#situation","text":"Lots of issues on our issue tracker. Many of them not bugs, but questions, or very environment related. It's easy to lose oversight. Also, it's not obvious which bugs are important. Which bugs should be fixed first? Can we make a new release with the current inventory of open bugs? Is there still a bug that should make it to the new release?","title":"Situation"},{"location":"bug_triage/#proposal","text":"We should agree upon a common issue triage process. The process must be lean and efficient, and should support us and the community looking into the GH issue tracker at making the following decisions: Is it even a real bug? If it is a real bug, what is the current status of the bug (next to \"open\" or \"closed\")? How important is it to fix the bug? How urgent is it to fix the bug? Who will be working to fix the bug? We need new methods to classify our bugs, at least into these categories: validity: Does the issue indeed represent a true bug severity: Denominates what impact the bug has priority: Denominates the urgency of the fix","title":"Proposal"},{"location":"bug_triage/#triage-process","text":"GH issue tracker provides us with the possibility to label issues. Using these labels is not perfect, but should give a good start. Each new issue created in our issue tracker should be correctly labeled during its lifecycle, so keeping an overview would be simplified by the ability to filter for labels. The triage process could be as follows: A new bug issue is created by someone on the tracker The first person of the core team to see it will start the triage by classifying the issue (see below). This will indicate the creator that we have noticed the issue, and that it's not \"fire & forget\" tracker. Initial classification should be possible even when much of the information is missing yet. In this case, the issue would be classified as such (see below). Again, this indicates that someone has noticed the issue, and there is activity in progress to get the required information. Classification of the issue can change over its life-cycle. However, once the issue has been initially classified correctly (that is, with something else than the \"placeholder\" classification discussed above), changes to the classification should be discussed first with the person who initially classified the issue.","title":"Triage process"},{"location":"bug_triage/#classification","text":"We have introduced some new labels in the GH issue tracker for classifying the bug issues. These labels are prefixed with the string bug/ , and should be applied to all new issues in our tracker.","title":"Classification"},{"location":"bug_triage/#classification-requires-more-information","text":"If it is not yet possible to classify the bug, i.e. because more information is required to correctly classify the bug, you should always set the label bug/in-triage to make it clear that triage process has started but could not yet be completed.","title":"Classification requires more information"},{"location":"bug_triage/#issue-type","text":"If it's clear that a bug issue is not a bug, but a question or reach for support, it should be marked as such: Remove any of the labels prefixed bug/ that might be attached to the issue Remove the label bug from the issue Add the label inquiry to the issue If the inquiry turns out to be something that should be covered by the docs, but is not, the following actions should be taken: The title of the issue should be adapted that it will be clear that the bug affects the docs, not the code The label documentation should be attached to the issue If the issue is too confusing (can happen), another possibility is to close the issue and create a new one as described in above (with a meaningful title and the label documentation attached to it).","title":"Issue type"},{"location":"bug_triage/#validity","text":"Some reported bugs may be invalid. It could be a user error, a misconfiguration or something along these lines. If it is clear that the bug falls into one of these categories: Remove any of the labels prefixed bug/ that might be attached to the issue Add the label invalid to the issue Retain the bug label to the issue Close the issue When closing the issue, it is important to let requester know why the issue has been closed. The optimum would be to provide a solution to his request in the comments of the issue, or at least pointers to possible solutions.","title":"Validity"},{"location":"bug_triage/#regressions","text":"Sometimes it happens that something that worked in a previous release does not work now when it should still work. If this is the case, the following actions should be done Add the label regression to the issue Continue with triage","title":"Regressions"},{"location":"bug_triage/#severity","text":"It is important to find out how severe the impact of a bug is, and to label the bug with this information. For this purpose, the following labels exist in our tracker: bug/severity:minor : Bug has limited impact and maybe affects only an edge-case. Core functionality is not affected, and there is no data loss involved. Something might not work as expected. Example of these kind of bugs could be a CLI command that is not working as expected, a glitch in the UI, wrong documentation, etc. bug/severity:major : Malfunction in one of the core components, impacting a majority of users or one of the core functionalities in ArgoCD. There is no data loss involved, but for example a sync is not working due to a bug in ArgoCD (and not due to user error), manifests fail to render, etc. bug/severity:critical : A critical bug in ArgoCD, possibly resulting in data loss, integrity breach or severe degraded overall functionality.","title":"Severity"},{"location":"bug_triage/#priority","text":"The priority of an issue indicates how quickly the issue should be fixed and released. This information should help us in deciding the target release for the fix, and whether a bug would even justify a dedicated patch release. The following labels can be used to classify bugs into their priority: bug/priority:low : Will be fixed without any specific target release. bug/priority:medium : Should be fixed in the minor or major release, which ever comes first. bug/priority:high : Should be fixed with the next patch release. bug/priority:urgent : Should be fixed immediately and might even justify a dedicated patch release. The priority should be set according to the value of the fix and the attached severity. This means. a bug with a severity of minor could still be classified with priority high , when it is a low hanging fruit (i.e. the bug is easy to fix with low effort) and contributes to overall user experience of ArgoCD. Likewise, a bug classified with a severity of major could still have a priority of medium , if there is a workaround available for the bug which mitigates the effects of the bug to a bearable extend. Bugs classified with a severity of critical most likely belong to either the urgent priority, or to the high category when there is a workaround available. Bugs that have a regression label attached (see Regression above) should usually be handled with higher priority, so those kind of issues will most likely have a priority of high or urgent attached to it.","title":"Priority"},{"location":"bug_triage/#summary","text":"Applying a little discipline when working with our issue tracker could greatly help us in making informed decision about which bugs to fix when. Also, it would help us to get a clear view whether we can do for example a new minor release without having forgot any outstanding issues that should make it into that release. If we are able to work with classification of bug issues, we might want to extend the triage for enhancement proposals and PRs as well.","title":"Summary"},{"location":"cli_installation/","text":"Installation \u00b6 You can download the latest Argo CD version from the latest release page of this repository , which will include the argocd CLI. Linux \u00b6 You can view the latest version of Argo CD at the link above or run the following command to grab the version: VERSION = $( curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/' ) Replace VERSION in the command below with the version of Argo CD you would like to download: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/ $VERSION /argocd-linux-amd64 Make the argocd CLI executable: chmod +x /usr/local/bin/argocd You should now be able to run argocd commands. Mac \u00b6 Homebrew \u00b6 brew install argocd Download With Curl \u00b6 You can view the latest version of Argo CD at the link above or run the following command to grab the version: VERSION = $( curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/' ) Replace VERSION in the command below with the version of Argo CD you would like to download: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/ $VERSION /argocd-darwin-amd64 Make the argocd CLI executable: chmod +x /usr/local/bin/argocd After finishing either of the instructions above, you should now be able to run argocd commands. Windows \u00b6 Download With Powershell: Invoke-WebRequest \u00b6 You can view the latest version of Argo CD at the link above or run the following command to grab the version: $version = ( Invoke-RestMethod https :// api . github . com / repos / argoproj / argo-cd / releases / latest ). tag_name Replace $version in the command below with the version of Argo CD you would like to download: $url = \"https://github.com/argoproj/argo-cd/releases/download/\" + $version + \"/argocd-windows-amd64.exe\" $output = \"argocd.exe\" Invoke-WebRequest -Uri $url -OutFile $output Also please note you will probably need to move the file into your PATH. After finishing the instructions above, you should now be able to run argocd commands.","title":"Installation"},{"location":"cli_installation/#installation","text":"You can download the latest Argo CD version from the latest release page of this repository , which will include the argocd CLI.","title":"Installation"},{"location":"cli_installation/#linux","text":"You can view the latest version of Argo CD at the link above or run the following command to grab the version: VERSION = $( curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/' ) Replace VERSION in the command below with the version of Argo CD you would like to download: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/ $VERSION /argocd-linux-amd64 Make the argocd CLI executable: chmod +x /usr/local/bin/argocd You should now be able to run argocd commands.","title":"Linux"},{"location":"cli_installation/#mac","text":"","title":"Mac"},{"location":"cli_installation/#homebrew","text":"brew install argocd","title":"Homebrew"},{"location":"cli_installation/#download-with-curl","text":"You can view the latest version of Argo CD at the link above or run the following command to grab the version: VERSION = $( curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/' ) Replace VERSION in the command below with the version of Argo CD you would like to download: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/ $VERSION /argocd-darwin-amd64 Make the argocd CLI executable: chmod +x /usr/local/bin/argocd After finishing either of the instructions above, you should now be able to run argocd commands.","title":"Download With Curl"},{"location":"cli_installation/#windows","text":"","title":"Windows"},{"location":"cli_installation/#download-with-powershell-invoke-webrequest","text":"You can view the latest version of Argo CD at the link above or run the following command to grab the version: $version = ( Invoke-RestMethod https :// api . github . com / repos / argoproj / argo-cd / releases / latest ). tag_name Replace $version in the command below with the version of Argo CD you would like to download: $url = \"https://github.com/argoproj/argo-cd/releases/download/\" + $version + \"/argocd-windows-amd64.exe\" $output = \"argocd.exe\" Invoke-WebRequest -Uri $url -OutFile $output Also please note you will probably need to move the file into your PATH. After finishing the instructions above, you should now be able to run argocd commands.","title":"Download With Powershell: Invoke-WebRequest"},{"location":"core_concepts/","text":"Core Concepts \u00b6 Let's assume you're familiar with core Git, Docker, Kubernetes, Continuous Delivery, and GitOps concepts. Application A group of Kubernetes resources as defined by a manifest. This is a Custom Resource Definition (CRD). Application source type Which Tool is used to build the application. Target state The desired state of an application, as represented by files in a Git repository. Live state The live state of that application. What pods etc are deployed. Sync status Whether or not the live state matches the target state. Is the deployed application the same as Git says it should be? Sync The process of making an application move to its target state. E.g. by applying changes to a Kubernetes cluster. Sync operation status Whether or not a sync succeeded. Refresh Compare the latest code in Git with the live state. Figure out what is different. Health The health of the application, is it running correctly? Can it serve requests? Tool A tool to create manifests from a directory of files. E.g. Kustomize or Ksonnet. See Application Source Type . Configuration management tool See Tool . Configuration management plugin A custom tool.","title":"Core Concepts"},{"location":"core_concepts/#core-concepts","text":"Let's assume you're familiar with core Git, Docker, Kubernetes, Continuous Delivery, and GitOps concepts. Application A group of Kubernetes resources as defined by a manifest. This is a Custom Resource Definition (CRD). Application source type Which Tool is used to build the application. Target state The desired state of an application, as represented by files in a Git repository. Live state The live state of that application. What pods etc are deployed. Sync status Whether or not the live state matches the target state. Is the deployed application the same as Git says it should be? Sync The process of making an application move to its target state. E.g. by applying changes to a Kubernetes cluster. Sync operation status Whether or not a sync succeeded. Refresh Compare the latest code in Git with the live state. Figure out what is different. Health The health of the application, is it running correctly? Can it serve requests? Tool A tool to create manifests from a directory of files. E.g. Kustomize or Ksonnet. See Application Source Type . Configuration management tool See Tool . Configuration management plugin A custom tool.","title":"Core Concepts"},{"location":"faq/","text":"FAQ \u00b6 I've deleted/corrupted my repo and can't delete my app. \u00b6 Argo CD can't delete an app if it cannot generate manifests. You need to either: Reinstate/fix your repo. Delete the app using --cascade=false and then manually deleting the resources. Why is my application still OutOfSync immediately after a successful Sync? \u00b6 See Diffing documentation for reasons resources can be OutOfSync, and ways to configure Argo CD to ignore fields when differences are expected. Why is my application stuck in Progressing state? \u00b6 Argo CD provides health for several standard Kubernetes types. The Ingress and StatefulSet types have known issues which might cause health check to return Progressing state instead of Healthy . Ingress is considered healthy if status.loadBalancer.ingress list is non-empty, with at least one value for hostname or IP . Some ingress controllers ( contour , traefik ) don't update status.loadBalancer.ingress field which causes Ingress to stuck in Progressing state forever. StatefulSet is considered healthy if value of status.updatedReplicas field matches to spec.replicas field. Due to Kubernetes bug kubernetes/kubernetes#68573 the status.updatedReplicas is not populated. So unless you run Kubernetes version which include the fix kubernetes/kubernetes#67570 StatefulSet might stay in Progressing state. Your StatefulSet or DaemonSet is using OnDelete instead of RollingUpdate strategy. See #1881 . As workaround Argo CD allows providing health check customization which overrides default behavior. I forgot the admin password, how do I reset it? \u00b6 For Argo CD v1.8 and earlier, the initial password is set to the name of the server pod, as per the getting started guide . For Argo CD v1.9 and later, the initial password is available from a secret named argocd-initial-admin-password . To change the password, edit the argocd-secret secret and update the admin.password field with a new bcrypt hash. You can use a site like https://www.browserling.com/tools/bcrypt to generate a new hash. For example: # bcrypt(password)=$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa kubectl -n argocd patch secret argocd-secret \\ -p '{\"stringData\": { \"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\", \"admin.passwordMtime\": \"' $( date +%FT%T%Z ) '\" }}' Another option is to delete both the admin.password and admin.passwordMtime keys and restart argocd-server. This will generate a new password as per the getting started guide , so either to the name of the pod (Argo CD 1.8 and earlier) or a randomly generated password stored in a secret (Argo CD 1.9 and later). How to disable admin user? \u00b6 Add admin.enabled: \"false\" to the argocd-cm ConfigMap (see user management ). Argo CD cannot deploy Helm Chart based applications without internet access, how can I solve it? \u00b6 Argo CD might fail to generate Helm chart manifests if the chart has dependencies located in external repositories. To solve the problem you need to make sure that requirements.yaml uses only internally available Helm repositories. Even if the chart uses only dependencies from internal repos Helm might decide to refresh stable repo. As workaround override stable repo URL in argocd-cm config map: data : # v1.2 or earlier use `helm.repositories` helm.repositories : | - url: http://<internal-helm-repo-host>:8080 name: stable # v1.3 or later use `repositories` with `type: helm` repositories : | - type: helm url: http://<internal-helm-repo-host>:8080 name: stable I've configured cluster secret but it does not show up in CLI/UI, how do I fix it? \u00b6 Check if cluster secret has argocd.argoproj.io/secret-type: cluster label. If secret has the label but the cluster is still not visible then make sure it might be a permission issue. Try to list clusters using admin user (e.g. argocd login --username admin && argocd cluster list ). Argo CD is unable to connect to my cluster, how do I troubleshoot it? \u00b6 Use the following steps to reconstruct configured cluster config and connect to your cluster manually using kubectl: kubectl exec -it <argocd-pod-name> bash # ssh into any argocd server pod argocd-util kubeconfig https://<cluster-url> /tmp/config --namespace argocd # generate your cluster config KUBECONFIG = /tmp/config kubectl get pods # test connection manually Now you can manually verify that cluster is accessible from the Argo CD pod. How Can I Terminate A Sync? \u00b6 To terminate the sync, click on the \"synchronisation\" then \"terminate\": Why Is My App Out Of Sync Even After Syncing? \u00b6 Is some cases, the tool you use may conflict with Argo CD by adding the app.kubernetes.io/instance label. E.g. using Kustomize common labels feature. Argo CD automatically sets the app.kubernetes.io/instance label and uses it to determine which resources form the app. If the tool does this too, this causes confusion. You can change this label by setting the application.instanceLabelKey value in the argocd-cm . We recommend that you use argocd.argoproj.io/instance . Note When you make this change your applications will become out of sync and will need re-syncing. See #1482 . Why Are My Resource Limits Out Of Sync? \u00b6 Kubernetes has normalized your resource limits when they are applied, and then Argo CD has then compared the version in your generated manifests to the normalized one is Kubernetes - they won't match. E.g. '1000m' normalized to '1' '0.1' normalized to '100m' '3072Mi' normalized to '3Gi' 3072 normalized to '3072' (quotes added) To fix this use diffing customizations settings . How Do I Fix \"invalid cookie, longer than max length 4093\"? \u00b6 Argo CD uses a JWT as the auth token. You likely are part of many groups and have gone over the 4KB limit which is set for cookies. You can get the list of groups by opening \"developer tools -> network\" Click log in Find the call to <argocd_instance>/auth/callback?code=<random_string> Decode the token at https://jwt.io/ . That will provide the list of teams that you can remove yourself from. See #2165 . Why Am I Getting rpc error: code = Unavailable desc = transport is closing When Using The CLI? \u00b6 Maybe you're behind a proxy that does not support HTTP 2? Try the --grpc-web flag: argocd ... --grpc-web Why Am I Getting x509: certificate signed by unknown authority When Using The CLI? \u00b6 Your not running your server with correct certs. If you're not running in a production system (e.g. you're testing Argo CD out), try the --insecure flag: argocd ... --insecure Do not use --insecure in production I have configured Dex via dex.config in argocd-cm , it still says Dex is unconfigured. Why? \u00b6 Most likely you forgot to set the url in argocd-cm to point to your ArgoCD as well. See also the docs .","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#ive-deletedcorrupted-my-repo-and-cant-delete-my-app","text":"Argo CD can't delete an app if it cannot generate manifests. You need to either: Reinstate/fix your repo. Delete the app using --cascade=false and then manually deleting the resources.","title":"I've deleted/corrupted my repo and can't delete my app."},{"location":"faq/#why-is-my-application-still-outofsync-immediately-after-a-successful-sync","text":"See Diffing documentation for reasons resources can be OutOfSync, and ways to configure Argo CD to ignore fields when differences are expected.","title":"Why is my application still OutOfSync immediately after a successful Sync?"},{"location":"faq/#why-is-my-application-stuck-in-progressing-state","text":"Argo CD provides health for several standard Kubernetes types. The Ingress and StatefulSet types have known issues which might cause health check to return Progressing state instead of Healthy . Ingress is considered healthy if status.loadBalancer.ingress list is non-empty, with at least one value for hostname or IP . Some ingress controllers ( contour , traefik ) don't update status.loadBalancer.ingress field which causes Ingress to stuck in Progressing state forever. StatefulSet is considered healthy if value of status.updatedReplicas field matches to spec.replicas field. Due to Kubernetes bug kubernetes/kubernetes#68573 the status.updatedReplicas is not populated. So unless you run Kubernetes version which include the fix kubernetes/kubernetes#67570 StatefulSet might stay in Progressing state. Your StatefulSet or DaemonSet is using OnDelete instead of RollingUpdate strategy. See #1881 . As workaround Argo CD allows providing health check customization which overrides default behavior.","title":"Why is my application stuck in Progressing state?"},{"location":"faq/#i-forgot-the-admin-password-how-do-i-reset-it","text":"For Argo CD v1.8 and earlier, the initial password is set to the name of the server pod, as per the getting started guide . For Argo CD v1.9 and later, the initial password is available from a secret named argocd-initial-admin-password . To change the password, edit the argocd-secret secret and update the admin.password field with a new bcrypt hash. You can use a site like https://www.browserling.com/tools/bcrypt to generate a new hash. For example: # bcrypt(password)=$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa kubectl -n argocd patch secret argocd-secret \\ -p '{\"stringData\": { \"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\", \"admin.passwordMtime\": \"' $( date +%FT%T%Z ) '\" }}' Another option is to delete both the admin.password and admin.passwordMtime keys and restart argocd-server. This will generate a new password as per the getting started guide , so either to the name of the pod (Argo CD 1.8 and earlier) or a randomly generated password stored in a secret (Argo CD 1.9 and later).","title":"I forgot the admin password, how do I reset it?"},{"location":"faq/#how-to-disable-admin-user","text":"Add admin.enabled: \"false\" to the argocd-cm ConfigMap (see user management ).","title":"How to disable admin user?"},{"location":"faq/#argo-cd-cannot-deploy-helm-chart-based-applications-without-internet-access-how-can-i-solve-it","text":"Argo CD might fail to generate Helm chart manifests if the chart has dependencies located in external repositories. To solve the problem you need to make sure that requirements.yaml uses only internally available Helm repositories. Even if the chart uses only dependencies from internal repos Helm might decide to refresh stable repo. As workaround override stable repo URL in argocd-cm config map: data : # v1.2 or earlier use `helm.repositories` helm.repositories : | - url: http://<internal-helm-repo-host>:8080 name: stable # v1.3 or later use `repositories` with `type: helm` repositories : | - type: helm url: http://<internal-helm-repo-host>:8080 name: stable","title":"Argo CD cannot deploy Helm Chart based applications without internet access, how can I solve it?"},{"location":"faq/#ive-configured-cluster-secret-but-it-does-not-show-up-in-cliui-how-do-i-fix-it","text":"Check if cluster secret has argocd.argoproj.io/secret-type: cluster label. If secret has the label but the cluster is still not visible then make sure it might be a permission issue. Try to list clusters using admin user (e.g. argocd login --username admin && argocd cluster list ).","title":"I've configured cluster secret but it does not show up in CLI/UI, how do I fix it?"},{"location":"faq/#argo-cd-is-unable-to-connect-to-my-cluster-how-do-i-troubleshoot-it","text":"Use the following steps to reconstruct configured cluster config and connect to your cluster manually using kubectl: kubectl exec -it <argocd-pod-name> bash # ssh into any argocd server pod argocd-util kubeconfig https://<cluster-url> /tmp/config --namespace argocd # generate your cluster config KUBECONFIG = /tmp/config kubectl get pods # test connection manually Now you can manually verify that cluster is accessible from the Argo CD pod.","title":"Argo CD is unable to connect to my cluster, how do I troubleshoot it?"},{"location":"faq/#how-can-i-terminate-a-sync","text":"To terminate the sync, click on the \"synchronisation\" then \"terminate\":","title":"How Can I Terminate A Sync?"},{"location":"faq/#why-is-my-app-out-of-sync-even-after-syncing","text":"Is some cases, the tool you use may conflict with Argo CD by adding the app.kubernetes.io/instance label. E.g. using Kustomize common labels feature. Argo CD automatically sets the app.kubernetes.io/instance label and uses it to determine which resources form the app. If the tool does this too, this causes confusion. You can change this label by setting the application.instanceLabelKey value in the argocd-cm . We recommend that you use argocd.argoproj.io/instance . Note When you make this change your applications will become out of sync and will need re-syncing. See #1482 .","title":"Why Is My App Out Of Sync Even After Syncing?"},{"location":"faq/#why-are-my-resource-limits-out-of-sync","text":"Kubernetes has normalized your resource limits when they are applied, and then Argo CD has then compared the version in your generated manifests to the normalized one is Kubernetes - they won't match. E.g. '1000m' normalized to '1' '0.1' normalized to '100m' '3072Mi' normalized to '3Gi' 3072 normalized to '3072' (quotes added) To fix this use diffing customizations settings .","title":"Why Are My Resource Limits Out Of Sync?"},{"location":"faq/#how-do-i-fix-invalid-cookie-longer-than-max-length-4093","text":"Argo CD uses a JWT as the auth token. You likely are part of many groups and have gone over the 4KB limit which is set for cookies. You can get the list of groups by opening \"developer tools -> network\" Click log in Find the call to <argocd_instance>/auth/callback?code=<random_string> Decode the token at https://jwt.io/ . That will provide the list of teams that you can remove yourself from. See #2165 .","title":"How Do I Fix \"invalid cookie, longer than max length 4093\"?"},{"location":"faq/#why-am-i-getting-rpc-error-code-unavailable-desc-transport-is-closing-when-using-the-cli","text":"Maybe you're behind a proxy that does not support HTTP 2? Try the --grpc-web flag: argocd ... --grpc-web","title":"Why Am I Getting rpc error: code = Unavailable desc = transport is closing When Using The CLI?"},{"location":"faq/#why-am-i-getting-x509-certificate-signed-by-unknown-authority-when-using-the-cli","text":"Your not running your server with correct certs. If you're not running in a production system (e.g. you're testing Argo CD out), try the --insecure flag: argocd ... --insecure Do not use --insecure in production","title":"Why Am I Getting x509: certificate signed by unknown authority When Using The CLI?"},{"location":"faq/#i-have-configured-dex-via-dexconfig-in-argocd-cm-it-still-says-dex-is-unconfigured-why","text":"Most likely you forgot to set the url in argocd-cm to point to your ArgoCD as well. See also the docs .","title":"I have configured Dex via dex.config in argocd-cm, it still says Dex is unconfigured. Why?"},{"location":"getting_started/","text":"Getting Started \u00b6 Tip This guide assumes you have a grounding in the tools that Argo CD is based on. Please read understanding the basics to learn about these tools. Requirements \u00b6 Installed kubectl command-line tool. Have a kubeconfig file (default location is ~/.kube/config ). 1. Install Argo CD \u00b6 kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml This will create a new namespace, argocd , where Argo CD services and application resources will live. Note If you are not interested in UI, SSO, multi-cluster management and just want to pull changes into the cluster then you can disable authentication using --disable-auth flag and access Argo CD via CLI using --port-forward or --port-forward-namespace flags and proceed to step #6 : kubectl patch deploy argocd-server -n argocd -p '[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/command/-\", \"value\": \"--disable-auth\"}]' --type json 2. Download Argo CD CLI \u00b6 Download the latest Argo CD version from https://github.com/argoproj/argo-cd/releases/latest . More detailed installation instructions can be found via the CLI installation documentation . Also available in Mac Homebrew: brew install argocd 3. Access The Argo CD API Server \u00b6 By default, the Argo CD API server is not exposed with an external IP. To access the API server, choose one of the following techniques to expose the Argo CD API server: Service Type Load Balancer \u00b6 Change the argocd-server service type to LoadBalancer : kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}' Ingress \u00b6 Follow the ingress documentation on how to configure Argo CD with ingress. Port Forwarding \u00b6 Kubectl port-forwarding can also be used to connect to the API server without exposing the service. kubectl port-forward svc/argocd-server -n argocd 8080 :443 The API server can then be accessed using the localhost:8080 4. Login Using The CLI \u00b6 Warning We strongly advise to change the initially generated administrative password as soon as after your first login to the system. Depending on the Argo CD version you are installing, the method how to get the initial password for the admin user is different. Argo CD 1.8 and earlier The initial password is autogenerated to be the pod name of the Argo CD API server. This can be retrieved with the command: kubectl get pods -n argocd -l app.kubernetes.io/name = argocd-server -o name | cut -d '/' -f 2 Using the username admin and the password from above, login to Argo CD's IP or hostname: argocd login <ARGOCD_SERVER> Change the password using the command: argocd account update-password Note The initial password is set in a kubernetes secret, named argocd-secret , during ArgoCD's initial start up. This means if you edit the deployment in any way which causes a new pod to be deployed, such as disabling TLS on the Argo CD API server. Take note of the initial pod name when you first install Argo CD, or reset the password by following these instructions Argo CD v1.9 and later The initial password for the admin account is auto-generated and stored as clear text in the field password in a secret named argocd-initial-admin-password in your Argo CD installation namespace. You can simply retrieve this password using kubectl : kubectl -n argocd get secret argocd-initial-admin-password -o jsonpath = \"{.data.password}\" | base64 -d For better readability, e.g. if you want to copy & paste the generated password, you can simply append && echo to above command, which will add a newline to the output. Using the username admin and the password from above, login to Argo CD's IP or hostname: argocd login <ARGOCD_SERVER> Change the password using the command: argocd account update-password Note You should delete the argocd-initial-admin-password from the Argo CD namespace once you changed the password. The secret serves no other purpose than to store the initially generated password in clear and can safely be deleted at any time. It will be re-created on demand by Argo CD if a new admin password must be re-generated. 5. Register A Cluster To Deploy Apps To (Optional) \u00b6 This step registers a cluster's credentials to Argo CD, and is only necessary when deploying to an external cluster. When deploying internally (to the same cluster that Argo CD is running in), https://kubernetes.default.svc should be used as the application's K8s API server address. First list all clusters contexts in your current kubeconfig: kubectl config get-contexts -o name Choose a context name from the list and supply it to argocd cluster add CONTEXTNAME . For example, for docker-desktop context, run: argocd cluster add docker-desktop The above command installs a ServiceAccount ( argocd-manager ), into the kube-system namespace of that kubectl context, and binds the service account to an admin-level ClusterRole. Argo CD uses this service account token to perform its management tasks (i.e. deploy/monitoring). Note The rules of the argocd-manager-role role can be modified such that it only has create , update , patch , delete privileges to a limited set of namespaces, groups, kinds. However get , list , watch privileges are required at the cluster-scope for Argo CD to function. 6. Create An Application From A Git Repository \u00b6 An example repository containing a guestbook application is available at https://github.com/argoproj/argocd-example-apps.git to demonstrate how Argo CD works. Creating Apps Via CLI \u00b6 Note You can access Argo CD using port forwarding: add --port-forward-namespace argocd flag to every CLI command or set ARGOCD_OPTS environment variable: export ARGOCD_OPTS='--port-forward-namespace argocd' : argocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-server https://kubernetes.default.svc --dest-namespace default Creating Apps Via UI \u00b6 Open a browser to the Argo CD external UI, and login by visiting the IP/hostname in a browser and use the credentials set in step 4. After logging in, click the + New App button as shown below: Give your app the name guestbook , use the project default , and leave the sync policy as Manual : Connect the https://github.com/argoproj/argocd-example-apps.git repo to Argo CD by setting repository url to the github repo url, leave revision as HEAD , and set the path to guestbook : For Destination , set cluster to in-cluster and namespace to default : After filling out the information above, click Create at the top of the UI to create the guestbook application: 7. Sync (Deploy) The Application \u00b6 Syncing via CLI \u00b6 Once the guestbook application is created, you can now view its status: $ argocd app get guestbook Name: guestbook Server: https://kubernetes.default.svc Namespace: default URL: https://10.97.164.88/applications/guestbook Repo: https://github.com/argoproj/argocd-example-apps.git Target: Path: guestbook Sync Policy: <none> Sync Status: OutOfSync from ( 1ff8a67 ) Health Status: Missing GROUP KIND NAMESPACE NAME STATUS HEALTH apps Deployment default guestbook-ui OutOfSync Missing Service default guestbook-ui OutOfSync Missing The application status is initially in OutOfSync state since the application has yet to be deployed, and no Kubernetes resources have been created. To sync (deploy) the application, run: argocd app sync guestbook This command retrieves the manifests from the repository and performs a kubectl apply of the manifests. The guestbook app is now running and you can now view its resource components, logs, events, and assessed health status. Syncing via UI \u00b6","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Tip This guide assumes you have a grounding in the tools that Argo CD is based on. Please read understanding the basics to learn about these tools.","title":"Getting Started"},{"location":"getting_started/#requirements","text":"Installed kubectl command-line tool. Have a kubeconfig file (default location is ~/.kube/config ).","title":"Requirements"},{"location":"getting_started/#1-install-argo-cd","text":"kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml This will create a new namespace, argocd , where Argo CD services and application resources will live. Note If you are not interested in UI, SSO, multi-cluster management and just want to pull changes into the cluster then you can disable authentication using --disable-auth flag and access Argo CD via CLI using --port-forward or --port-forward-namespace flags and proceed to step #6 : kubectl patch deploy argocd-server -n argocd -p '[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/command/-\", \"value\": \"--disable-auth\"}]' --type json","title":"1. Install Argo CD"},{"location":"getting_started/#2-download-argo-cd-cli","text":"Download the latest Argo CD version from https://github.com/argoproj/argo-cd/releases/latest . More detailed installation instructions can be found via the CLI installation documentation . Also available in Mac Homebrew: brew install argocd","title":"2. Download Argo CD CLI"},{"location":"getting_started/#3-access-the-argo-cd-api-server","text":"By default, the Argo CD API server is not exposed with an external IP. To access the API server, choose one of the following techniques to expose the Argo CD API server:","title":"3. Access The Argo CD API Server"},{"location":"getting_started/#service-type-load-balancer","text":"Change the argocd-server service type to LoadBalancer : kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'","title":"Service Type Load Balancer"},{"location":"getting_started/#ingress","text":"Follow the ingress documentation on how to configure Argo CD with ingress.","title":"Ingress"},{"location":"getting_started/#port-forwarding","text":"Kubectl port-forwarding can also be used to connect to the API server without exposing the service. kubectl port-forward svc/argocd-server -n argocd 8080 :443 The API server can then be accessed using the localhost:8080","title":"Port Forwarding"},{"location":"getting_started/#4-login-using-the-cli","text":"Warning We strongly advise to change the initially generated administrative password as soon as after your first login to the system. Depending on the Argo CD version you are installing, the method how to get the initial password for the admin user is different. Argo CD 1.8 and earlier The initial password is autogenerated to be the pod name of the Argo CD API server. This can be retrieved with the command: kubectl get pods -n argocd -l app.kubernetes.io/name = argocd-server -o name | cut -d '/' -f 2 Using the username admin and the password from above, login to Argo CD's IP or hostname: argocd login <ARGOCD_SERVER> Change the password using the command: argocd account update-password Note The initial password is set in a kubernetes secret, named argocd-secret , during ArgoCD's initial start up. This means if you edit the deployment in any way which causes a new pod to be deployed, such as disabling TLS on the Argo CD API server. Take note of the initial pod name when you first install Argo CD, or reset the password by following these instructions Argo CD v1.9 and later The initial password for the admin account is auto-generated and stored as clear text in the field password in a secret named argocd-initial-admin-password in your Argo CD installation namespace. You can simply retrieve this password using kubectl : kubectl -n argocd get secret argocd-initial-admin-password -o jsonpath = \"{.data.password}\" | base64 -d For better readability, e.g. if you want to copy & paste the generated password, you can simply append && echo to above command, which will add a newline to the output. Using the username admin and the password from above, login to Argo CD's IP or hostname: argocd login <ARGOCD_SERVER> Change the password using the command: argocd account update-password Note You should delete the argocd-initial-admin-password from the Argo CD namespace once you changed the password. The secret serves no other purpose than to store the initially generated password in clear and can safely be deleted at any time. It will be re-created on demand by Argo CD if a new admin password must be re-generated.","title":"4. Login Using The CLI"},{"location":"getting_started/#5-register-a-cluster-to-deploy-apps-to-optional","text":"This step registers a cluster's credentials to Argo CD, and is only necessary when deploying to an external cluster. When deploying internally (to the same cluster that Argo CD is running in), https://kubernetes.default.svc should be used as the application's K8s API server address. First list all clusters contexts in your current kubeconfig: kubectl config get-contexts -o name Choose a context name from the list and supply it to argocd cluster add CONTEXTNAME . For example, for docker-desktop context, run: argocd cluster add docker-desktop The above command installs a ServiceAccount ( argocd-manager ), into the kube-system namespace of that kubectl context, and binds the service account to an admin-level ClusterRole. Argo CD uses this service account token to perform its management tasks (i.e. deploy/monitoring). Note The rules of the argocd-manager-role role can be modified such that it only has create , update , patch , delete privileges to a limited set of namespaces, groups, kinds. However get , list , watch privileges are required at the cluster-scope for Argo CD to function.","title":"5. Register A Cluster To Deploy Apps To (Optional)"},{"location":"getting_started/#6-create-an-application-from-a-git-repository","text":"An example repository containing a guestbook application is available at https://github.com/argoproj/argocd-example-apps.git to demonstrate how Argo CD works.","title":"6. Create An Application From A Git Repository"},{"location":"getting_started/#creating-apps-via-cli","text":"Note You can access Argo CD using port forwarding: add --port-forward-namespace argocd flag to every CLI command or set ARGOCD_OPTS environment variable: export ARGOCD_OPTS='--port-forward-namespace argocd' : argocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-server https://kubernetes.default.svc --dest-namespace default","title":"Creating Apps Via CLI"},{"location":"getting_started/#creating-apps-via-ui","text":"Open a browser to the Argo CD external UI, and login by visiting the IP/hostname in a browser and use the credentials set in step 4. After logging in, click the + New App button as shown below: Give your app the name guestbook , use the project default , and leave the sync policy as Manual : Connect the https://github.com/argoproj/argocd-example-apps.git repo to Argo CD by setting repository url to the github repo url, leave revision as HEAD , and set the path to guestbook : For Destination , set cluster to in-cluster and namespace to default : After filling out the information above, click Create at the top of the UI to create the guestbook application:","title":"Creating Apps Via UI"},{"location":"getting_started/#7-sync-deploy-the-application","text":"","title":"7. Sync (Deploy) The Application"},{"location":"getting_started/#syncing-via-cli","text":"Once the guestbook application is created, you can now view its status: $ argocd app get guestbook Name: guestbook Server: https://kubernetes.default.svc Namespace: default URL: https://10.97.164.88/applications/guestbook Repo: https://github.com/argoproj/argocd-example-apps.git Target: Path: guestbook Sync Policy: <none> Sync Status: OutOfSync from ( 1ff8a67 ) Health Status: Missing GROUP KIND NAMESPACE NAME STATUS HEALTH apps Deployment default guestbook-ui OutOfSync Missing Service default guestbook-ui OutOfSync Missing The application status is initially in OutOfSync state since the application has yet to be deployed, and no Kubernetes resources have been created. To sync (deploy) the application, run: argocd app sync guestbook This command retrieves the manifests from the repository and performs a kubectl apply of the manifests. The guestbook app is now running and you can now view its resource components, logs, events, and assessed health status.","title":"Syncing via CLI"},{"location":"getting_started/#syncing-via-ui","text":"","title":"Syncing via UI"},{"location":"roadmap/","text":"Roadmap \u00b6 Roadmap Core Functionality Bug Fixes Performance ApplicationsSet Large Applications support Serviceability GitOps Engine Enhancements GitOps Agent Config Management Tools Integrations Resource Actions Revamp Argo CD Notifications Automated Registry Monitoring Application Details Page Usability Cluster Management User Interface Projects Enhancements Core Functionality Bug Fixes \u00b6 The core GitOps features still have several known bugs and limitations. The full list is available in v1.7 milestone The most notable issues: Application is incorrectly reporting a diff Helm hooks are deleted right after creation Argo CD synchronization lasts incredibly long Performance \u00b6 2000+ Applications support. The user interface becomes notably slower if one Argo CD instance manages more than 1 thousand applications. A set of optimizations is required to fix that issue. 100+ Clusters support. The cluster addon management use-case requires connecting a large number of clusters to one Argo CD controller. Currently Argo CD controller is unable to handle that many clusters. The solution is to support horizontal controller scaling and automated sharding. Mono Repository support. Argo CD is not optimized for mono repositories with a large number of applications. With 50+ applications in the same repository, manifest generation performance drops significantly. The repository server optimization is required to improve it. ApplicationSet \u00b6 Argo CD Applications allow splitting the cluster configuration into logic groups that are managed independently. However, the set of applications is a configuration that should be managed declaratively as well. The app-of-apps pattern solves this problem but still has some challenges such as maintenance overhead, security, and lack of some additional features. ApplicationSet project provides a better solution for managing applications across multiple environments. Large Applications support \u00b6 The application details page is not suitable to visualize applications that include a large number of resources (hundreds of resources). The page has to be reworked to improve user experience. Serviceability \u00b6 To make Argo CD successful we need to build tools that enable Argo CD administrators to handle scalability and performance issues in a self-service model. That includes more metrics, out of the box alerts and a cluster management user interface. GitOps Engine Enhancements \u00b6 The GitOps Engine is a library that implements core GitOps functions such as K8S resource reconciliation and diffing. A lot of Argo CD features are still not available in GitOps engine. The following features have to be contributed to the GitOps Engine: an ability to customize resources health assessment and existing CRD health assessment functions . resource diffing customization . config management tools integration. unified syncing annotations argoproj/gitops-engine#43 . GitOps Agent \u00b6 GitOps Agent is a continuation of GitOps engine work. The GitOps Agent leverages the GitOps Engine and provides access to many engine features via a simple CLI interface. Config Management Tools Integrations \u00b6 The community likes the first class support of Helm, Kustomize and keeps requesting support for more tools. Argo CD provides a mechanism to integrate with any config management tool. We need to investigate why it is not enough and implement missing features. Resource Actions Revamp \u00b6 Resource actions is very powerful but literally hidden feature. Documentation is missing and therefore adoption is poor. We need to document and promote it, and then iterate and work on enhancements: hard to configure unless you are Argo CD ninja half done parameters support: we have backend but no UI/CLI for it configuration issue: it is impossible to share actions as a YAML file since ALL resource customizations are stored in one config map key Argo CD Notifications \u00b6 Argo CD Notifications provides the ability to notify users about Argo CD Application changes as well as implement integrations such as update Github commit status, trigger Jenkins job, set Grafana label, etc. Automated Registry Monitoring \u00b6 Argo CD Image Updater provides an ability to monitor Docker registries and automatically update image versions in the deployment repository. See https://github.com/argoproj/argo-cd/issues/1648 . Application Details Page Usability \u00b6 Application details page has accumulated multiple usability and feature requests such as Node view , Logs ( 1 , 2 ), Network view ( 1 , 2 ) etc . Cluster Management User Interface \u00b6 Argo CD has information about whole clusters, not just applications in it. We need to provide a user interface for cluster administrators that visualize cluster level resources. Projects Enhancements \u00b6 Argo CD projects accumulated a lot of debt: Users don't know how to use project roles and SSO. It is one of the key features but not documented well. We need to document and promote it Project management UI has evolved organically and needs a complete redesign. We packaged everything into one sliding panel which is painful to use Enhancements: #3598","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Roadmap Core Functionality Bug Fixes Performance ApplicationsSet Large Applications support Serviceability GitOps Engine Enhancements GitOps Agent Config Management Tools Integrations Resource Actions Revamp Argo CD Notifications Automated Registry Monitoring Application Details Page Usability Cluster Management User Interface Projects Enhancements","title":"Roadmap"},{"location":"roadmap/#core-functionality-bug-fixes","text":"The core GitOps features still have several known bugs and limitations. The full list is available in v1.7 milestone The most notable issues: Application is incorrectly reporting a diff Helm hooks are deleted right after creation Argo CD synchronization lasts incredibly long","title":"Core Functionality Bug Fixes"},{"location":"roadmap/#performance","text":"2000+ Applications support. The user interface becomes notably slower if one Argo CD instance manages more than 1 thousand applications. A set of optimizations is required to fix that issue. 100+ Clusters support. The cluster addon management use-case requires connecting a large number of clusters to one Argo CD controller. Currently Argo CD controller is unable to handle that many clusters. The solution is to support horizontal controller scaling and automated sharding. Mono Repository support. Argo CD is not optimized for mono repositories with a large number of applications. With 50+ applications in the same repository, manifest generation performance drops significantly. The repository server optimization is required to improve it.","title":"Performance"},{"location":"roadmap/#applicationset","text":"Argo CD Applications allow splitting the cluster configuration into logic groups that are managed independently. However, the set of applications is a configuration that should be managed declaratively as well. The app-of-apps pattern solves this problem but still has some challenges such as maintenance overhead, security, and lack of some additional features. ApplicationSet project provides a better solution for managing applications across multiple environments.","title":"ApplicationSet"},{"location":"roadmap/#large-applications-support","text":"The application details page is not suitable to visualize applications that include a large number of resources (hundreds of resources). The page has to be reworked to improve user experience.","title":"Large Applications support"},{"location":"roadmap/#serviceability","text":"To make Argo CD successful we need to build tools that enable Argo CD administrators to handle scalability and performance issues in a self-service model. That includes more metrics, out of the box alerts and a cluster management user interface.","title":"Serviceability"},{"location":"roadmap/#gitops-engine-enhancements","text":"The GitOps Engine is a library that implements core GitOps functions such as K8S resource reconciliation and diffing. A lot of Argo CD features are still not available in GitOps engine. The following features have to be contributed to the GitOps Engine: an ability to customize resources health assessment and existing CRD health assessment functions . resource diffing customization . config management tools integration. unified syncing annotations argoproj/gitops-engine#43 .","title":"GitOps Engine Enhancements"},{"location":"roadmap/#gitops-agent","text":"GitOps Agent is a continuation of GitOps engine work. The GitOps Agent leverages the GitOps Engine and provides access to many engine features via a simple CLI interface.","title":"GitOps Agent"},{"location":"roadmap/#config-management-tools-integrations","text":"The community likes the first class support of Helm, Kustomize and keeps requesting support for more tools. Argo CD provides a mechanism to integrate with any config management tool. We need to investigate why it is not enough and implement missing features.","title":"Config Management Tools Integrations"},{"location":"roadmap/#resource-actions-revamp","text":"Resource actions is very powerful but literally hidden feature. Documentation is missing and therefore adoption is poor. We need to document and promote it, and then iterate and work on enhancements: hard to configure unless you are Argo CD ninja half done parameters support: we have backend but no UI/CLI for it configuration issue: it is impossible to share actions as a YAML file since ALL resource customizations are stored in one config map key","title":"Resource Actions Revamp"},{"location":"roadmap/#argo-cd-notifications","text":"Argo CD Notifications provides the ability to notify users about Argo CD Application changes as well as implement integrations such as update Github commit status, trigger Jenkins job, set Grafana label, etc.","title":"Argo CD Notifications"},{"location":"roadmap/#automated-registry-monitoring","text":"Argo CD Image Updater provides an ability to monitor Docker registries and automatically update image versions in the deployment repository. See https://github.com/argoproj/argo-cd/issues/1648 .","title":"Automated Registry Monitoring"},{"location":"roadmap/#application-details-page-usability","text":"Application details page has accumulated multiple usability and feature requests such as Node view , Logs ( 1 , 2 ), Network view ( 1 , 2 ) etc .","title":"Application Details Page Usability"},{"location":"roadmap/#cluster-management-user-interface","text":"Argo CD has information about whole clusters, not just applications in it. We need to provide a user interface for cluster administrators that visualize cluster level resources.","title":"Cluster Management User Interface"},{"location":"roadmap/#projects-enhancements","text":"Argo CD projects accumulated a lot of debt: Users don't know how to use project roles and SSO. It is one of the key features but not documented well. We need to document and promote it Project management UI has evolved organically and needs a complete redesign. We packaged everything into one sliding panel which is painful to use Enhancements: #3598","title":"Projects Enhancements"},{"location":"security_considerations/","text":"Security Considerations \u00b6 As a deployment tool, Argo CD needs to have production access which makes security a very important topic. The Argoproj team takes security very seriously and continuously working on improving it. Learn more about security related features in Security section. Overview of past and current issues \u00b6 The following table gives a general overview about past and present issues known to the ArgoCD project. See in the Known Issues section if there is a work-around available if you cannot update or if there is no fix yet. Date CVE Title Risk Affected version(s) Fix version 2020-06-16 CVE-2020-1747 PyYAML library susceptible to arbitrary code execution High all v1.5.8 2020-04-14 CVE-2020-5260 Possible Git credential leak High all v1.4.3,v1.5.2 2020-04-08 CVE-2020-11576 User Enumeration Medium v1.5.0 v1.5.1 2020-04-08 CVE-2020-8826 Session-fixation High all n/a 2020-04-08 CVE-2020-8827 Insufficient anti-automation/anti-brute force High all <= 1.5.3 v1.5.3 2020-04-08 CVE-2020-8828 Insecure default administrative password High all n/a 2020-04-08 CVE-2018-21034 Sensitive Information Disclosure Medium all <= v1.5.0 v1.5.0 Known Issues And Workarounds \u00b6 A recent security audit (thanks a lot to Matt Hamilton of https://soluble.ai ) has revealed several limitations in Argo CD which could compromise security. Most of the issues are related to the built-in user management implementation. CVE-2020-1747 - PyYAML library susceptible to arbitrary code execution \u00b6 Summary: Risk Reported by Fix version Workaround High infa-kparida v1.5.8 No Details: PyYAML library susceptible to arbitrary code execution when it processes untrusted YAML files. We do not believe ArgoCD is affected by this vulnerability, because the impact of CVE-2020-1747 is limited to usage of awscli. The awscli only used for AWS IAM authentication, and the endpoint is the AWS API. CVE-2020-5260 - Possible Git credential leak \u00b6 Summary: Risk Reported by Fix version Workaround Critical Felix Wilhelm of Google Project Zero v1.4.3,v1.5.2 Yes Details: ArgoCD relies on Git for many of its operations. The Git project released a security advisory on 2020-04-14, describing a serious vulnerability in Git which can lead to credential leakage through credential helpers by feeding malicious URLs to the git clone operation. We do not believe ArgoCD is affected by this vulnerability, because ArgoCD does neither make use of Git credential helpers nor does it use git clone for repository operations. However, we do not know whether our users might have configured Git credential helpers on their own and chose to release new images which contain the bug fix for Git. Mitigation and/or workaround: We strongly recommend to upgrade your ArgoCD installation to either v1.4.3 (if on v1.4 branch) or v1.5.2 (if on v1.5 branch) When you are running v1.4.x , you can upgrade to v1.4.3 by simply changing the image tags for argocd-server , argocd-repo-server and argocd-controller to v1.4.3 . The v1.4.3 release does not contain additional functional bug fixes. Likewise, hen you are running v1.5.x , you can upgrade to v1.5.2 by simply changing the image tags for argocd-server , argocd-repo-server and argocd-controller to v1.5.2 . The v1.5.2 release does not contain additional functional bug fixes. CVE-2020-11576 - User Enumeration \u00b6 Summary: Risk Reported by Fix version Workaround Medium Matt Hamilton of https://soluble.ai v1.5.1 Yes Details: Argo version v1.5.0 was vulnerable to a user-enumeration vulnerability which allowed attackers to determine the usernames of valid (non-SSO) accounts within Argo. Mitigation and/or workaround: Upgrade to ArgoCD v1.5.1 or higher. As a workaround, disable local users and use only SSO authentication. CVE-2020-8828 - Insecure default administrative password \u00b6 Summary: Risk Reported by Fix version Workaround High Matt Hamilton of https://soluble.ai n/a Yes Details: Argo CD uses the argocd-server pod name (ex: argocd-server-55594fbdb9-ptsf5 ) as the default admin password. Kubernetes users able to list pods in the argo namespace are able to retrieve the default password. Additionally, In most installations, the Pod name contains a random \"trail\" of characters . These characters are generated using a time-seeded PRNG and not a CSPRNG. An attacker could use this information in an attempt to deduce the state of the internal PRNG, aiding bruteforce attacks. Mitigation and/or workaround: The recommended mitigation as described in the user documentation is to use SSO integration. The default admin password should only be used for initial configuration and then disabled or at least changed to a more secure password. CVE-2020-8827 - Insufficient anti-automation/anti-brute force \u00b6 Summary: Risk Reported by Fix version Workaround High Matt Hamilton of https://soluble.ai n/a Yes Details: ArgoCD before v1.5.3 does not enforce rate-limiting or other anti-automation mechanisms which would mitigate admin password brute force. Mitigation and/or workaround: Rate-limiting and anti-automation mechanisms for local user accounts have been introduced with ArgoCD v1.5.3. As a workaround for mitigation if you cannot upgrade ArgoCD to v1.5.3 yet, we recommend to disable local users and use SSO instead. CVE-2020-8826 - Session-fixation \u00b6 Summary: Risk Reported by Fix version Workaround High Matt Hamilton of https://soluble.ai n/a Yes Details: The authentication tokens generated for built-in users have no expiry. These issues might be acceptable in the controlled isolated environment but not acceptable if Argo CD user interface is exposed to the Internet. Mitigation and/or workaround: The recommended mitigation is to change the password periodically to invalidate the authentication tokens. CVE-2018-21034 - Sensitive Information Disclosure \u00b6 Summary: Risk Reported by Fix version Workaround Medium Matt Hamilton of https://soluble.ai v1.5.0 No Details: In Argo versions prior to v1.5.0-rc1, it was possible for authenticated Argo users to submit API calls to retrieve secrets and other manifests which were stored within git. Mitigation and/or workaround: Upgrade to ArgoCD v1.5.0 or higher. No workaround available Reporting Vulnerabilities \u00b6 If you find a security related bug in ArgoCD, we kindly ask you for responsible disclosure and for giving us appropriate time to react, analyze and develop a fix to mitigate the found security vulnerability. Please report security vulnerabilities by e-mailing: Jesse_Suen@intuit.com Alexander_Matyushentsev@intuit.com Edward_Lee@intuit.com","title":"Security Considerations"},{"location":"security_considerations/#security-considerations","text":"As a deployment tool, Argo CD needs to have production access which makes security a very important topic. The Argoproj team takes security very seriously and continuously working on improving it. Learn more about security related features in Security section.","title":"Security Considerations"},{"location":"security_considerations/#overview-of-past-and-current-issues","text":"The following table gives a general overview about past and present issues known to the ArgoCD project. See in the Known Issues section if there is a work-around available if you cannot update or if there is no fix yet. Date CVE Title Risk Affected version(s) Fix version 2020-06-16 CVE-2020-1747 PyYAML library susceptible to arbitrary code execution High all v1.5.8 2020-04-14 CVE-2020-5260 Possible Git credential leak High all v1.4.3,v1.5.2 2020-04-08 CVE-2020-11576 User Enumeration Medium v1.5.0 v1.5.1 2020-04-08 CVE-2020-8826 Session-fixation High all n/a 2020-04-08 CVE-2020-8827 Insufficient anti-automation/anti-brute force High all <= 1.5.3 v1.5.3 2020-04-08 CVE-2020-8828 Insecure default administrative password High all n/a 2020-04-08 CVE-2018-21034 Sensitive Information Disclosure Medium all <= v1.5.0 v1.5.0","title":"Overview of past and current issues"},{"location":"security_considerations/#known-issues-and-workarounds","text":"A recent security audit (thanks a lot to Matt Hamilton of https://soluble.ai ) has revealed several limitations in Argo CD which could compromise security. Most of the issues are related to the built-in user management implementation.","title":"Known Issues And Workarounds"},{"location":"security_considerations/#cve-2020-1747-pyyaml-library-susceptible-to-arbitrary-code-execution","text":"Summary: Risk Reported by Fix version Workaround High infa-kparida v1.5.8 No Details: PyYAML library susceptible to arbitrary code execution when it processes untrusted YAML files. We do not believe ArgoCD is affected by this vulnerability, because the impact of CVE-2020-1747 is limited to usage of awscli. The awscli only used for AWS IAM authentication, and the endpoint is the AWS API.","title":"CVE-2020-1747 - PyYAML library susceptible to arbitrary code execution"},{"location":"security_considerations/#cve-2020-5260-possible-git-credential-leak","text":"Summary: Risk Reported by Fix version Workaround Critical Felix Wilhelm of Google Project Zero v1.4.3,v1.5.2 Yes Details: ArgoCD relies on Git for many of its operations. The Git project released a security advisory on 2020-04-14, describing a serious vulnerability in Git which can lead to credential leakage through credential helpers by feeding malicious URLs to the git clone operation. We do not believe ArgoCD is affected by this vulnerability, because ArgoCD does neither make use of Git credential helpers nor does it use git clone for repository operations. However, we do not know whether our users might have configured Git credential helpers on their own and chose to release new images which contain the bug fix for Git. Mitigation and/or workaround: We strongly recommend to upgrade your ArgoCD installation to either v1.4.3 (if on v1.4 branch) or v1.5.2 (if on v1.5 branch) When you are running v1.4.x , you can upgrade to v1.4.3 by simply changing the image tags for argocd-server , argocd-repo-server and argocd-controller to v1.4.3 . The v1.4.3 release does not contain additional functional bug fixes. Likewise, hen you are running v1.5.x , you can upgrade to v1.5.2 by simply changing the image tags for argocd-server , argocd-repo-server and argocd-controller to v1.5.2 . The v1.5.2 release does not contain additional functional bug fixes.","title":"CVE-2020-5260 - Possible Git credential leak"},{"location":"security_considerations/#cve-2020-11576-user-enumeration","text":"Summary: Risk Reported by Fix version Workaround Medium Matt Hamilton of https://soluble.ai v1.5.1 Yes Details: Argo version v1.5.0 was vulnerable to a user-enumeration vulnerability which allowed attackers to determine the usernames of valid (non-SSO) accounts within Argo. Mitigation and/or workaround: Upgrade to ArgoCD v1.5.1 or higher. As a workaround, disable local users and use only SSO authentication.","title":"CVE-2020-11576 - User Enumeration"},{"location":"security_considerations/#cve-2020-8828-insecure-default-administrative-password","text":"Summary: Risk Reported by Fix version Workaround High Matt Hamilton of https://soluble.ai n/a Yes Details: Argo CD uses the argocd-server pod name (ex: argocd-server-55594fbdb9-ptsf5 ) as the default admin password. Kubernetes users able to list pods in the argo namespace are able to retrieve the default password. Additionally, In most installations, the Pod name contains a random \"trail\" of characters . These characters are generated using a time-seeded PRNG and not a CSPRNG. An attacker could use this information in an attempt to deduce the state of the internal PRNG, aiding bruteforce attacks. Mitigation and/or workaround: The recommended mitigation as described in the user documentation is to use SSO integration. The default admin password should only be used for initial configuration and then disabled or at least changed to a more secure password.","title":"CVE-2020-8828 - Insecure default administrative password"},{"location":"security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force","text":"Summary: Risk Reported by Fix version Workaround High Matt Hamilton of https://soluble.ai n/a Yes Details: ArgoCD before v1.5.3 does not enforce rate-limiting or other anti-automation mechanisms which would mitigate admin password brute force. Mitigation and/or workaround: Rate-limiting and anti-automation mechanisms for local user accounts have been introduced with ArgoCD v1.5.3. As a workaround for mitigation if you cannot upgrade ArgoCD to v1.5.3 yet, we recommend to disable local users and use SSO instead.","title":"CVE-2020-8827 - Insufficient anti-automation/anti-brute force"},{"location":"security_considerations/#cve-2020-8826-session-fixation","text":"Summary: Risk Reported by Fix version Workaround High Matt Hamilton of https://soluble.ai n/a Yes Details: The authentication tokens generated for built-in users have no expiry. These issues might be acceptable in the controlled isolated environment but not acceptable if Argo CD user interface is exposed to the Internet. Mitigation and/or workaround: The recommended mitigation is to change the password periodically to invalidate the authentication tokens.","title":"CVE-2020-8826 - Session-fixation"},{"location":"security_considerations/#cve-2018-21034-sensitive-information-disclosure","text":"Summary: Risk Reported by Fix version Workaround Medium Matt Hamilton of https://soluble.ai v1.5.0 No Details: In Argo versions prior to v1.5.0-rc1, it was possible for authenticated Argo users to submit API calls to retrieve secrets and other manifests which were stored within git. Mitigation and/or workaround: Upgrade to ArgoCD v1.5.0 or higher. No workaround available","title":"CVE-2018-21034 - Sensitive Information Disclosure"},{"location":"security_considerations/#reporting-vulnerabilities","text":"If you find a security related bug in ArgoCD, we kindly ask you for responsible disclosure and for giving us appropriate time to react, analyze and develop a fix to mitigate the found security vulnerability. Please report security vulnerabilities by e-mailing: Jesse_Suen@intuit.com Alexander_Matyushentsev@intuit.com Edward_Lee@intuit.com","title":"Reporting Vulnerabilities"},{"location":"understand_the_basics/","text":"Understand The Basics \u00b6 Before effectively using Argo CD, it is necessary to understand the underlying technology that the platform is built on. It is also necessary to understand the features being provided to you and how to use them. The section below provides some useful links to build up this understanding. Learn The Fundamentals \u00b6 Go through the online Docker and Kubernetes tutorials: A Beginner-Friendly Introduction to Containers, VMs and Docker Introduction to Kubernetes Tutorials Hands on labs Depending on how you plan to template your applications: Kustomize Helm Ksonnet If you're integrating with Jenkins: Jenkins User Guide","title":"Understand The Basics"},{"location":"understand_the_basics/#understand-the-basics","text":"Before effectively using Argo CD, it is necessary to understand the underlying technology that the platform is built on. It is also necessary to understand the features being provided to you and how to use them. The section below provides some useful links to build up this understanding.","title":"Understand The Basics"},{"location":"understand_the_basics/#learn-the-fundamentals","text":"Go through the online Docker and Kubernetes tutorials: A Beginner-Friendly Introduction to Containers, VMs and Docker Introduction to Kubernetes Tutorials Hands on labs Depending on how you plan to template your applications: Kustomize Helm Ksonnet If you're integrating with Jenkins: Jenkins User Guide","title":"Learn The Fundamentals"},{"location":"developer-guide/","text":"Overview \u00b6 You probably don't want to be reading this section of the docs. This part of the manual is aimed at people wanting to develop third-party applications that interact with Argo CD, e.g. A chat bot A Slack integration Note Please make sure you've completed the getting started guide .","title":"Overview"},{"location":"developer-guide/#overview","text":"You probably don't want to be reading this section of the docs. This part of the manual is aimed at people wanting to develop third-party applications that interact with Argo CD, e.g. A chat bot A Slack integration Note Please make sure you've completed the getting started guide .","title":"Overview"},{"location":"developer-guide/api-docs/","text":"API Docs \u00b6 You can find the Swagger docs by setting the path to /swagger-ui in your Argo CD UI's. E.g. http://localhost:8080/swagger-ui . Authorization \u00b6 You'll need to authorize your API using a bearer token. To get a token: $ curl $ARGOCD_SERVER /api/v1/session -d $'{\"username\":\"admin\",\"password\":\"password\"}' { \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1Njc4MTIzODcsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTU2NzgxMjM4Nywic3ViIjoiYWRtaW4ifQ.ejyTgFxLhuY9mOBtKhcnvobg3QZXJ4_RusN_KIdVwao\" } <=v1.2 Then pass using the HTTP SetCookie header, prefixing with argocd.token : $ curl $ARGOCD_SERVER /api/v1/applications --cookie \"argocd.token= $ARGOCD_TOKEN \" { \"metadata\" : { \"selfLink\" : \"/apis/argoproj.io/v1alpha1/namespaces/argocd/applications\" , \"resourceVersion\" : \"37755\" } , \"items\" :... } v1.3 Then pass using the HTTP Authorization header, prefixing with Bearer : $ curl $ARGOCD_SERVER /api/v1/applications -H \"Authorization: Bearer $ARGOCD_TOKEN \" { \"metadata\" : { \"selfLink\" : \"/apis/argoproj.io/v1alpha1/namespaces/argocd/applications\" , \"resourceVersion\" : \"37755\" } , \"items\" :... }","title":"API Docs"},{"location":"developer-guide/api-docs/#api-docs","text":"You can find the Swagger docs by setting the path to /swagger-ui in your Argo CD UI's. E.g. http://localhost:8080/swagger-ui .","title":"API Docs"},{"location":"developer-guide/api-docs/#authorization","text":"You'll need to authorize your API using a bearer token. To get a token: $ curl $ARGOCD_SERVER /api/v1/session -d $'{\"username\":\"admin\",\"password\":\"password\"}' { \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1Njc4MTIzODcsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTU2NzgxMjM4Nywic3ViIjoiYWRtaW4ifQ.ejyTgFxLhuY9mOBtKhcnvobg3QZXJ4_RusN_KIdVwao\" } <=v1.2 Then pass using the HTTP SetCookie header, prefixing with argocd.token : $ curl $ARGOCD_SERVER /api/v1/applications --cookie \"argocd.token= $ARGOCD_TOKEN \" { \"metadata\" : { \"selfLink\" : \"/apis/argoproj.io/v1alpha1/namespaces/argocd/applications\" , \"resourceVersion\" : \"37755\" } , \"items\" :... } v1.3 Then pass using the HTTP Authorization header, prefixing with Bearer : $ curl $ARGOCD_SERVER /api/v1/applications -H \"Authorization: Bearer $ARGOCD_TOKEN \" { \"metadata\" : { \"selfLink\" : \"/apis/argoproj.io/v1alpha1/namespaces/argocd/applications\" , \"resourceVersion\" : \"37755\" } , \"items\" :... }","title":"Authorization"},{"location":"developer-guide/ci/","text":"Continuous Integration (CI) \u00b6 Troubleshooting CI checks \u00b6 You can click on the \"Details\" link next to the failed step to get more information about the failure. To read more about The GitHub actions are configured in ci-build.yaml . Can I retrigger the checks without pushing a new commit? \u00b6 Since the CI pipeline is triggered on Git commits, there is currently no (known) way on how to retrigger the CI checks without pushing a new commit to your branch. If you are absolutely sure that the failure was due to a failure in the pipeline, and not an error within the changes you commited, you can push an empty commit to your branch, thus retriggering the pipeline without any code changes. To do so, issue git commit --allow-empty -m \"Retrigger CI pipeline\" git push origin <yourbranch> Why does the build step fail? \u00b6 First, make sure the failing build step succeeds on your machine. Remember the containerized build toolchain is available, too. If the build is failing at the Ensuring Gopkg.lock is up-to-date step, you need to update the dependencies before you push your commits. Run make dep-ensure and make dep and commit the changes to Gopkg.lock to your branch. Why does the codegen step fail? \u00b6 If the codegen step fails with \"Check nothing has changed...\", chances are high that you did not run make codegen , or did not commit the changes it made. You should double check by running make codegen followed by git status in the local working copy of your branch. Commit any changes and push them to your GH branch to have the CI check it again. A second common case for this is, when you modified any of the auto generated assets, as these will be overwritten upon make codegen . Generally, this step runs codegen and compares the outcome against the Git branch it has checked out. If there are differences, the step will fail. See What checked-in code is generated and where does it come from? for more information. Why does the lint step fail? \u00b6 Your code failed to lint correctly, or modifications were performed by the golangci-lint process. You should run make lint , or golangci-lint run on your local branch and fix all the issues. If you receive an error like, File is not `goimports`-ed (goimports) , the file is not formatted correctly. Run gofmt -w $file.go to resolve this linter error. Why does the test or e2e steps fail? \u00b6 You should check for the cause of the failure in the check's detail page as described above. This will give you the name of the test that has failed, and details about why. If your test are passing locally (using the virtualized toolchain), chances are that the test might be flaky and will pass the next time it is run. Please retrigger the CI pipeline as described above and see if the test step now passes. Updating The Builder Image \u00b6 Login to Docker Hub: docker login Build image: make builder-image IMAGE_NAMESPACE = argoproj IMAGE_TAG = v1.0.0 Public CD \u00b6 Every commit to master is built and published to docker.pkg.github.com/argoproj/argo-cd/argocd:<version>-<short-sha> . The list of images is available at https://github.com/argoproj/argo-cd/packages. Note Github docker registry requires authentication to read even publicly available packages. Follow the steps from Kubernetes documentation to configure image pull secret if you want to use docker.pkg.github.com/argoproj/argo-cd/argocd image. The image is automatically deployed to the dev Argo CD instance: https://cd.apps.argoproj.io/","title":"Continuous Integration (CI)"},{"location":"developer-guide/ci/#continuous-integration-ci","text":"","title":"Continuous Integration (CI)"},{"location":"developer-guide/ci/#troubleshooting-ci-checks","text":"You can click on the \"Details\" link next to the failed step to get more information about the failure. To read more about The GitHub actions are configured in ci-build.yaml .","title":"Troubleshooting CI checks"},{"location":"developer-guide/ci/#can-i-retrigger-the-checks-without-pushing-a-new-commit","text":"Since the CI pipeline is triggered on Git commits, there is currently no (known) way on how to retrigger the CI checks without pushing a new commit to your branch. If you are absolutely sure that the failure was due to a failure in the pipeline, and not an error within the changes you commited, you can push an empty commit to your branch, thus retriggering the pipeline without any code changes. To do so, issue git commit --allow-empty -m \"Retrigger CI pipeline\" git push origin <yourbranch>","title":"Can I retrigger the checks without pushing a new commit?"},{"location":"developer-guide/ci/#why-does-the-build-step-fail","text":"First, make sure the failing build step succeeds on your machine. Remember the containerized build toolchain is available, too. If the build is failing at the Ensuring Gopkg.lock is up-to-date step, you need to update the dependencies before you push your commits. Run make dep-ensure and make dep and commit the changes to Gopkg.lock to your branch.","title":"Why does the build step fail?"},{"location":"developer-guide/ci/#why-does-the-codegen-step-fail","text":"If the codegen step fails with \"Check nothing has changed...\", chances are high that you did not run make codegen , or did not commit the changes it made. You should double check by running make codegen followed by git status in the local working copy of your branch. Commit any changes and push them to your GH branch to have the CI check it again. A second common case for this is, when you modified any of the auto generated assets, as these will be overwritten upon make codegen . Generally, this step runs codegen and compares the outcome against the Git branch it has checked out. If there are differences, the step will fail. See What checked-in code is generated and where does it come from? for more information.","title":"Why does the codegen step fail?"},{"location":"developer-guide/ci/#why-does-the-lint-step-fail","text":"Your code failed to lint correctly, or modifications were performed by the golangci-lint process. You should run make lint , or golangci-lint run on your local branch and fix all the issues. If you receive an error like, File is not `goimports`-ed (goimports) , the file is not formatted correctly. Run gofmt -w $file.go to resolve this linter error.","title":"Why does the lint step fail?"},{"location":"developer-guide/ci/#why-does-the-test-or-e2e-steps-fail","text":"You should check for the cause of the failure in the check's detail page as described above. This will give you the name of the test that has failed, and details about why. If your test are passing locally (using the virtualized toolchain), chances are that the test might be flaky and will pass the next time it is run. Please retrigger the CI pipeline as described above and see if the test step now passes.","title":"Why does the test or e2e steps fail?"},{"location":"developer-guide/ci/#updating-the-builder-image","text":"Login to Docker Hub: docker login Build image: make builder-image IMAGE_NAMESPACE = argoproj IMAGE_TAG = v1.0.0","title":"Updating The Builder Image"},{"location":"developer-guide/ci/#public-cd","text":"Every commit to master is built and published to docker.pkg.github.com/argoproj/argo-cd/argocd:<version>-<short-sha> . The list of images is available at https://github.com/argoproj/argo-cd/packages. Note Github docker registry requires authentication to read even publicly available packages. Follow the steps from Kubernetes documentation to configure image pull secret if you want to use docker.pkg.github.com/argoproj/argo-cd/argocd image. The image is automatically deployed to the dev Argo CD instance: https://cd.apps.argoproj.io/","title":"Public CD"},{"location":"developer-guide/contributing/","text":"Contribution guide \u00b6 Preface \u00b6 We want to make contributing to ArgoCD as simple and smooth as possible. This guide shall help you in setting up your build & test environment, so that you can start developing and testing bug fixes and feature enhancements without having to make too much effort in setting up a local toolchain. If you want to submit a PR, please read this document carefully, as it contains important information guiding you through our PR quality gates. As is the case with the development process, this document is under constant change. If you notice any error, or if you think this document is out-of-date, or if you think it is missing something: Feel free to submit a PR or submit a bug to our GitHub issue tracker. If you need guidance with submitting a PR, or have any other questions regarding development of ArgoCD, do not hesitate to join our Slack and get in touch with us in the #argo-dev channel! Before you start \u00b6 You will need at least the following things in your toolchain in order to develop and test ArgoCD locally: A Kubernetes cluster. You won't need a fully blown multi-master, multi-node cluster, but you will need something like K3S, Minikube or microk8s. You will also need a working Kubernetes client ( kubectl ) configuration in your development environment. The configuration must reside in ~/.kube/config and the API server URL must point to the IP address of your local machine (or VM), and not to localhost or 127.0.0.1 if you are using the virtualized development toolchain (see below) You will also need a working Docker runtime environment, to be able to build and run images. The Docker version must be fairly recent, and support multi-stage builds. You should not work as root. Make your local user a member of the docker group to be able to control the Docker service on your machine. Obviously, you will need a git client for pulling source code and pushing back your changes. Last but not least, you will need a Go SDK and related tools (such as GNU make ) installed and working on your development environment. The minimum required Go version for building ArgoCD is v1.14.0 . We will assume that your Go workspace is at ~/go . Note Attention minikube users : By default, minikube will create Kubernetes client configuration that uses authentication data from files. This is incompatible with the virtualized toolchain. So if you intend to use the virtualized toolchain, you have to embed this authentication data into the client configuration. To do so, issue minikube config set embed-certs true and restart your minikube. Please also note that minikube using the Docker driver is currently not supported with the virtualized toolchain, because the Docker driver exposes the API server on 127.0.0.1 hard-coded. If in doubt, run make verify-kube-connect to find out. Submitting PRs \u00b6 When you submit a PR against ArgoCD's GitHub repository, a couple of CI checks will be run automatically to ensure your changes will build fine and meet certain quality standards. Your contribution needs to pass those checks in order to be merged into the repository. In general, it might be beneficial to only submit a PR for an existing issue. Especially for larger changes, an Enhancement Proposal should exist before. Note Please make sure that you always create PRs from a branch that is up-to-date with the latest changes from ArgoCD's master branch. Depending on how long it takes for the maintainers to review and merge your PR, it might be necessary to pull in latest changes into your branch again. Please understand that we, as an Open Source project, have limited capacities for reviewing and merging PRs to ArgoCD. We will do our best to review your PR and give you feedback as soon as possible, but please bear with us if it takes a little longer as expected. The following read will help you to submit a PR that meets the standards of our CI tests: Title of the PR \u00b6 Please use a meaningful and concise title for your PR. This will help us to pick PRs for review quickly, and the PR title will also end up in the Changelog. We use the Semantic PR title checker to categorize your PR into one of the following categories: fix - Your PR contains one or more code bug fixes feat - Your PR contains a new feature docs - Your PR improves the documentation chore - Your PR improves any internals of ArgoCD, such as the build process, unit tests, etc Please prefix the title of your PR with one of the valid categories. For example, if you chose the title your PR Add documentation for GitHub SSO integration , please use docs: Add documentation for GitHub SSO integration instead. Contributor License Agreement \u00b6 Every contributor to ArgoCD must have signed the current Contributor License Agreement (CLA). You only have to sign the CLA when you are a first time contributor, or when the agreement has changed since your last time signing it. The main purpose of the CLA is to ensure that you hold the required rights for your contribution. The CLA signing is an automated process. You can read the current version of the CLA here . PR template checklist \u00b6 Upon opening a PR, the details will contain a checklist from a template. Please read the checklist, and tick those marks that apply to you. Automated builds & tests \u00b6 After you have submitted your PR, and whenever you push new commits to that branch, GitHub will run a number of Continuous Integration checks against your code. It will execute the following actions, and each of them has to pass: Build the Go code ( make build ) Generate API glue code and manifests ( make codegen ) Run a Go linter on the code ( make lint ) Run the unit tests ( make test ) Run the End-to-End tests ( make test-e2e ) Build and lint the UI code ( make lint-ui ) Build the argocd CLI ( make cli ) If any of these tests in the CI pipeline fail, it means that some of your contribution is considered faulty (or a test might be flaky, see below). Code test coverage \u00b6 We use CodeCov in our CI pipeline to check for test coverage, and once you submit your PR, it will run and report on the coverage difference as a comment within your PR. If the difference is too high in the negative, i.e. your submission introduced a significant drop in code coverage, the CI check will fail. Whenever you develop a new feature or submit a bug fix, please also write appropriate unit tests for it. If you write a completely new module, please aim for at least 80% of coverage. If you want to see how much coverage just a specific module (i.e. your new one) has, you can set the TEST_MODULE to the (fully qualified) name of that module with make test , i.e.: make test TEST_MODULE = github.com/argoproj/argo-cd/server/cache ... ok github.com/argoproj/argo-cd/server/cache 0 .029s coverage: 89 .3% of statements Local vs Virtualized toolchain \u00b6 ArgoCD provides a fully virtualized development and testing toolchain using Docker images. It is recommended to use those images, as they provide the same runtime environment as the final product and it is much easier to keep up-to-date with changes to the toolchain and dependencies. But as using Docker comes with a slight performance penalty, you might want to setup a local toolchain. Most relevant targets for the build & test cycles in the Makefile provide two variants, one of them suffixed with -local . For example, make test will run unit tests in the Docker container, make test-local will run it natively on your local system. If you are going to use the virtualized toolchain, please bear in mind the following things: Your Kubernetes API server must listen on the interface of your local machine or VM, and not on 127.0.0.1 only. Your Kubernetes client configuration ( ~/.kube/config ) must not use an API URL that points to localhost or 127.0.0.1 . You can test whether the virtualized toolchain has access to your Kubernetes cluster by running make verify-kube-connect ( after you have setup your development environment, as described below), which will run kubectl version inside the Docker container used for running all tests. The Docker container for the virtualized toolchain will use the following local mounts from your workstation, and possibly modify its contents: ~/go/src - Your Go workspace's source directory (modifications expected) ~/.cache/go-build - Your Go build cache (modifications expected) ~/.kube - Your Kubernetes client configuration (no modifications) /tmp - Your system's temp directory (modifications expected) Setting up your development environment \u00b6 The following steps are required no matter whether you chose to use a virtualized or a local toolchain. Clone the ArgoCD repository from your personal fork on GitHub \u00b6 mkdir -p ~/go/src/github.com/argoproj cd ~/go/src/github.com/argoproj git clone https://github.com/yourghuser/argo-cd cd argo-cd Optional: Setup an additional Git remote \u00b6 While everyone has their own Git workflow, the author of this document recommends to create a remote called upstream in your local copy pointing to the original ArgoCD repository. This way, you can easily keep your local branches up-to-date by merging in latest changes from the ArgoCD repository, i.e. by doing a git pull upstream master in your locally checked out branch. To create the remote, run git remote add upstream https://github.com/argoproj/argo-cd Install the must-have requirements \u00b6 Make sure you fulfill the pre-requisites above and run some preliminary tests. Neither of them should report an error. Run kubectl version Run docker version Run go version Build (or pull) the required Docker image \u00b6 Build the required Docker image by running make test-tools-image or pull the latest version by issuing docker pull argoproj/argocd-test-tools . The Dockerfile used to build these images can be found at test/container/Dockerfile . Test connection from build container to your K8s cluster \u00b6 Run make verify-kube-connect , it should execute without error. If you receive an error similar to the following: The connection to the server 127 . 0 . 0 . 1 : 6443 was refused - did you specify the right host or port ? make : *** [ Makefile : 386 : verify - kube - connect ] Error 1 you should edit your ~/.kube/config and modify the server option to point to your correct K8s API (as described above). Using k3d \u00b6 k3d is a lightweight wrapper to run k3s , a minimal Kubernetes distribution, in docker. Because it's running in a docker container, you're dealing with docker's internal networking rules when using k3d. A typical Kubernetes cluster running on your local machine is part of the same network that you're on so you can access it using kubectl . However, a Kubernetes cluster running within a docker container (in this case, the one launched by make) cannot access 0.0.0.0 from inside the container itself, when 0.0.0.0 is a network resource outside the container itself (and/or the container's network). This is the cost of a fully self-contained, disposable Kubernetes cluster. The following steps should help with a successful make verify-kube-connect execution. Find your host IP by executing ifconfig on Mac/Linux and ipconfig on Windows. For most users, the following command works to find the IP address. For Mac: IP=`ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'` echo $IP For Linux: IP=`ifconfig eth0 | grep inet | grep -v inet6 | awk '{print $2}'` echo $IP Keep in mind that this IP is dynamically assigned by the router so if your router restarts for any reason, your IP might change. Edit your ~/.kube/config and replace 0.0.0.0 with the above IP address. Execute a kubectl version to make sure you can still connect to the Kubernetes API server via this new IP. Run make verify-kube-connect and check if it works. Finally, so that you don't have to keep updating your kube-config whenever you spin up a new k3d cluster, add --api-port $IP:6550 to your k3d cluster create command, where $IP is the value from step 1. An example command is provided here: k3d cluster create my - cluster -- wait -- k3s - server - arg '--disable=traefik' -- api - port $ IP : 6550 - p 443 : 443 @ loadbalancer The development cycle \u00b6 When you have developed and possibly manually tested the code you want to contribute, you should ensure that everything will build correctly. Commit your changes to the local copy of your Git branch and perform the following steps: Pull in all build dependencies \u00b6 As build dependencies change over time, you have to synchronize your development environment with the current specification. In order to pull in all required dependencies, issue: make dep-ui ArgoCD recently migrated to Go modules. Usually, dependencies will be downloaded on build time, but the Makefile provides two targets to download and vendor all dependencies: make mod-download will download all required Go modules and make mod-vendor will vendor those dependencies into the ArgoCD source tree Generate API glue code and other assets \u00b6 ArgoCD relies on Google's Protocol Buffers for its API, and this makes heavy use of auto-generated glue code and stubs. Whenever you touched parts of the API code, you must re-generate the auto generated code. Run make codegen , this might take a while Check if something has changed by running git status or git diff Commit any possible changes to your local Git branch, an appropriate commit message would be Changes from codegen , for example. Note There are a few non-obvious assets that are auto-generated. You should not change the autogenerated assets, as they will be overwritten by a subsequent run of make codegen . Instead, change their source files. Prominent examples of non-obvious auto-generated code are swagger.json or the installation manifest YAMLs. Build your code and run unit tests \u00b6 After the code glue has been generated, your code should build and the unit tests should run without any errors. Execute the following statements: make build make test These steps are non-modifying, so there's no need to check for changes afterwards. Lint your code base \u00b6 In order to keep a consistent code style in our source tree, your code must be well-formed in accordance to some widely accepted rules, which are applied by a Linter. The Linter might make some automatic changes to your code, such as indentation fixes. Some other errors reported by the Linter have to be fixed manually. Run make lint and observe any errors reported by the Linter Fix any of the errors reported and commit to your local branch Finally, after the Linter reports no errors anymore, run git status or git diff to check for any changes made automatically by Lint If there were automatic changes, commit them to your local branch If you touched UI code, you should also run the Yarn linter on it: Run make lint-ui Fix any of the errors reported by it Setting up a local toolchain \u00b6 For development, you can either use the fully virtualized toolchain provided as Docker images, or you can set up the toolchain on your local development machine. Due to the dynamic nature of requirements, you might want to stay with the virtualized environment. Install required dependencies and build-tools \u00b6 Note The installations instructions are valid for Linux hosts only. Mac instructions will follow shortly. For installing the tools required to build and test ArgoCD on your local system, we provide convenient installer scripts. By default, they will install binaries to /usr/local/bin on your system, which might require root privileges. You can change the target location by setting the BIN environment before running the installer scripts. For example, you can install the binaries into ~/go/bin (which should then be the first component in your PATH environment, i.e. export PATH=~/go/bin:$PATH ): make BIN = ~/go/bin install-tools-local Additionally, you have to install at least the following tools via your OS's package manager (this list might not be always up-to-date): Git LFS plugin GnuPG version 2 Install Go dependencies \u00b6 You need to pull in all required Go dependencies. To do so, run make mod-download-local make mod-vendor-local Test your build toolchain \u00b6 The first thing you can do whether your build toolchain is setup correctly is by generating the glue code for the API and after that, run a normal build: make codegen-local make build-local This should return without any error. Run unit-tests \u00b6 The next thing is to make sure that unit tests are running correctly on your system. These will require that all dependencies, such as Helm, Kustomize, Git, GnuPG, etc are correctly installed and fully functioning: make test-local Run end-to-end tests \u00b6 The final step is running the End-to-End testsuite, which makes sure that your Kubernetes dependencies are working properly. This will involve starting all of the ArgoCD components locally on your computer. The end-to-end tests consists of two parts: a server component, and a client component. First, start the End-to-End server: make start-e2e-local . This will spawn a number of processes and services on your system. When all components have started, run make test-e2e-local to run the end-to-end tests against your local services. For more information about End-to-End tests, refer to the End-to-End test documentation .","title":"Contribution guide"},{"location":"developer-guide/contributing/#contribution-guide","text":"","title":"Contribution guide"},{"location":"developer-guide/contributing/#preface","text":"We want to make contributing to ArgoCD as simple and smooth as possible. This guide shall help you in setting up your build & test environment, so that you can start developing and testing bug fixes and feature enhancements without having to make too much effort in setting up a local toolchain. If you want to submit a PR, please read this document carefully, as it contains important information guiding you through our PR quality gates. As is the case with the development process, this document is under constant change. If you notice any error, or if you think this document is out-of-date, or if you think it is missing something: Feel free to submit a PR or submit a bug to our GitHub issue tracker. If you need guidance with submitting a PR, or have any other questions regarding development of ArgoCD, do not hesitate to join our Slack and get in touch with us in the #argo-dev channel!","title":"Preface"},{"location":"developer-guide/contributing/#before-you-start","text":"You will need at least the following things in your toolchain in order to develop and test ArgoCD locally: A Kubernetes cluster. You won't need a fully blown multi-master, multi-node cluster, but you will need something like K3S, Minikube or microk8s. You will also need a working Kubernetes client ( kubectl ) configuration in your development environment. The configuration must reside in ~/.kube/config and the API server URL must point to the IP address of your local machine (or VM), and not to localhost or 127.0.0.1 if you are using the virtualized development toolchain (see below) You will also need a working Docker runtime environment, to be able to build and run images. The Docker version must be fairly recent, and support multi-stage builds. You should not work as root. Make your local user a member of the docker group to be able to control the Docker service on your machine. Obviously, you will need a git client for pulling source code and pushing back your changes. Last but not least, you will need a Go SDK and related tools (such as GNU make ) installed and working on your development environment. The minimum required Go version for building ArgoCD is v1.14.0 . We will assume that your Go workspace is at ~/go . Note Attention minikube users : By default, minikube will create Kubernetes client configuration that uses authentication data from files. This is incompatible with the virtualized toolchain. So if you intend to use the virtualized toolchain, you have to embed this authentication data into the client configuration. To do so, issue minikube config set embed-certs true and restart your minikube. Please also note that minikube using the Docker driver is currently not supported with the virtualized toolchain, because the Docker driver exposes the API server on 127.0.0.1 hard-coded. If in doubt, run make verify-kube-connect to find out.","title":"Before you start"},{"location":"developer-guide/contributing/#submitting-prs","text":"When you submit a PR against ArgoCD's GitHub repository, a couple of CI checks will be run automatically to ensure your changes will build fine and meet certain quality standards. Your contribution needs to pass those checks in order to be merged into the repository. In general, it might be beneficial to only submit a PR for an existing issue. Especially for larger changes, an Enhancement Proposal should exist before. Note Please make sure that you always create PRs from a branch that is up-to-date with the latest changes from ArgoCD's master branch. Depending on how long it takes for the maintainers to review and merge your PR, it might be necessary to pull in latest changes into your branch again. Please understand that we, as an Open Source project, have limited capacities for reviewing and merging PRs to ArgoCD. We will do our best to review your PR and give you feedback as soon as possible, but please bear with us if it takes a little longer as expected. The following read will help you to submit a PR that meets the standards of our CI tests:","title":"Submitting PRs"},{"location":"developer-guide/contributing/#title-of-the-pr","text":"Please use a meaningful and concise title for your PR. This will help us to pick PRs for review quickly, and the PR title will also end up in the Changelog. We use the Semantic PR title checker to categorize your PR into one of the following categories: fix - Your PR contains one or more code bug fixes feat - Your PR contains a new feature docs - Your PR improves the documentation chore - Your PR improves any internals of ArgoCD, such as the build process, unit tests, etc Please prefix the title of your PR with one of the valid categories. For example, if you chose the title your PR Add documentation for GitHub SSO integration , please use docs: Add documentation for GitHub SSO integration instead.","title":"Title of the PR"},{"location":"developer-guide/contributing/#contributor-license-agreement","text":"Every contributor to ArgoCD must have signed the current Contributor License Agreement (CLA). You only have to sign the CLA when you are a first time contributor, or when the agreement has changed since your last time signing it. The main purpose of the CLA is to ensure that you hold the required rights for your contribution. The CLA signing is an automated process. You can read the current version of the CLA here .","title":"Contributor License Agreement"},{"location":"developer-guide/contributing/#pr-template-checklist","text":"Upon opening a PR, the details will contain a checklist from a template. Please read the checklist, and tick those marks that apply to you.","title":"PR template checklist"},{"location":"developer-guide/contributing/#automated-builds-tests","text":"After you have submitted your PR, and whenever you push new commits to that branch, GitHub will run a number of Continuous Integration checks against your code. It will execute the following actions, and each of them has to pass: Build the Go code ( make build ) Generate API glue code and manifests ( make codegen ) Run a Go linter on the code ( make lint ) Run the unit tests ( make test ) Run the End-to-End tests ( make test-e2e ) Build and lint the UI code ( make lint-ui ) Build the argocd CLI ( make cli ) If any of these tests in the CI pipeline fail, it means that some of your contribution is considered faulty (or a test might be flaky, see below).","title":"Automated builds &amp; tests"},{"location":"developer-guide/contributing/#code-test-coverage","text":"We use CodeCov in our CI pipeline to check for test coverage, and once you submit your PR, it will run and report on the coverage difference as a comment within your PR. If the difference is too high in the negative, i.e. your submission introduced a significant drop in code coverage, the CI check will fail. Whenever you develop a new feature or submit a bug fix, please also write appropriate unit tests for it. If you write a completely new module, please aim for at least 80% of coverage. If you want to see how much coverage just a specific module (i.e. your new one) has, you can set the TEST_MODULE to the (fully qualified) name of that module with make test , i.e.: make test TEST_MODULE = github.com/argoproj/argo-cd/server/cache ... ok github.com/argoproj/argo-cd/server/cache 0 .029s coverage: 89 .3% of statements","title":"Code test coverage"},{"location":"developer-guide/contributing/#local-vs-virtualized-toolchain","text":"ArgoCD provides a fully virtualized development and testing toolchain using Docker images. It is recommended to use those images, as they provide the same runtime environment as the final product and it is much easier to keep up-to-date with changes to the toolchain and dependencies. But as using Docker comes with a slight performance penalty, you might want to setup a local toolchain. Most relevant targets for the build & test cycles in the Makefile provide two variants, one of them suffixed with -local . For example, make test will run unit tests in the Docker container, make test-local will run it natively on your local system. If you are going to use the virtualized toolchain, please bear in mind the following things: Your Kubernetes API server must listen on the interface of your local machine or VM, and not on 127.0.0.1 only. Your Kubernetes client configuration ( ~/.kube/config ) must not use an API URL that points to localhost or 127.0.0.1 . You can test whether the virtualized toolchain has access to your Kubernetes cluster by running make verify-kube-connect ( after you have setup your development environment, as described below), which will run kubectl version inside the Docker container used for running all tests. The Docker container for the virtualized toolchain will use the following local mounts from your workstation, and possibly modify its contents: ~/go/src - Your Go workspace's source directory (modifications expected) ~/.cache/go-build - Your Go build cache (modifications expected) ~/.kube - Your Kubernetes client configuration (no modifications) /tmp - Your system's temp directory (modifications expected)","title":"Local vs Virtualized toolchain"},{"location":"developer-guide/contributing/#setting-up-your-development-environment","text":"The following steps are required no matter whether you chose to use a virtualized or a local toolchain.","title":"Setting up your development environment"},{"location":"developer-guide/contributing/#clone-the-argocd-repository-from-your-personal-fork-on-github","text":"mkdir -p ~/go/src/github.com/argoproj cd ~/go/src/github.com/argoproj git clone https://github.com/yourghuser/argo-cd cd argo-cd","title":"Clone the ArgoCD repository from your personal fork on GitHub"},{"location":"developer-guide/contributing/#optional-setup-an-additional-git-remote","text":"While everyone has their own Git workflow, the author of this document recommends to create a remote called upstream in your local copy pointing to the original ArgoCD repository. This way, you can easily keep your local branches up-to-date by merging in latest changes from the ArgoCD repository, i.e. by doing a git pull upstream master in your locally checked out branch. To create the remote, run git remote add upstream https://github.com/argoproj/argo-cd","title":"Optional: Setup an additional Git remote"},{"location":"developer-guide/contributing/#install-the-must-have-requirements","text":"Make sure you fulfill the pre-requisites above and run some preliminary tests. Neither of them should report an error. Run kubectl version Run docker version Run go version","title":"Install the must-have requirements"},{"location":"developer-guide/contributing/#build-or-pull-the-required-docker-image","text":"Build the required Docker image by running make test-tools-image or pull the latest version by issuing docker pull argoproj/argocd-test-tools . The Dockerfile used to build these images can be found at test/container/Dockerfile .","title":"Build (or pull) the required Docker image"},{"location":"developer-guide/contributing/#test-connection-from-build-container-to-your-k8s-cluster","text":"Run make verify-kube-connect , it should execute without error. If you receive an error similar to the following: The connection to the server 127 . 0 . 0 . 1 : 6443 was refused - did you specify the right host or port ? make : *** [ Makefile : 386 : verify - kube - connect ] Error 1 you should edit your ~/.kube/config and modify the server option to point to your correct K8s API (as described above).","title":"Test connection from build container to your K8s cluster"},{"location":"developer-guide/contributing/#using-k3d","text":"k3d is a lightweight wrapper to run k3s , a minimal Kubernetes distribution, in docker. Because it's running in a docker container, you're dealing with docker's internal networking rules when using k3d. A typical Kubernetes cluster running on your local machine is part of the same network that you're on so you can access it using kubectl . However, a Kubernetes cluster running within a docker container (in this case, the one launched by make) cannot access 0.0.0.0 from inside the container itself, when 0.0.0.0 is a network resource outside the container itself (and/or the container's network). This is the cost of a fully self-contained, disposable Kubernetes cluster. The following steps should help with a successful make verify-kube-connect execution. Find your host IP by executing ifconfig on Mac/Linux and ipconfig on Windows. For most users, the following command works to find the IP address. For Mac: IP=`ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'` echo $IP For Linux: IP=`ifconfig eth0 | grep inet | grep -v inet6 | awk '{print $2}'` echo $IP Keep in mind that this IP is dynamically assigned by the router so if your router restarts for any reason, your IP might change. Edit your ~/.kube/config and replace 0.0.0.0 with the above IP address. Execute a kubectl version to make sure you can still connect to the Kubernetes API server via this new IP. Run make verify-kube-connect and check if it works. Finally, so that you don't have to keep updating your kube-config whenever you spin up a new k3d cluster, add --api-port $IP:6550 to your k3d cluster create command, where $IP is the value from step 1. An example command is provided here: k3d cluster create my - cluster -- wait -- k3s - server - arg '--disable=traefik' -- api - port $ IP : 6550 - p 443 : 443 @ loadbalancer","title":"Using k3d"},{"location":"developer-guide/contributing/#the-development-cycle","text":"When you have developed and possibly manually tested the code you want to contribute, you should ensure that everything will build correctly. Commit your changes to the local copy of your Git branch and perform the following steps:","title":"The development cycle"},{"location":"developer-guide/contributing/#pull-in-all-build-dependencies","text":"As build dependencies change over time, you have to synchronize your development environment with the current specification. In order to pull in all required dependencies, issue: make dep-ui ArgoCD recently migrated to Go modules. Usually, dependencies will be downloaded on build time, but the Makefile provides two targets to download and vendor all dependencies: make mod-download will download all required Go modules and make mod-vendor will vendor those dependencies into the ArgoCD source tree","title":"Pull in all build dependencies"},{"location":"developer-guide/contributing/#generate-api-glue-code-and-other-assets","text":"ArgoCD relies on Google's Protocol Buffers for its API, and this makes heavy use of auto-generated glue code and stubs. Whenever you touched parts of the API code, you must re-generate the auto generated code. Run make codegen , this might take a while Check if something has changed by running git status or git diff Commit any possible changes to your local Git branch, an appropriate commit message would be Changes from codegen , for example. Note There are a few non-obvious assets that are auto-generated. You should not change the autogenerated assets, as they will be overwritten by a subsequent run of make codegen . Instead, change their source files. Prominent examples of non-obvious auto-generated code are swagger.json or the installation manifest YAMLs.","title":"Generate API glue code and other assets"},{"location":"developer-guide/contributing/#build-your-code-and-run-unit-tests","text":"After the code glue has been generated, your code should build and the unit tests should run without any errors. Execute the following statements: make build make test These steps are non-modifying, so there's no need to check for changes afterwards.","title":"Build your code and run unit tests"},{"location":"developer-guide/contributing/#lint-your-code-base","text":"In order to keep a consistent code style in our source tree, your code must be well-formed in accordance to some widely accepted rules, which are applied by a Linter. The Linter might make some automatic changes to your code, such as indentation fixes. Some other errors reported by the Linter have to be fixed manually. Run make lint and observe any errors reported by the Linter Fix any of the errors reported and commit to your local branch Finally, after the Linter reports no errors anymore, run git status or git diff to check for any changes made automatically by Lint If there were automatic changes, commit them to your local branch If you touched UI code, you should also run the Yarn linter on it: Run make lint-ui Fix any of the errors reported by it","title":"Lint your code base"},{"location":"developer-guide/contributing/#setting-up-a-local-toolchain","text":"For development, you can either use the fully virtualized toolchain provided as Docker images, or you can set up the toolchain on your local development machine. Due to the dynamic nature of requirements, you might want to stay with the virtualized environment.","title":"Setting up a local toolchain"},{"location":"developer-guide/contributing/#install-required-dependencies-and-build-tools","text":"Note The installations instructions are valid for Linux hosts only. Mac instructions will follow shortly. For installing the tools required to build and test ArgoCD on your local system, we provide convenient installer scripts. By default, they will install binaries to /usr/local/bin on your system, which might require root privileges. You can change the target location by setting the BIN environment before running the installer scripts. For example, you can install the binaries into ~/go/bin (which should then be the first component in your PATH environment, i.e. export PATH=~/go/bin:$PATH ): make BIN = ~/go/bin install-tools-local Additionally, you have to install at least the following tools via your OS's package manager (this list might not be always up-to-date): Git LFS plugin GnuPG version 2","title":"Install required dependencies and build-tools"},{"location":"developer-guide/contributing/#install-go-dependencies","text":"You need to pull in all required Go dependencies. To do so, run make mod-download-local make mod-vendor-local","title":"Install Go dependencies"},{"location":"developer-guide/contributing/#test-your-build-toolchain","text":"The first thing you can do whether your build toolchain is setup correctly is by generating the glue code for the API and after that, run a normal build: make codegen-local make build-local This should return without any error.","title":"Test your build toolchain"},{"location":"developer-guide/contributing/#run-unit-tests","text":"The next thing is to make sure that unit tests are running correctly on your system. These will require that all dependencies, such as Helm, Kustomize, Git, GnuPG, etc are correctly installed and fully functioning: make test-local","title":"Run unit-tests"},{"location":"developer-guide/contributing/#run-end-to-end-tests","text":"The final step is running the End-to-End testsuite, which makes sure that your Kubernetes dependencies are working properly. This will involve starting all of the ArgoCD components locally on your computer. The end-to-end tests consists of two parts: a server component, and a client component. First, start the End-to-End server: make start-e2e-local . This will spawn a number of processes and services on your system. When all components have started, run make test-e2e-local to run the end-to-end tests against your local services. For more information about End-to-End tests, refer to the End-to-End test documentation .","title":"Run end-to-end tests"},{"location":"developer-guide/debugging-remote-environment/","text":"Debugging a Remote ArgoCD Environment \u00b6 In this guide, we will describe how to debug a remote ArgoCD environment with Telepresence . Telepresence allows you to connect & debug a service deployed in a remote environment and to \"cherry-pick\" one service to run locally, staying connected to the remote cluster. This will: Reduce resource footprint on the local machine Decrease the feedback loop time Result in more confidence about the delivered code. To read more about it, refer to the official documentation at telepresence.io or Medium . Install ArgoCD \u00b6 First of all, install ArgoCD on your cluster kubectl create ns argocd curl -sSfL https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml | kubectl apply -n argocd -f - Connect \u00b6 Connect to one of the services, for example, to debug the main ArgoCD server run: telepresence --swap-deployment argocd-server --namespace argocd --env-file .envrc.remote --expose 8080 :8080 --expose 8083 :8083 --run bash --swap-deployment changes the argocd-server deployment --expose forwards traffic of remote ports 8080 and 8083 to the same ports locally --env-file writes all the environment variables of the remote pod into a local file, the variables are also set on the subprocess of the --run command --run defines which command to run once a connection is established, use bash , zsh or others Debug \u00b6 Once a connection is established, use your favorite tools to start the server locally. Terminal \u00b6 Compile make server Run ./dist/argocd-server VSCode \u00b6 In VSCode use the integrated terminal to run the Telepresence command to connect. Then, to run argocd-server service use the following configuration. Make sure to run packr before starting the debugging session to generate the assets. Update the configuration file to point to kubeconfig file: KUBECONFIG= (required) { \"name\" : \"Launch\" , \"type\" : \"go\" , \"request\" : \"launch\" , \"mode\" : \"auto\" , \"program\" : \"${workspaceFolder}/cmd/argocd-server\" , \"envFile\" : [ \"${workspaceFolder}/.envrc.remote\" , ], \"env\" : { \"CGO_ENABLED\" : \"0\" , \"KUBECONFIG\" : \"/path/to/kube/config\" } }","title":"Debugging a Remote ArgoCD Environment"},{"location":"developer-guide/debugging-remote-environment/#debugging-a-remote-argocd-environment","text":"In this guide, we will describe how to debug a remote ArgoCD environment with Telepresence . Telepresence allows you to connect & debug a service deployed in a remote environment and to \"cherry-pick\" one service to run locally, staying connected to the remote cluster. This will: Reduce resource footprint on the local machine Decrease the feedback loop time Result in more confidence about the delivered code. To read more about it, refer to the official documentation at telepresence.io or Medium .","title":"Debugging a Remote ArgoCD Environment"},{"location":"developer-guide/debugging-remote-environment/#install-argocd","text":"First of all, install ArgoCD on your cluster kubectl create ns argocd curl -sSfL https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml | kubectl apply -n argocd -f -","title":"Install ArgoCD"},{"location":"developer-guide/debugging-remote-environment/#connect","text":"Connect to one of the services, for example, to debug the main ArgoCD server run: telepresence --swap-deployment argocd-server --namespace argocd --env-file .envrc.remote --expose 8080 :8080 --expose 8083 :8083 --run bash --swap-deployment changes the argocd-server deployment --expose forwards traffic of remote ports 8080 and 8083 to the same ports locally --env-file writes all the environment variables of the remote pod into a local file, the variables are also set on the subprocess of the --run command --run defines which command to run once a connection is established, use bash , zsh or others","title":"Connect"},{"location":"developer-guide/debugging-remote-environment/#debug","text":"Once a connection is established, use your favorite tools to start the server locally.","title":"Debug"},{"location":"developer-guide/debugging-remote-environment/#terminal","text":"Compile make server Run ./dist/argocd-server","title":"Terminal"},{"location":"developer-guide/debugging-remote-environment/#vscode","text":"In VSCode use the integrated terminal to run the Telepresence command to connect. Then, to run argocd-server service use the following configuration. Make sure to run packr before starting the debugging session to generate the assets. Update the configuration file to point to kubeconfig file: KUBECONFIG= (required) { \"name\" : \"Launch\" , \"type\" : \"go\" , \"request\" : \"launch\" , \"mode\" : \"auto\" , \"program\" : \"${workspaceFolder}/cmd/argocd-server\" , \"envFile\" : [ \"${workspaceFolder}/.envrc.remote\" , ], \"env\" : { \"CGO_ENABLED\" : \"0\" , \"KUBECONFIG\" : \"/path/to/kube/config\" } }","title":"VSCode"},{"location":"developer-guide/dependencies/","text":"Managing Dependencies \u00b6 GitOps Engine ( github.com/argoproj/gitops-engine ) \u00b6 Repository \u00b6 https://github.com/argoproj/gitops-engine Pulling changes from gitops-engine \u00b6 After your GitOps Engine PR has been merged, ArgoCD needs to be updated to pull in the version of the GitOps engine that contains your change. Here are the steps: Retrieve the SHA hash for your commit. You will use this in the next step. From the argo-cd folder, run the following command go get github.com/argoproj/gitops-engine@<git-commit-sha> If you get an error message invalid version: unknown revision then you got the wrong SHA hash Run: go mod tidy The following files are changed: go.mod go.sum Create an ArgoCD PR with a refactor: type in its title for the two file changes. Tips: \u00b6 See https://github.com/argoproj/argo-cd/pull/4434 as an example The PR might require additional, dependent changes in ArgoCD that are directly impacted by the changes made in the engine. Argo UI Components \u00b6 Repository \u00b6 https://github.com/argoproj/argo-ui Pulling changes from Argo UI into Argo CD \u00b6 If you make changes to the Argo UI component, and your Argo CD changes depend on those changes, follow these steps: Make changes to Argo UI and submit the PR request. Also, prepare your Argo CD changes, but don't create the PR just yet. After the Argo UI PR has been merged to master, then as part of your Argo CD changes: Run yarn add https://github.com/argoproj/argo-ui.git , and then, Check in the regenerated yarn.lock file as part of your Argo CD commit Create the Argo CD PR when you are ready. The PR build and test checks should pass. If your Argo UI change is a 'stand-alone' fix, and you simply want Argo CD to pull in your change, then simply create an Argo CD PR with the yarn.lock file change.","title":"Managing Dependencies"},{"location":"developer-guide/dependencies/#managing-dependencies","text":"","title":"Managing Dependencies"},{"location":"developer-guide/dependencies/#gitops-engine-githubcomargoprojgitops-engine","text":"","title":"GitOps Engine (github.com/argoproj/gitops-engine)"},{"location":"developer-guide/dependencies/#repository","text":"https://github.com/argoproj/gitops-engine","title":"Repository"},{"location":"developer-guide/dependencies/#pulling-changes-from-gitops-engine","text":"After your GitOps Engine PR has been merged, ArgoCD needs to be updated to pull in the version of the GitOps engine that contains your change. Here are the steps: Retrieve the SHA hash for your commit. You will use this in the next step. From the argo-cd folder, run the following command go get github.com/argoproj/gitops-engine@<git-commit-sha> If you get an error message invalid version: unknown revision then you got the wrong SHA hash Run: go mod tidy The following files are changed: go.mod go.sum Create an ArgoCD PR with a refactor: type in its title for the two file changes.","title":"Pulling changes from gitops-engine"},{"location":"developer-guide/dependencies/#tips","text":"See https://github.com/argoproj/argo-cd/pull/4434 as an example The PR might require additional, dependent changes in ArgoCD that are directly impacted by the changes made in the engine.","title":"Tips:"},{"location":"developer-guide/dependencies/#argo-ui-components","text":"","title":"Argo UI Components"},{"location":"developer-guide/dependencies/#repository_1","text":"https://github.com/argoproj/argo-ui","title":"Repository"},{"location":"developer-guide/dependencies/#pulling-changes-from-argo-ui-into-argo-cd","text":"If you make changes to the Argo UI component, and your Argo CD changes depend on those changes, follow these steps: Make changes to Argo UI and submit the PR request. Also, prepare your Argo CD changes, but don't create the PR just yet. After the Argo UI PR has been merged to master, then as part of your Argo CD changes: Run yarn add https://github.com/argoproj/argo-ui.git , and then, Check in the regenerated yarn.lock file as part of your Argo CD commit Create the Argo CD PR when you are ready. The PR build and test checks should pass. If your Argo UI change is a 'stand-alone' fix, and you simply want Argo CD to pull in your change, then simply create an Argo CD PR with the yarn.lock file change.","title":"Pulling changes from Argo UI into Argo CD"},{"location":"developer-guide/faq/","text":"Contribution FAQ \u00b6 General \u00b6 Can I discuss my contribution ideas somewhere? \u00b6 Sure thing! You can either open an Enhancement Proposal in our GitHub issue tracker or you can join us on Slack in channel #argo-dev to discuss your ideas and get guidance for submitting a PR. No one has looked at my PR yet. Why? \u00b6 As we have limited manpower, it can sometimes take a while for someone to respond to your PR. Especially, when your PR contains complex or non-obvious changes. Please bear with us, we try to look at every PR that we receive. Why has my PR been declined? I put much work in it! \u00b6 We appreciate that you have put your valuable time and know how into a contribution. Alas, some changes do not fit into the overall ArgoCD philosophy, and therefore can't be merged into the official ArgoCD source tree. To be on the safe side, make sure that you have created an Enhancement Proposal for your change before starting to work on your PR and have gathered enough feedback from the community and the maintainers. A check on my PR is failing. \u00b6 See Failing CI Checks . What checked-in code is generated, and how is it generated? \u00b6 The following files under this repository are generated, and must be kept up-to-date. Also see Why does the codegen step fail? . See the Makefile for targets that can also run these scripts, and the codegen target which runs them all. Filename Purpose Generated by *.pb.go , *.pb.gw.go Protobuf Interfaces hack/generate-proto.sh assets/swagger.json Swagger 2 API spec hack/update-openapi.sh manifests/ k8s Installation Manifests hack/update-manifests.sh docs/user-guide/commands CLI Documentation tools/cmd-docs/main.go","title":"Contribution FAQ"},{"location":"developer-guide/faq/#contribution-faq","text":"","title":"Contribution FAQ"},{"location":"developer-guide/faq/#general","text":"","title":"General"},{"location":"developer-guide/faq/#can-i-discuss-my-contribution-ideas-somewhere","text":"Sure thing! You can either open an Enhancement Proposal in our GitHub issue tracker or you can join us on Slack in channel #argo-dev to discuss your ideas and get guidance for submitting a PR.","title":"Can I discuss my contribution ideas somewhere?"},{"location":"developer-guide/faq/#no-one-has-looked-at-my-pr-yet-why","text":"As we have limited manpower, it can sometimes take a while for someone to respond to your PR. Especially, when your PR contains complex or non-obvious changes. Please bear with us, we try to look at every PR that we receive.","title":"No one has looked at my PR yet. Why?"},{"location":"developer-guide/faq/#why-has-my-pr-been-declined-i-put-much-work-in-it","text":"We appreciate that you have put your valuable time and know how into a contribution. Alas, some changes do not fit into the overall ArgoCD philosophy, and therefore can't be merged into the official ArgoCD source tree. To be on the safe side, make sure that you have created an Enhancement Proposal for your change before starting to work on your PR and have gathered enough feedback from the community and the maintainers.","title":"Why has my PR been declined? I put much work in it!"},{"location":"developer-guide/faq/#a-check-on-my-pr-is-failing","text":"See Failing CI Checks .","title":"A check on my PR is failing."},{"location":"developer-guide/faq/#what-checked-in-code-is-generated-and-how-is-it-generated","text":"The following files under this repository are generated, and must be kept up-to-date. Also see Why does the codegen step fail? . See the Makefile for targets that can also run these scripts, and the codegen target which runs them all. Filename Purpose Generated by *.pb.go , *.pb.gw.go Protobuf Interfaces hack/generate-proto.sh assets/swagger.json Swagger 2 API spec hack/update-openapi.sh manifests/ k8s Installation Manifests hack/update-manifests.sh docs/user-guide/commands CLI Documentation tools/cmd-docs/main.go","title":"What checked-in code is generated, and how is it generated?"},{"location":"developer-guide/releasing/","text":"Releasing \u00b6 Automated release procedure \u00b6 Starting from release-1.6 branch, ArgoCD can be released in an automated fashion using GitHub actions. The release process takes about 20 minutes, sometimes a little less, depending on the performance of GitHub Actions runners. The target release branch must already exist in the GitHub repository. If you for example want to create a release v1.7.0 , the corresponding release branch release-1.7 needs to exist, otherwise, the release cannot be built. Also, the trigger tag should always be created in the release branch, checked out in your local repository clone. Before triggering the release automation, the CHANGELOG.md should be updated with the latest information, and this change should be committed and pushed to the GitHub repository to the release branch. Afterward, the automation can be triggered. Manual steps before release creation: Update CHANGELOG.md with changes for this release Commit & push changes to CHANGELOG.md Prepare release notes (save to some file, or copy from Changelog) The automation will perform the following steps: Update VERSION file in the release branch Update manifests with image tags of the new version in the release branch Build the Docker image and push to Docker Hub Create a release tag in the GitHub repository Create a GitHub release and attach the required assets to it (CLI binaries, ...) Finally, it will the remove trigger tag from the repository again. Automation supports both, GA and pre-releases. The automation is triggered by pushing a tag to the repository. The tag must be in one of the following formats to trigger the GH workflow: GA: release-v<MAJOR>.<MINOR>.<PATCH> Pre-release: release-v<MAJOR>.<MINOR>.<PATCH>-rc<RC#> The tag must be an annotated tag, and it must contain the release notes in the commit message. Please note that Markdown uses # character for formatting, but Git uses it as comment char. To solve this, temporarily switch Git's comment char to something else, the ; character is recommended. For example, consider you have configured the Git remote for the repository to github.com/argoproj/argo-cd to be named upstream and are in your locally checked out repo: git config core.commentChar ';' git tag -a -F /path/to/release-notes.txt release-v1.6.0-rc2 git push upstream release-v1.6.0-rc2 git tag -d release-v1.6.0-rc2 git config core.commentChar '#' For convenience, there is a shell script in the tree that ensures all the pre-requisites are met and that the trigger is well-formed before pushing it to the GitHub repo. In summary, the modifications it does are: Create annotated trigger tag in your local repository Push the tag to the GitHub repository to trigger the workflow Remove trigger tag from your local repository The script can be found at hack/trigger-release.sh and is used as follows: ./hack/trigger-release.sh <version> <remote name> [ <release notes path> ] The <version> identifier needs to be specified without the release- prefix, so just specify it as v1.6.0-rc2 for example. The <remote name> specifies the name of the remote used to push to the GitHub repository. If you omit the <release notes path> , an editor will pop-up asking you to enter the tag's annotation so you can paste the release notes, save, and exit. It will also take care of temporarily configuring the core.commentChar and setting it back to its original state. :warning: It is strongly recommended to use this script to trigger the workflow instead of manually pushing a tag to the repository. Once the trigger tag is pushed to the repo, the GitHub workflow will start execution. You can follow its progress under the Actions tab, the name of the action is Create release . Don't get confused by the name of the running workflow, it will be the commit message of the latest commit to the master branch, this is a limitation of GH actions. The workflow performs necessary checks so that the release can be successfully built before the build actually starts. It will error when one of the prerequisites is not met, or if the release cannot be built (i.e. already exists, release notes invalid, etc etc). You can see a summary of what has failed in the job's overview page and more detailed errors in the output of the step that has failed. :warning: You cannot perform more than one release on the same release branch at the same time. For example, both v1.6.0 and v1.6.1 would operate on the release-1.6 branch. If you submit v1.6.1 while v1.6.0 is still executing, the release automation will not execute. You have to either cancel v1.6.0 before submitting v1.6.1 or wait until it has finished. You can execute releases on different release branches simultaneously, for example, v1.6.0 and v1.7.0-rc1 , without problems. Verifying automated release \u00b6 After the automatic release creation has finished, you should perform manual checks to see if the release came out correctly: Check status & output of the GitHub action Check https://github.com/argoproj/argo-cd/releases to see if the release has been correctly created and if all required assets are attached. Check whether the image has been published on DockerHub correctly If something went wrong \u00b6 If something went wrong, damage should be limited. Depending on the steps that have been performed, you will need to manually clean up. Delete the release tag (e.g. v1.6.0-rc2 ) created in the GitHub repository. This will immediately set the release (if created) to draft status, invisible to the general public. Delete the draft release (if created) from the Releases page on GitHub If Docker image has been pushed to DockerHub, delete it If commits have been performed to the release branch, revert them. Paths that could have been committed to are: VERSION manifests/* Post-process manual steps \u00b6 For now, the only manual steps left are to update stable tag in the GitHub repository to point to new the release (if appropriate) update the VERSION file on master if this is a new major release These may be automated as well in the future. Manual releasing \u00b6 The automatic release process does not interfere with the manual release process, since the trigger tag does not match a normal release tag. If you prefer to perform, manual release or if automatic release is for some reason broken, these are the steps: Make sure you are logged into Docker Hub: docker login Export the upstream repository and branch name, e.g.: REPO = upstream ; # or origin BRANCH = release-1.3 Set the VERSION environment variable: # release candidate VERSION = v1.3.0-rc1 # GA release VERSION = v1.3.1 Update VERSION and manifests with the new version: git checkout $BRANCH echo ${ VERSION : 1 } > VERSION make dev-tools-image make manifests IMAGE_TAG = $VERSION git commit -am \"Update manifests to $VERSION \" git tag $VERSION Build, and push release to Docker Hub git clean -fd make release IMAGE_NAMESPACE = argoproj IMAGE_TAG = $VERSION DOCKER_PUSH = true git push $REPO $BRANCH git push $REPO $VERSION Update GitHub releases with: Getting started (copy from the previous release) Changelog Binaries (e.g. dist/argocd-darwin-amd64 ). Update brew formulae (manual) \u00b6 If GA, update the Brew formula: brew bump-formula-pr argocd --version ${ VERSION : 1 } Update stable tag (manual) \u00b6 If GA, update stable tag: git tag stable --force && git push $REPO stable --force Verify release \u00b6 Locally: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/ $VERSION /manifests/install.yaml Follow the Getting Started Guide . If GA: brew upgrade argocd /usr/local/bin/argocd version Sync Argo CD in https://cd.apps.argoproj.io/applications/argo-cd . Deploy the site .","title":"Releasing"},{"location":"developer-guide/releasing/#releasing","text":"","title":"Releasing"},{"location":"developer-guide/releasing/#automated-release-procedure","text":"Starting from release-1.6 branch, ArgoCD can be released in an automated fashion using GitHub actions. The release process takes about 20 minutes, sometimes a little less, depending on the performance of GitHub Actions runners. The target release branch must already exist in the GitHub repository. If you for example want to create a release v1.7.0 , the corresponding release branch release-1.7 needs to exist, otherwise, the release cannot be built. Also, the trigger tag should always be created in the release branch, checked out in your local repository clone. Before triggering the release automation, the CHANGELOG.md should be updated with the latest information, and this change should be committed and pushed to the GitHub repository to the release branch. Afterward, the automation can be triggered. Manual steps before release creation: Update CHANGELOG.md with changes for this release Commit & push changes to CHANGELOG.md Prepare release notes (save to some file, or copy from Changelog) The automation will perform the following steps: Update VERSION file in the release branch Update manifests with image tags of the new version in the release branch Build the Docker image and push to Docker Hub Create a release tag in the GitHub repository Create a GitHub release and attach the required assets to it (CLI binaries, ...) Finally, it will the remove trigger tag from the repository again. Automation supports both, GA and pre-releases. The automation is triggered by pushing a tag to the repository. The tag must be in one of the following formats to trigger the GH workflow: GA: release-v<MAJOR>.<MINOR>.<PATCH> Pre-release: release-v<MAJOR>.<MINOR>.<PATCH>-rc<RC#> The tag must be an annotated tag, and it must contain the release notes in the commit message. Please note that Markdown uses # character for formatting, but Git uses it as comment char. To solve this, temporarily switch Git's comment char to something else, the ; character is recommended. For example, consider you have configured the Git remote for the repository to github.com/argoproj/argo-cd to be named upstream and are in your locally checked out repo: git config core.commentChar ';' git tag -a -F /path/to/release-notes.txt release-v1.6.0-rc2 git push upstream release-v1.6.0-rc2 git tag -d release-v1.6.0-rc2 git config core.commentChar '#' For convenience, there is a shell script in the tree that ensures all the pre-requisites are met and that the trigger is well-formed before pushing it to the GitHub repo. In summary, the modifications it does are: Create annotated trigger tag in your local repository Push the tag to the GitHub repository to trigger the workflow Remove trigger tag from your local repository The script can be found at hack/trigger-release.sh and is used as follows: ./hack/trigger-release.sh <version> <remote name> [ <release notes path> ] The <version> identifier needs to be specified without the release- prefix, so just specify it as v1.6.0-rc2 for example. The <remote name> specifies the name of the remote used to push to the GitHub repository. If you omit the <release notes path> , an editor will pop-up asking you to enter the tag's annotation so you can paste the release notes, save, and exit. It will also take care of temporarily configuring the core.commentChar and setting it back to its original state. :warning: It is strongly recommended to use this script to trigger the workflow instead of manually pushing a tag to the repository. Once the trigger tag is pushed to the repo, the GitHub workflow will start execution. You can follow its progress under the Actions tab, the name of the action is Create release . Don't get confused by the name of the running workflow, it will be the commit message of the latest commit to the master branch, this is a limitation of GH actions. The workflow performs necessary checks so that the release can be successfully built before the build actually starts. It will error when one of the prerequisites is not met, or if the release cannot be built (i.e. already exists, release notes invalid, etc etc). You can see a summary of what has failed in the job's overview page and more detailed errors in the output of the step that has failed. :warning: You cannot perform more than one release on the same release branch at the same time. For example, both v1.6.0 and v1.6.1 would operate on the release-1.6 branch. If you submit v1.6.1 while v1.6.0 is still executing, the release automation will not execute. You have to either cancel v1.6.0 before submitting v1.6.1 or wait until it has finished. You can execute releases on different release branches simultaneously, for example, v1.6.0 and v1.7.0-rc1 , without problems.","title":"Automated release procedure"},{"location":"developer-guide/releasing/#verifying-automated-release","text":"After the automatic release creation has finished, you should perform manual checks to see if the release came out correctly: Check status & output of the GitHub action Check https://github.com/argoproj/argo-cd/releases to see if the release has been correctly created and if all required assets are attached. Check whether the image has been published on DockerHub correctly","title":"Verifying automated release"},{"location":"developer-guide/releasing/#if-something-went-wrong","text":"If something went wrong, damage should be limited. Depending on the steps that have been performed, you will need to manually clean up. Delete the release tag (e.g. v1.6.0-rc2 ) created in the GitHub repository. This will immediately set the release (if created) to draft status, invisible to the general public. Delete the draft release (if created) from the Releases page on GitHub If Docker image has been pushed to DockerHub, delete it If commits have been performed to the release branch, revert them. Paths that could have been committed to are: VERSION manifests/*","title":"If something went wrong"},{"location":"developer-guide/releasing/#post-process-manual-steps","text":"For now, the only manual steps left are to update stable tag in the GitHub repository to point to new the release (if appropriate) update the VERSION file on master if this is a new major release These may be automated as well in the future.","title":"Post-process manual steps"},{"location":"developer-guide/releasing/#manual-releasing","text":"The automatic release process does not interfere with the manual release process, since the trigger tag does not match a normal release tag. If you prefer to perform, manual release or if automatic release is for some reason broken, these are the steps: Make sure you are logged into Docker Hub: docker login Export the upstream repository and branch name, e.g.: REPO = upstream ; # or origin BRANCH = release-1.3 Set the VERSION environment variable: # release candidate VERSION = v1.3.0-rc1 # GA release VERSION = v1.3.1 Update VERSION and manifests with the new version: git checkout $BRANCH echo ${ VERSION : 1 } > VERSION make dev-tools-image make manifests IMAGE_TAG = $VERSION git commit -am \"Update manifests to $VERSION \" git tag $VERSION Build, and push release to Docker Hub git clean -fd make release IMAGE_NAMESPACE = argoproj IMAGE_TAG = $VERSION DOCKER_PUSH = true git push $REPO $BRANCH git push $REPO $VERSION Update GitHub releases with: Getting started (copy from the previous release) Changelog Binaries (e.g. dist/argocd-darwin-amd64 ).","title":"Manual releasing"},{"location":"developer-guide/releasing/#update-brew-formulae-manual","text":"If GA, update the Brew formula: brew bump-formula-pr argocd --version ${ VERSION : 1 }","title":"Update brew formulae (manual)"},{"location":"developer-guide/releasing/#update-stable-tag-manual","text":"If GA, update stable tag: git tag stable --force && git push $REPO stable --force","title":"Update stable tag (manual)"},{"location":"developer-guide/releasing/#verify-release","text":"Locally: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/ $VERSION /manifests/install.yaml Follow the Getting Started Guide . If GA: brew upgrade argocd /usr/local/bin/argocd version Sync Argo CD in https://cd.apps.argoproj.io/applications/argo-cd . Deploy the site .","title":"Verify release"},{"location":"developer-guide/running-locally/","text":"Running ArgoCD locally \u00b6 Run ArgoCD outside of Kubernetes \u00b6 During development, it might be viable to run ArgoCD outside of a Kubernetes cluster. This will greatly speed up development, as you don't have to constantly build, push and install new ArgoCD Docker images with your latest changes. You will still need a working Kubernetes cluster, as described in the Contribution Guide , where ArgoCD will store all of its resources. If you followed the Contribution Guide in setting up your toolchain, you can run ArgoCD locally with these simple steps: Install ArgoCD resources to your cluster \u00b6 First push the installation manifest into argocd namespace: kubectl create namespace argocd kubectl apply -n argocd --force -f manifests/install.yaml Scale down any ArgoCD instance in your cluster \u00b6 Make sure that ArgoCD is not running in your development cluster by scaling down the deployments: kubectl -n argocd scale statefulset/argocd-application-controller --replicas 0 kubectl -n argocd scale deployment/argocd-dex-server --replicas 0 kubectl -n argocd scale deployment/argocd-repo-server --replicas 0 kubectl -n argocd scale deployment/argocd-server --replicas 0 kubectl -n argocd scale deployment/argocd-redis --replicas 0 Start local services \u00b6 Before starting local services, make sure you are present in argocd namespace. When you use the virtualized toolchain, starting local services is as simple as running make start This will start all ArgoCD services and the UI in a Docker container and expose the following ports to your host: The ArgoCD API server on port 8080 The ArgoCD UI server on port 4000 You can now use either the web UI by pointing your browser to http://localhost:4000 or use the CLI against the API at http://localhost:8080 . Be sure to use the --insecure and --plaintext options to the CLI. As an alternative to using the above command line parameters each time you call argocd CLI, you can set the following environment variables: export ARGOCD_SERVER = 127 .0.0.1:8080 export ARGOCD_OPTS = \"--plaintext --insecure\" Scale up ArgoCD in your cluster \u00b6 Once you have finished testing your changes locally and want to bring back ArgoCD in your development cluster, simply scale the deployments up again: kubectl -n argocd scale statefulset/argocd-application-controller --replicas 1 kubectl -n argocd scale deployment/argocd-dex-server --replicas 1 kubectl -n argocd scale deployment/argocd-repo-server --replicas 1 kubectl -n argocd scale deployment/argocd-server --replicas 1 kubectl -n argocd scale deployment/argocd-redis --replicas 1 Run your own ArgoCD images on your cluster \u00b6 For your final tests, it might be necessary to build your own images and run them in your development cluster. Create Docker account and login \u00b6 You might need to create a account on Docker Hub if you don't have one already. Once you created your account, login from your development environment: docker login Create and push Docker images \u00b6 You will need to push the built images to your own Docker namespace: export IMAGE_NAMESPACE = youraccount If you don't set IMAGE_TAG in your environment, the default of :latest will be used. To change the tag, export the variable in the environment: export IMAGE_TAG = 1 .5.0-myrc Then you can build & push the image in one step: DOCKER_PUSH = true make image Configure manifests for your image \u00b6 With IMAGE_NAMESPACE and IMAGE_TAG still set, run: make manifests to build a new set of installation manifests which include your specific image reference. Note Do not commit these manifests to your repository. If you want to revert the changes, the easiest way is to unset IMAGE_NAMESPACE and IMAGE_TAG from your environment and run make manifests again. This will re-create the default manifests. Configure your cluster with custom manifests \u00b6 The final step is to push the manifests to your cluster, so it will pull and run your image: kubectl apply -n argocd --force -f manifests/install.yaml","title":"Running ArgoCD locally"},{"location":"developer-guide/running-locally/#running-argocd-locally","text":"","title":"Running ArgoCD locally"},{"location":"developer-guide/running-locally/#run-argocd-outside-of-kubernetes","text":"During development, it might be viable to run ArgoCD outside of a Kubernetes cluster. This will greatly speed up development, as you don't have to constantly build, push and install new ArgoCD Docker images with your latest changes. You will still need a working Kubernetes cluster, as described in the Contribution Guide , where ArgoCD will store all of its resources. If you followed the Contribution Guide in setting up your toolchain, you can run ArgoCD locally with these simple steps:","title":"Run ArgoCD outside of Kubernetes"},{"location":"developer-guide/running-locally/#install-argocd-resources-to-your-cluster","text":"First push the installation manifest into argocd namespace: kubectl create namespace argocd kubectl apply -n argocd --force -f manifests/install.yaml","title":"Install ArgoCD resources to your cluster"},{"location":"developer-guide/running-locally/#scale-down-any-argocd-instance-in-your-cluster","text":"Make sure that ArgoCD is not running in your development cluster by scaling down the deployments: kubectl -n argocd scale statefulset/argocd-application-controller --replicas 0 kubectl -n argocd scale deployment/argocd-dex-server --replicas 0 kubectl -n argocd scale deployment/argocd-repo-server --replicas 0 kubectl -n argocd scale deployment/argocd-server --replicas 0 kubectl -n argocd scale deployment/argocd-redis --replicas 0","title":"Scale down any ArgoCD instance in your cluster"},{"location":"developer-guide/running-locally/#start-local-services","text":"Before starting local services, make sure you are present in argocd namespace. When you use the virtualized toolchain, starting local services is as simple as running make start This will start all ArgoCD services and the UI in a Docker container and expose the following ports to your host: The ArgoCD API server on port 8080 The ArgoCD UI server on port 4000 You can now use either the web UI by pointing your browser to http://localhost:4000 or use the CLI against the API at http://localhost:8080 . Be sure to use the --insecure and --plaintext options to the CLI. As an alternative to using the above command line parameters each time you call argocd CLI, you can set the following environment variables: export ARGOCD_SERVER = 127 .0.0.1:8080 export ARGOCD_OPTS = \"--plaintext --insecure\"","title":"Start local services"},{"location":"developer-guide/running-locally/#scale-up-argocd-in-your-cluster","text":"Once you have finished testing your changes locally and want to bring back ArgoCD in your development cluster, simply scale the deployments up again: kubectl -n argocd scale statefulset/argocd-application-controller --replicas 1 kubectl -n argocd scale deployment/argocd-dex-server --replicas 1 kubectl -n argocd scale deployment/argocd-repo-server --replicas 1 kubectl -n argocd scale deployment/argocd-server --replicas 1 kubectl -n argocd scale deployment/argocd-redis --replicas 1","title":"Scale up ArgoCD in your cluster"},{"location":"developer-guide/running-locally/#run-your-own-argocd-images-on-your-cluster","text":"For your final tests, it might be necessary to build your own images and run them in your development cluster.","title":"Run your own ArgoCD images on your cluster"},{"location":"developer-guide/running-locally/#create-docker-account-and-login","text":"You might need to create a account on Docker Hub if you don't have one already. Once you created your account, login from your development environment: docker login","title":"Create Docker account and login"},{"location":"developer-guide/running-locally/#create-and-push-docker-images","text":"You will need to push the built images to your own Docker namespace: export IMAGE_NAMESPACE = youraccount If you don't set IMAGE_TAG in your environment, the default of :latest will be used. To change the tag, export the variable in the environment: export IMAGE_TAG = 1 .5.0-myrc Then you can build & push the image in one step: DOCKER_PUSH = true make image","title":"Create and push Docker images"},{"location":"developer-guide/running-locally/#configure-manifests-for-your-image","text":"With IMAGE_NAMESPACE and IMAGE_TAG still set, run: make manifests to build a new set of installation manifests which include your specific image reference. Note Do not commit these manifests to your repository. If you want to revert the changes, the easiest way is to unset IMAGE_NAMESPACE and IMAGE_TAG from your environment and run make manifests again. This will re-create the default manifests.","title":"Configure manifests for your image"},{"location":"developer-guide/running-locally/#configure-your-cluster-with-custom-manifests","text":"The final step is to push the manifests to your cluster, so it will pull and run your image: kubectl apply -n argocd --force -f manifests/install.yaml","title":"Configure your cluster with custom manifests"},{"location":"developer-guide/site/","text":"Site \u00b6 Developing And Testing \u00b6 The web site is build using mkdocs and mkdocs-material . To test: make serve-docs Check for broken external links: make lint-docs Deploying \u00b6 make publish-docs Analytics \u00b6 Tip Don't forget to disable your ad-blocker when testing. We collect Google Analytics .","title":"Site"},{"location":"developer-guide/site/#site","text":"","title":"Site"},{"location":"developer-guide/site/#developing-and-testing","text":"The web site is build using mkdocs and mkdocs-material . To test: make serve-docs Check for broken external links: make lint-docs","title":"Developing And Testing"},{"location":"developer-guide/site/#deploying","text":"make publish-docs","title":"Deploying"},{"location":"developer-guide/site/#analytics","text":"Tip Don't forget to disable your ad-blocker when testing. We collect Google Analytics .","title":"Analytics"},{"location":"developer-guide/test-e2e/","text":"E2E Tests \u00b6 Warning This documentation is out-of-date. Please bear with us while we work to update the documentation to reflect reality! The directory contains E2E tests and test applications. The test assume that Argo CD services are installed into argocd-e2e namespace or cluster in current context. One throw-away namespace argocd-e2e*** is created prior to tests execute. The throw-away namespace is used as a target namespace for test applications. The test/e2e/testdata directory contains various Argo CD applications. Before test execution directory is copies into /tmp/argocd-e2e*** temp directory and used in tests as a Git repository via file url: file:///tmp/argocd-e2e*** . Running Tests Locally \u00b6 Start the e2e version make start-e2e Run the tests: make test-e2e You can observe the tests by using the UI http://localhost:8080/applications . Configuration of E2E Tests execution \u00b6 The Makefile's start-e2e target starts instances of ArgoCD on your local machine, of which the most will require a network listener. If for whatever reason you already have network services on your machine listening on the same ports, the e2e tests will not be able to run. You can derive from the defaults by setting the following environment variables before you run make start-e2e : ARGOCD_E2E_APISERVER_PORT : Listener port for argocd-server (default: 8080 ) ARGOCD_E2E_REPOSERVER_PORT : Listener port for argocd-reposerver (default: 8081 ) ARGOCD_E2E_DEX_PORT : Listener port for dex (default: 5556 ) ARGOCD_E2E_REDIS_PORT : Listener port for redis (default: 6379 ) ARGOCD_E2E_YARN_CMD : Command to use for starting the UI via Yarn (default: yarn ) If you have changed the port for argocd-server , be sure to also set ARGOCD_SERVER environment variable to point to that port, e.g. export ARGOCD_SERVER=localhost:8888 before running make test-e2e so that the test will communicate to the correct server component. CI Set-up \u00b6 The tests are executed by Argo Workflow defined at .argo-ci/ci.yaml . CI job The builds an Argo CD image, deploy argo cd components into throw-away kubernetes cluster provisioned using k3s and run e2e tests against it. Test Isolation \u00b6 Some effort has been made to balance test isolation with speed. Tests are isolated as follows as each test gets: A random 5 character ID. A unique Git repository containing the testdata in /tmp/argocd-e2e/${id} . A namespace argocd-e2e-ns-${id} . An primary name for the app argocd-e2e-${id} . Troubleshooting \u00b6 Tests fails to delete argocd-e2e-ns-* namespaces. This maybe due to the metrics server, run this: kubectl api-resources If it exits with status code 1, run: kubectl delete apiservice v1beta1.metrics.k8s.io Remove /spec/finalizers from the namespace kubectl edit ns argocd-e2e-ns-*","title":"E2E Tests"},{"location":"developer-guide/test-e2e/#e2e-tests","text":"Warning This documentation is out-of-date. Please bear with us while we work to update the documentation to reflect reality! The directory contains E2E tests and test applications. The test assume that Argo CD services are installed into argocd-e2e namespace or cluster in current context. One throw-away namespace argocd-e2e*** is created prior to tests execute. The throw-away namespace is used as a target namespace for test applications. The test/e2e/testdata directory contains various Argo CD applications. Before test execution directory is copies into /tmp/argocd-e2e*** temp directory and used in tests as a Git repository via file url: file:///tmp/argocd-e2e*** .","title":"E2E Tests"},{"location":"developer-guide/test-e2e/#running-tests-locally","text":"Start the e2e version make start-e2e Run the tests: make test-e2e You can observe the tests by using the UI http://localhost:8080/applications .","title":"Running Tests Locally"},{"location":"developer-guide/test-e2e/#configuration-of-e2e-tests-execution","text":"The Makefile's start-e2e target starts instances of ArgoCD on your local machine, of which the most will require a network listener. If for whatever reason you already have network services on your machine listening on the same ports, the e2e tests will not be able to run. You can derive from the defaults by setting the following environment variables before you run make start-e2e : ARGOCD_E2E_APISERVER_PORT : Listener port for argocd-server (default: 8080 ) ARGOCD_E2E_REPOSERVER_PORT : Listener port for argocd-reposerver (default: 8081 ) ARGOCD_E2E_DEX_PORT : Listener port for dex (default: 5556 ) ARGOCD_E2E_REDIS_PORT : Listener port for redis (default: 6379 ) ARGOCD_E2E_YARN_CMD : Command to use for starting the UI via Yarn (default: yarn ) If you have changed the port for argocd-server , be sure to also set ARGOCD_SERVER environment variable to point to that port, e.g. export ARGOCD_SERVER=localhost:8888 before running make test-e2e so that the test will communicate to the correct server component.","title":"Configuration of E2E Tests execution"},{"location":"developer-guide/test-e2e/#ci-set-up","text":"The tests are executed by Argo Workflow defined at .argo-ci/ci.yaml . CI job The builds an Argo CD image, deploy argo cd components into throw-away kubernetes cluster provisioned using k3s and run e2e tests against it.","title":"CI Set-up"},{"location":"developer-guide/test-e2e/#test-isolation","text":"Some effort has been made to balance test isolation with speed. Tests are isolated as follows as each test gets: A random 5 character ID. A unique Git repository containing the testdata in /tmp/argocd-e2e/${id} . A namespace argocd-e2e-ns-${id} . An primary name for the app argocd-e2e-${id} .","title":"Test Isolation"},{"location":"developer-guide/test-e2e/#troubleshooting","text":"Tests fails to delete argocd-e2e-ns-* namespaces. This maybe due to the metrics server, run this: kubectl api-resources If it exits with status code 1, run: kubectl delete apiservice v1beta1.metrics.k8s.io Remove /spec/finalizers from the namespace kubectl edit ns argocd-e2e-ns-*","title":"Troubleshooting"},{"location":"operator-manual/","text":"Overview \u00b6 This guide is for administrator and operator wanting to install and configure Argo CD for other developers. Note Please make sure you've completed the getting started guide .","title":"Overview"},{"location":"operator-manual/#overview","text":"This guide is for administrator and operator wanting to install and configure Argo CD for other developers. Note Please make sure you've completed the getting started guide .","title":"Overview"},{"location":"operator-manual/architecture/","text":"Architectural Overview \u00b6 Components \u00b6 API Server \u00b6 The API server is a gRPC/REST server which exposes the API consumed by the Web UI, CLI, and CI/CD systems. It has the following responsibilities: application management and status reporting invoking of application operations (e.g. sync, rollback, user-defined actions) repository and cluster credential management (stored as K8s secrets) authentication and auth delegation to external identity providers RBAC enforcement listener/forwarder for Git webhook events Repository Server \u00b6 The repository server is an internal service which maintains a local cache of the Git repository holding the application manifests. It is responsible for generating and returning the Kubernetes manifests when provided the following inputs: repository URL revision (commit, tag, branch) application path template specific settings: parameters, ksonnet environments, helm values.yaml Application Controller \u00b6 The application controller is a Kubernetes controller which continuously monitors running applications and compares the current, live state against the desired target state (as specified in the repo). It detects OutOfSync application state and optionally takes corrective action. It is responsible for invoking any user-defined hooks for lifecycle events (PreSync, Sync, PostSync)","title":"Architectural Overview"},{"location":"operator-manual/architecture/#architectural-overview","text":"","title":"Architectural Overview"},{"location":"operator-manual/architecture/#components","text":"","title":"Components"},{"location":"operator-manual/architecture/#api-server","text":"The API server is a gRPC/REST server which exposes the API consumed by the Web UI, CLI, and CI/CD systems. It has the following responsibilities: application management and status reporting invoking of application operations (e.g. sync, rollback, user-defined actions) repository and cluster credential management (stored as K8s secrets) authentication and auth delegation to external identity providers RBAC enforcement listener/forwarder for Git webhook events","title":"API Server"},{"location":"operator-manual/architecture/#repository-server","text":"The repository server is an internal service which maintains a local cache of the Git repository holding the application manifests. It is responsible for generating and returning the Kubernetes manifests when provided the following inputs: repository URL revision (commit, tag, branch) application path template specific settings: parameters, ksonnet environments, helm values.yaml","title":"Repository Server"},{"location":"operator-manual/architecture/#application-controller","text":"The application controller is a Kubernetes controller which continuously monitors running applications and compares the current, live state against the desired target state (as specified in the repo). It detects OutOfSync application state and optionally takes corrective action. It is responsible for invoking any user-defined hooks for lifecycle events (PreSync, Sync, PostSync)","title":"Application Controller"},{"location":"operator-manual/cluster-bootstrapping/","text":"Cluster Bootstrapping \u00b6 This guide for operators who have already installed Argo CD, and have a new cluster and are looking to install many apps in that cluster. There's no one particular pattern to solve this problem, e.g. you could write a script to create your apps, or you could even manually create them. However, users of Argo CD tend to use the app of apps pattern . App Of Apps Pattern \u00b6 Declaratively specify one Argo CD app that consists only of other apps. Helm Example \u00b6 This example shows how to use Helm to achieve this. You can, of course, use another tool if you like. A typical layout of your Git repository for this might be: \u251c\u2500\u2500 Chart.yaml \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 guestbook.yaml \u2502 \u251c\u2500\u2500 helm-dependency.yaml \u2502 \u251c\u2500\u2500 helm-guestbook.yaml \u2502 \u2514\u2500\u2500 kustomize-guestbook.yaml \u2514\u2500\u2500 values.yaml Chart.yaml is boiler-plate. templates contains one file for each child app, roughly: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook namespace : argocd finalizers : - resources-finalizer.argocd.argoproj.io spec : destination : namespace : argocd server : {{ .Values.spec.destination.server }} project : default source : path : guestbook repoURL : https://github.com/argoproj/argocd-example-apps targetRevision : HEAD The sync policy to automated + prune, so that child apps are automatically created, synced, and deleted when the manifest is changed, but you may wish to disable this. I've also added the finalizer, which will ensure that your apps are deleted correctly. Fix the revision to a specific Git commit SHA to make sure that, even if the child apps repo changes, the app will only change when the parent app change that revision. Alternatively, you can set it to HEAD or a branch name. As you probably want to override the cluster server, this is a templated values. values.yaml contains the default values: spec : destination : server : https://kubernetes.default.svc Next, you need to create and sync your parent app, e.g. via the CLI: argocd app create apps \\ --dest-namespace argocd \\ --dest-server https://kubernetes.default.svc \\ --repo https://github.com/argoproj/argocd-example-apps.git \\ --path apps argocd app sync apps The parent app will appear as in-sync but the child apps will be out of sync: You can either sync via the UI, firstly filter by the correct label: Then select the \"out of sync\" apps and sync: Or, via the CLI: argocd app sync -l app.kubernetes.io/instance = apps View the example on Github .","title":"Cluster Bootstrapping"},{"location":"operator-manual/cluster-bootstrapping/#cluster-bootstrapping","text":"This guide for operators who have already installed Argo CD, and have a new cluster and are looking to install many apps in that cluster. There's no one particular pattern to solve this problem, e.g. you could write a script to create your apps, or you could even manually create them. However, users of Argo CD tend to use the app of apps pattern .","title":"Cluster Bootstrapping"},{"location":"operator-manual/cluster-bootstrapping/#app-of-apps-pattern","text":"Declaratively specify one Argo CD app that consists only of other apps.","title":"App Of Apps Pattern"},{"location":"operator-manual/cluster-bootstrapping/#helm-example","text":"This example shows how to use Helm to achieve this. You can, of course, use another tool if you like. A typical layout of your Git repository for this might be: \u251c\u2500\u2500 Chart.yaml \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 guestbook.yaml \u2502 \u251c\u2500\u2500 helm-dependency.yaml \u2502 \u251c\u2500\u2500 helm-guestbook.yaml \u2502 \u2514\u2500\u2500 kustomize-guestbook.yaml \u2514\u2500\u2500 values.yaml Chart.yaml is boiler-plate. templates contains one file for each child app, roughly: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook namespace : argocd finalizers : - resources-finalizer.argocd.argoproj.io spec : destination : namespace : argocd server : {{ .Values.spec.destination.server }} project : default source : path : guestbook repoURL : https://github.com/argoproj/argocd-example-apps targetRevision : HEAD The sync policy to automated + prune, so that child apps are automatically created, synced, and deleted when the manifest is changed, but you may wish to disable this. I've also added the finalizer, which will ensure that your apps are deleted correctly. Fix the revision to a specific Git commit SHA to make sure that, even if the child apps repo changes, the app will only change when the parent app change that revision. Alternatively, you can set it to HEAD or a branch name. As you probably want to override the cluster server, this is a templated values. values.yaml contains the default values: spec : destination : server : https://kubernetes.default.svc Next, you need to create and sync your parent app, e.g. via the CLI: argocd app create apps \\ --dest-namespace argocd \\ --dest-server https://kubernetes.default.svc \\ --repo https://github.com/argoproj/argocd-example-apps.git \\ --path apps argocd app sync apps The parent app will appear as in-sync but the child apps will be out of sync: You can either sync via the UI, firstly filter by the correct label: Then select the \"out of sync\" apps and sync: Or, via the CLI: argocd app sync -l app.kubernetes.io/instance = apps View the example on Github .","title":"Helm Example"},{"location":"operator-manual/custom-styles/","text":"Custom Styles \u00b6 Argo CD has imports the majority of its UI stylesheets from the argo-ui project. Sometimes, it may be desired to customize certain components of the UI for branding purposes or to help distinguish between multiple instances of Argo CD running in different environments. Such custom styling can be applied either by supplying a URL to a remotely hosted CSS file, or by loading a CSS file directly onto the argocd-server container. Both mechanisms are driven by modifying the argocd-cm configMap. Adding Styles Via Remote URL \u00b6 The first method simply requires the addition of the remote URL to the argocd-cm configMap: argocd-cm \u00b6 --- apiVersion : v1 kind : ConfigMap metadata : ... name : argocd-cm data : ui.cssurl : \"https://www.myhost.com/my-styles.css\" Adding Styles Via Volume Mounts \u00b6 The second method requires mounting the CSS file directly onto the argocd-server container and then providing the argocd-cm with the properly configured path to that file. In the following example, the CSS file is actually defined inside of a separate configMap (the same effect could be achieved by generating or downloading a CSS file in an initContainer): argocd-cm \u00b6 --- apiVersion : v1 kind : ConfigMap metadata : ... name : argocd-cm data : ui.cssurl : \"./custom/my-styles.css\" Note that the cssurl should be specified relative to the \"/shared/app\" directory; not as an absolute path. argocd-styles-cm \u00b6 --- apiVersion : v1 kind : ConfigMap metadata : ... name : argocd-styles-cm data : my-styles.css : | .nav-bar { background: linear-gradient(to bottom, #999, #777, #333, #222, #111); } argocd-server \u00b6 --- apiVersion : apps/v1 kind : Deployment metadata : name : argocd-server ... spec : template : ... spec : containers : - command : ... volumeMounts : ... - mountPath : /shared/app/custom name : styles ... volumes : ... - configMap : name : argocd-styles-cm name : styles Note that the CSS file should be mounted within a subdirectory of the existing \"/shared/app\" directory (e.g. \"/shared/app/custom\"). Otherwise, the file will likely fail to be imported by the browser with an \"incorrect MIME type\" error. Developing Style Overlays \u00b6 The styles specified in the injected CSS file should be specific to components and classes defined in argo-ui . It is recommended to test out the styles you wish to apply first by making use of your browser's built-in developer tools. For a more full-featured experience, you may wish to build a separate project using the Argo CD UI dev server .","title":"Custom Styles"},{"location":"operator-manual/custom-styles/#custom-styles","text":"Argo CD has imports the majority of its UI stylesheets from the argo-ui project. Sometimes, it may be desired to customize certain components of the UI for branding purposes or to help distinguish between multiple instances of Argo CD running in different environments. Such custom styling can be applied either by supplying a URL to a remotely hosted CSS file, or by loading a CSS file directly onto the argocd-server container. Both mechanisms are driven by modifying the argocd-cm configMap.","title":"Custom Styles"},{"location":"operator-manual/custom-styles/#adding-styles-via-remote-url","text":"The first method simply requires the addition of the remote URL to the argocd-cm configMap:","title":"Adding Styles Via Remote URL"},{"location":"operator-manual/custom-styles/#argocd-cm","text":"--- apiVersion : v1 kind : ConfigMap metadata : ... name : argocd-cm data : ui.cssurl : \"https://www.myhost.com/my-styles.css\"","title":"argocd-cm"},{"location":"operator-manual/custom-styles/#adding-styles-via-volume-mounts","text":"The second method requires mounting the CSS file directly onto the argocd-server container and then providing the argocd-cm with the properly configured path to that file. In the following example, the CSS file is actually defined inside of a separate configMap (the same effect could be achieved by generating or downloading a CSS file in an initContainer):","title":"Adding Styles Via Volume Mounts"},{"location":"operator-manual/custom-styles/#argocd-cm_1","text":"--- apiVersion : v1 kind : ConfigMap metadata : ... name : argocd-cm data : ui.cssurl : \"./custom/my-styles.css\" Note that the cssurl should be specified relative to the \"/shared/app\" directory; not as an absolute path.","title":"argocd-cm"},{"location":"operator-manual/custom-styles/#argocd-styles-cm","text":"--- apiVersion : v1 kind : ConfigMap metadata : ... name : argocd-styles-cm data : my-styles.css : | .nav-bar { background: linear-gradient(to bottom, #999, #777, #333, #222, #111); }","title":"argocd-styles-cm"},{"location":"operator-manual/custom-styles/#argocd-server","text":"--- apiVersion : apps/v1 kind : Deployment metadata : name : argocd-server ... spec : template : ... spec : containers : - command : ... volumeMounts : ... - mountPath : /shared/app/custom name : styles ... volumes : ... - configMap : name : argocd-styles-cm name : styles Note that the CSS file should be mounted within a subdirectory of the existing \"/shared/app\" directory (e.g. \"/shared/app/custom\"). Otherwise, the file will likely fail to be imported by the browser with an \"incorrect MIME type\" error.","title":"argocd-server"},{"location":"operator-manual/custom-styles/#developing-style-overlays","text":"The styles specified in the injected CSS file should be specific to components and classes defined in argo-ui . It is recommended to test out the styles you wish to apply first by making use of your browser's built-in developer tools. For a more full-featured experience, you may wish to build a separate project using the Argo CD UI dev server .","title":"Developing Style Overlays"},{"location":"operator-manual/custom_tools/","text":"Custom Tooling \u00b6 Argo CD bundles preferred versions of its supported templating tools (helm, kustomize, ks, jsonnet) as part of its container images. Sometimes, it may be desired to use a specific version of a tool other than what Argo CD bundles. Some reasons to do this might be: To upgrade/downgrade to a specific version of a tool due to bugs or bug fixes. To install additional dependencies which to be used by kustomize's configmap/secret generators (e.g. curl, vault, gpg, AWS CLI) To install a config management plugin As the Argo CD repo-server is the single service responsible for generating Kubernetes manifests, it can be customized to use alternative toolchain required by your environment. Adding Tools Via Volume Mounts \u00b6 The first technique is to use an init container and a volumeMount to copy a different version of a tool into the repo-server container. In the following example, an init container is overwriting the helm binary with a different version than what is bundled in Argo CD: spec : # 1. Define an emptyDir volume which will hold the custom binaries volumes : - name : custom-tools emptyDir : {} # 2. Use an init container to download/copy custom binaries into the emptyDir initContainers : - name : download-tools image : alpine:3.8 command : [ sh , -c ] args : - wget -qO- https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | tar -xvzf - && mv linux-amd64/helm /custom-tools/ volumeMounts : - mountPath : /custom-tools name : custom-tools # 3. Volume mount the custom binary to the bin directory (overriding the existing version) containers : - name : argocd-repo-server volumeMounts : - mountPath : /usr/local/bin/helm name : custom-tools subPath : helm BYOI (Build Your Own Image) \u00b6 Sometimes replacing a binary isn't sufficient and you need to install other dependencies. The following example builds an entirely customized repo-server from a Dockerfile, installing extra dependencies that may be needed for generating manifests. FROM argoproj/argocd:latest # Switch to root for the ability to perform install USER root # Install tools needed for your repo-server to retrieve & decrypt secrets, render manifests # (e.g. curl, awscli, gpg, sops) RUN apt-get update && \\ apt-get install -y \\ curl \\ awscli \\ gpg && \\ apt-get clean && \\ rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\ curl -o /usr/local/bin/sops -L https://github.com/mozilla/sops/releases/download/3.2.0/sops-3.2.0.linux && \\ chmod +x /usr/local/bin/sops # Switch back to non-root user USER argocd","title":"Custom Tooling"},{"location":"operator-manual/custom_tools/#custom-tooling","text":"Argo CD bundles preferred versions of its supported templating tools (helm, kustomize, ks, jsonnet) as part of its container images. Sometimes, it may be desired to use a specific version of a tool other than what Argo CD bundles. Some reasons to do this might be: To upgrade/downgrade to a specific version of a tool due to bugs or bug fixes. To install additional dependencies which to be used by kustomize's configmap/secret generators (e.g. curl, vault, gpg, AWS CLI) To install a config management plugin As the Argo CD repo-server is the single service responsible for generating Kubernetes manifests, it can be customized to use alternative toolchain required by your environment.","title":"Custom Tooling"},{"location":"operator-manual/custom_tools/#adding-tools-via-volume-mounts","text":"The first technique is to use an init container and a volumeMount to copy a different version of a tool into the repo-server container. In the following example, an init container is overwriting the helm binary with a different version than what is bundled in Argo CD: spec : # 1. Define an emptyDir volume which will hold the custom binaries volumes : - name : custom-tools emptyDir : {} # 2. Use an init container to download/copy custom binaries into the emptyDir initContainers : - name : download-tools image : alpine:3.8 command : [ sh , -c ] args : - wget -qO- https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | tar -xvzf - && mv linux-amd64/helm /custom-tools/ volumeMounts : - mountPath : /custom-tools name : custom-tools # 3. Volume mount the custom binary to the bin directory (overriding the existing version) containers : - name : argocd-repo-server volumeMounts : - mountPath : /usr/local/bin/helm name : custom-tools subPath : helm","title":"Adding Tools Via Volume Mounts"},{"location":"operator-manual/custom_tools/#byoi-build-your-own-image","text":"Sometimes replacing a binary isn't sufficient and you need to install other dependencies. The following example builds an entirely customized repo-server from a Dockerfile, installing extra dependencies that may be needed for generating manifests. FROM argoproj/argocd:latest # Switch to root for the ability to perform install USER root # Install tools needed for your repo-server to retrieve & decrypt secrets, render manifests # (e.g. curl, awscli, gpg, sops) RUN apt-get update && \\ apt-get install -y \\ curl \\ awscli \\ gpg && \\ apt-get clean && \\ rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\ curl -o /usr/local/bin/sops -L https://github.com/mozilla/sops/releases/download/3.2.0/sops-3.2.0.linux && \\ chmod +x /usr/local/bin/sops # Switch back to non-root user USER argocd","title":"BYOI (Build Your Own Image)"},{"location":"operator-manual/declarative-setup/","text":"Declarative Setup \u00b6 Argo CD applications, projects and settings can be defined declaratively using Kubernetes manifests. These can be updated using kubectl apply , without needing to touch the argocd command-line tool. Quick Reference \u00b6 File Name Resource Name Kind Description argocd-cm.yaml argocd-cm ConfigMap General Argo CD configuration argocd-secret.yaml argocd-secret Secret Password, Certificates, Signing Key argocd-rbac-cm.yaml argocd-rbac-cm ConfigMap RBAC Configuration argocd-tls-certs-cm.yaml argocd-tls-certs-cm ConfigMap Custom TLS certificates for connecting Git repositories via HTTPS (v1.2 and later) argocd-ssh-known-hosts-cm.yaml argocd-ssh-known-hosts-cm ConfigMap SSH known hosts data for connecting Git repositories via SSH (v1.2 and later) application.yaml - Application Example application spec project.yaml - AppProject Example project spec All resources, including Application and AppProject specs, have to be installed in the ArgoCD namespace (by default argocd ). Also, ConfigMap and Secret resources need to be named as shown in the table above. For Application and AppProject resources, the name of the resource equals the name of the application or project within ArgoCD. This also means that application and project names are unique within the same ArgoCD installation - you cannot i.e. have the same application name for two different applications. A note about ConfigMap resources Be sure to annotate your ConfigMap resources using the label app.kubernetes.io/part-of: argocd , otherwise ArgoCD will not be able to use them. Applications \u00b6 The Application CRD is the Kubernetes resource object representing a deployed application instance in an environment. It is defined by two key pieces of information: source reference to the desired state in Git (repository, revision, path, environment) destination reference to the target cluster and namespace. For the cluster one of server or name can be used, but not both (which will result in an error). Behind the hood when the server is missing, it is being calculated based on the name and then the server is used for any operations. A minimal Application spec is as follows: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook namespace : argocd spec : project : default source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : guestbook destination : server : https://kubernetes.default.svc namespace : guestbook See application.yaml for additional fields. As long as you have completed the first step of Getting Started , you can already apply this with kubectl apply -n argocd -f application.yaml and Argo CD will start deploying the guestbook application. Note The namespace must match the namespace of your Argo cd, typically this is argocd . Note When creating an application from a Helm repository, the chart attribute must be specified instead of the path attribute within spec.source . spec : source : repoURL : https://argoproj.github.io/argo-helm chart : argo Warning By default, deleting an application will not perform a cascade delete, thereby deleting its resources. You must add the finalizer if you want this behaviour - which you may well not want. metadata : finalizers : - resources-finalizer.argocd.argoproj.io App of Apps \u00b6 You can create an app that creates other apps, which in turn can create other apps. This allows you to declaratively manage a group of app that can be deployed and configured in concert. See cluster bootstrapping . Projects \u00b6 The AppProject CRD is the Kubernetes resource object representing a logical grouping of applications. It is defined by the following key pieces of information: sourceRepos reference to the repositories that applications within the project can pull manifests from. destinations reference to clusters and namespaces that applications within the project can deploy into (don't use the name field, only server is being matched). roles list of entities with definitions of their access to resources within the project. An example spec is as follows: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : my-project namespace : argocd # Finalizer that ensures that project is not deleted until it is not referenced by any application finalizers : - resources-finalizer.argocd.argoproj.io spec : description : Example Project # Allow manifests to deploy from any Git repos sourceRepos : - '*' # Only permit applications to deploy to the guestbook namespace in the same cluster destinations : - namespace : guestbook server : https://kubernetes.default.svc # Deny all cluster-scoped resources from being created, except for Namespace clusterResourceWhitelist : - group : '' kind : Namespace # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy namespaceResourceBlacklist : - group : '' kind : ResourceQuota - group : '' kind : LimitRange - group : '' kind : NetworkPolicy # Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet namespaceResourceWhitelist : - group : 'apps' kind : Deployment - group : 'apps' kind : StatefulSet roles : # A role which provides read-only access to all applications in the project - name : read-only description : Read-only privileges to my-project policies : - p, proj:my-project:read-only, applications, get, my-project/*, allow groups : - my-oidc-group # A role which provides sync privileges to only the guestbook-dev application, e.g. to provide # sync privileges to a CI system - name : ci-role description : Sync privileges for guestbook-dev policies : - p, proj:my-project:ci-role, applications, sync, my-project/guestbook-dev, allow # NOTE: JWT tokens can only be generated by the API server and the token is not persisted # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list. jwtTokens : - iat : 1535390316 Repositories \u00b6 Note Some Git hosters - notably GitLab and possibly on-premise GitLab instances as well - require you to specify the .git suffix in the repository URL, otherwise they will send a HTTP 301 redirect to the repository URL suffixed with .git . ArgoCD will not follow these redirects, so you have to adapt your repository URL to be suffixed with .git . Repository credentials are stored in secret. Use following steps to configure a repo: Create secret which contains repository credentials. Consider using bitnami-labs/sealed-secrets to store encrypted secret definition as a Kubernetes manifest. Register repository in the argocd-cm config map. Each repository must have url field and, depending on whether you connect using HTTPS or SSH, usernameSecret and passwordSecret (for HTTPS) or sshPrivateKeySecret (for SSH). Example for HTTPS: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | - url: https://github.com/argoproj/my-private-repository passwordSecret: name: my-secret key: password usernameSecret: name: my-secret key: username Example for SSH: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | - url: git@github.com:argoproj/my-private-repository sshPrivateKeySecret: name: my-secret key: sshPrivateKey Tip The Kubernetes documentation has instructions for creating a secret containing a private key . Repository Credentials \u00b6 Earlier than v1.4 If you want to use the same credentials for multiple repositories, you can use repository.credentials : apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | - url: https://github.com/argoproj/private-repo - url: https://github.com/argoproj/other-private-repo repository.credentials : | - url: https://github.com/argoproj passwordSecret: name: my-secret key: password usernameSecret: name: my-secret key: username - url: git@github.com:argoproj-labs sshPrivateKeySecret: name: my-secret key: sshPrivateKey Argo CD will only use the credentials if you omit usernameSecret , passwordSecret , and sshPrivateKeySecret fields ( insecureIgnoreHostKey is ignored) or if your repository is not listed in repositories . A credential may be match if it's URL is the prefix of the repository's URL. The means that credentials may match, e.g in the above example both https://github.com/argoproj and https://github.com would match. Argo CD selects the first one that matches. Tip Order your credentials with the most specific at the top and the least specific at the bottom. A complete example. apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | # this has it's own credentials - url: https://github.com/argoproj/private-repo passwordSecret: name: private-repo-secret key: password usernameSecret: name: private-repo-secret key: username sshPrivateKeySecret: name: private-repo-secret key: sshPrivateKey - url: https://github.com/argoproj/other-private-repo - url: https://github.com/otherproj/another-private-repo repository.credentials : | # this will be used for the second repo - url: https://github.com/argoproj passwordSecret: name: other-private-repo-secret key: password usernameSecret: name: other-private-repo-secret key: username sshPrivateKeySecret: name: other-private-repo-secret key: sshPrivateKey # this will be used for the third repo - url: https://github.com passwordSecret: name: another-private-repo-secret key: password usernameSecret: name: another-private-repo-secret key: username sshPrivateKeySecret: name: another-private-repo-secret key: sshPrivateKey v1.4 or later If you want to use the same credentials for multiple repositories, you can use repository.credentials to configure credential templates. Credential templates can carry the same credentials information as repositories. apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | - url: https://github.com/argoproj/private-repo - url: https://github.com/argoproj/other-private-repo repository.credentials : | - url: https://github.com/argoproj passwordSecret: name: my-secret key: password usernameSecret: name: my-secret key: username In the above example, every repository accessed via HTTPS whose URL is prefixed with https://github.com/argoproj would use a username stored in the key username and a password stored in the key password of the secret my-secret for connecting to Git. In order for ArgoCD to use a credential template for any given repository, the following conditions must be met: The repository must either not be configured at all, or if configured, must not contain any credential information (i.e. contain none of sshPrivateKeySecret , usernameSecret , passwordSecret ) The URL configured for a credential template (e.g. https://github.com/argoproj ) must match as prefix for the repository URL (e.g. https://github.com/argoproj/argocd-example-apps ). Note Matching credential template URL prefixes is done on a best match effort, so the longest (best) match will take precedence. The order of definition is not important, as opposed to pre v1.4 configuration. The following keys are valid to refer to credential secrets: SSH repositories \u00b6 sshPrivateKeySecret refers to a secret where an SSH private key is stored for accessing the repositories HTTPS repositories \u00b6 usernameSecret and passwordSecret refer to secrets where username and/or password are stored for accessing the repositories tlsClientCertData and tlsClientCertKey refer to secrets where a TLS client certificate ( tlsClientCertData ) and the corresponding private key tlsClientCertKey are stored for accessing the repositories Repositories using self-signed TLS certificates (or are signed by custom CA) \u00b6 v1.2 or later You can manage the TLS certificates used to verify the authenticity of your repository servers in a ConfigMap object named argocd-tls-certs-cm . The data section should contain a map, with the repository server's hostname part (not the complete URL) as key, and the certificate(s) in PEM format as data. So, if you connect to a repository with the URL https://server.example.com/repos/my-repo , you should use server.example.com as key. The certificate data should be either the server's certificate (in case of self-signed certificate) or the certificate of the CA that was used to sign the server's certificate. You can configure multiple certificates for each server, e.g. if you are having a certificate roll-over planned. If there are no dedicated certificates configured for a repository server, the system's default trust store is used for validating the server's repository. This should be good enough for most (if not all) public Git repository services such as GitLab, GitHub and Bitbucket as well as most privately hosted sites which use certificates from well-known CAs, including Let's Encrypt certificates. An example ConfigMap object: apiVersion : v1 kind : ConfigMap metadata : name : argocd-tls-certs-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : server.example.com : | -----BEGIN CERTIFICATE----- MIIF1zCCA7+gAwIBAgIUQdTcSHY2Sxd3Tq/v1eIEZPCNbOowDQYJKoZIhvcNAQEL BQAwezELMAkGA1UEBhMCREUxFTATBgNVBAgMDExvd2VyIFNheG9ueTEQMA4GA1UE BwwHSGFub3ZlcjEVMBMGA1UECgwMVGVzdGluZyBDb3JwMRIwEAYDVQQLDAlUZXN0 c3VpdGUxGDAWBgNVBAMMD2Jhci5leGFtcGxlLmNvbTAeFw0xOTA3MDgxMzU2MTda Fw0yMDA3MDcxMzU2MTdaMHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIDAxMb3dlciBT YXhvbnkxEDAOBgNVBAcMB0hhbm92ZXIxFTATBgNVBAoMDFRlc3RpbmcgQ29ycDES MBAGA1UECwwJVGVzdHN1aXRlMRgwFgYDVQQDDA9iYXIuZXhhbXBsZS5jb20wggIi MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCv4mHMdVUcafmaSHVpUM0zZWp5 NFXfboxA4inuOkE8kZlbGSe7wiG9WqLirdr39Ts+WSAFA6oANvbzlu3JrEQ2CHPc CNQm6diPREFwcDPFCe/eMawbwkQAPVSHPts0UoRxnpZox5pn69ghncBR+jtvx+/u P6HdwW0qqTvfJnfAF1hBJ4oIk2AXiip5kkIznsAh9W6WRy6nTVCeetmIepDOGe0G ZJIRn/OfSz7NzKylfDCat2z3EAutyeT/5oXZoWOmGg/8T7pn/pR588GoYYKRQnp+ YilqCPFX+az09EqqK/iHXnkdZ/Z2fCuU+9M/Zhrnlwlygl3RuVBI6xhm/ZsXtL2E Gxa61lNy6pyx5+hSxHEFEJshXLtioRd702VdLKxEOuYSXKeJDs1x9o6cJ75S6hko Ml1L4zCU+xEsMcvb1iQ2n7PZdacqhkFRUVVVmJ56th8aYyX7KNX6M9CD+kMpNm6J kKC1li/Iy+RI138bAvaFplajMF551kt44dSvIoJIbTr1LigudzWPqk31QaZXV/4u kD1n4p/XMc9HYU/was/CmQBFqmIZedTLTtK7clkuFN6wbwzdo1wmUNgnySQuMacO gxhHxxzRWxd24uLyk9Px+9U3BfVPaRLiOPaPoC58lyVOykjSgfpgbus7JS69fCq7 bEH4Jatp/10zkco+UQIDAQABo1MwUTAdBgNVHQ4EFgQUjXH6PHi92y4C4hQpey86 r6+x1ewwHwYDVR0jBBgwFoAUjXH6PHi92y4C4hQpey86r6+x1ewwDwYDVR0TAQH/ BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAFE4SdKsX9UsLy+Z0xuHSxhTd0jfn Iih5mtzb8CDNO5oTw4z0aMeAvpsUvjJ/XjgxnkiRACXh7K9hsG2r+ageRWGevyvx CaRXFbherV1kTnZw4Y9/pgZTYVWs9jlqFOppz5sStkfjsDQ5lmPJGDii/StENAz2 XmtiPOgfG9Upb0GAJBCuKnrU9bIcT4L20gd2F4Y14ccyjlf8UiUi192IX6yM9OjT +TuXwZgqnTOq6piVgr+FTSa24qSvaXb5z/mJDLlk23npecTouLg83TNSn3R6fYQr d/Y9eXuUJ8U7/qTh2Ulz071AO9KzPOmleYPTx4Xty4xAtWi1QE5NHW9/Ajlv5OtO OnMNWIs7ssDJBsB7VFC8hcwf79jz7kC0xmQqDfw51Xhhk04kla+v+HZcFW2AO9so 6ZdVHHQnIbJa7yQJKZ+hK49IOoBR6JgdB5kymoplLLiuqZSYTcwSBZ72FYTm3iAr jzvt1hxpxVDmXvRnkhRrIRhK4QgJL0jRmirBjDY+PYYd7bdRIjN7WNZLFsgplnS8 9w6CwG32pRlm0c8kkiQ7FXA6BYCqOsDI8f1VGQv331OpR2Ck+FTv+L7DAmg6l37W +LB9LGh4OAp68ImTjqf6ioGKG0RBSznwME+r4nXtT1S/qLR6ASWUS4ViWRhbRlNK XWyb96wrUlv+E8I= -----END CERTIFICATE----- Note The argocd-tls-certs-cm ConfigMap will be mounted as a volume at the mount path /app/config/tls in the pods of argocd-server and argocd-repo-server . It will create files for each data key in the mount path directory, so above example would leave the file /app/config/tls/server.example.com , which contains the certificate data. It might take a while for changes in the ConfigMap to be reflected in your pods, depending on your Kubernetes configuration. SSH known host public keys \u00b6 If you are connecting repositories via SSH, ArgoCD will need to know the SSH known hosts public key of the repository servers. You can manage the SSH known hosts data in the ConfigMap named argocd-ssh-known-hosts-cm . This ConfigMap contains a single key/value pair, with ssh_known_hosts as the key and the actual public keys of the SSH servers as data. As opposed to TLS configuration, the public key(s) of each single repository server ArgoCD will connect via SSH must be configured, otherwise the connections to the repository will fail. There is no fallback. The data can be copied from any existing ssh_known_hosts file, or from the output of the ssh-keyscan utility. The basic format is <servername> <keydata> , one entry per line. An example ConfigMap object: apiVersion : v1 kind : ConfigMap metadata : name : argocd-ssh-known-hosts-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : ssh_known_hosts : | bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw== github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY= gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9 ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H Note The argocd-ssh-known-hosts-cm ConfigMap will be mounted as a volume at the mount path /app/config/ssh in the pods of argocd-server and argocd-repo-server . It will create a file ssh_known_hosts in that directory, which contains the SSH known hosts data used by ArgoCD for connecting to Git repositories via SSH. It might take a while for changes in the ConfigMap to be reflected in your pods, depending on your Kubernetes configuration. Clusters \u00b6 Cluster credentials are stored in secrets same as repository credentials but does not require entry in argocd-cm config map. Each secret must have label argocd.argoproj.io/secret-type: cluster . The secret data must include following fields: name - cluster name server - cluster api server url namespaces - optional comma-separated list of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty. config - JSON representation of following data structure: # Basic authentication settings username : string password : string # Bearer authentication settings bearerToken : string # IAM authentication configuration awsAuthConfig : clusterName : string roleARN : string # Configure external command to supply client credentials # See https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig execProviderConfig : command : string args : [ string ] env : { key : value } apiVersion : string installHint : string # Transport layer security configuration settings tlsClientConfig : # PEM-encoded bytes (typically read from a client certificate file). caData : string # PEM-encoded bytes (typically read from a client certificate file). certData : string # Server should be accessed without verifying the TLS certificate insecure : boolean # PEM-encoded bytes (typically read from a client certificate key file). keyData : string # ServerName is passed to the server for SNI and is used in the client to check server # certificates against. If ServerName is empty, the hostname used to contact the # server is used. serverName : string Note that if you specify a command to run under execProviderConfig , that command must be available in the ArgoCD image. See BYOI (Build Your Own Image) . Cluster secret example: apiVersion : v1 kind : Secret metadata : name : mycluster-secret labels : argocd.argoproj.io/secret-type : cluster type : Opaque stringData : name : mycluster.com server : https://mycluster.com config : | { \"bearerToken\": \"<authentication token>\", \"tlsClientConfig\": { \"insecure\": false, \"caData\": \"<base64 encoded certificate>\" } } Helm Chart Repositories \u00b6 Non standard Helm Chart repositories have to be registered under the repositories key in the argocd-cm ConfigMap. Each repository must have url , type and name fields. For private Helm repos you may need to configure access credentials and HTTPS settings using usernameSecret , passwordSecret , caSecret , certSecret and keySecret fields. Example: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : # v1.2 or earlier use `helm.repositories` helm.repositories : | - url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts name: istio.io # v1.3 or later use `repositories` with `type: helm` repositories : | - type: helm url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts name: istio.io - type: helm url: https://argoproj.github.io/argo-helm name: argo usernameSecret: name: my-secret key: username passwordSecret: name: my-secret key: password caSecret: name: my-secret key: ca certSecret: name: my-secret key: cert keySecret: name: my-secret key: key Resource Exclusion/Inclusion \u00b6 Resources can be excluded from discovery and sync so that ArgoCD is unaware of them. For example, events.k8s.io and metrics.k8s.io are always excluded. Use cases: You have temporal issues and you want to exclude problematic resources. There are many of a kind of resources that impacts ArgoCD's performance. Restrict ArgoCD's access to certain kinds of resources, e.g. secrets. See security.md#cluster-rbac . To configure this, edit the argcd-cm config map: kubectl edit configmap argocd-cm -n argocd Add resource.exclusions , e.g.: apiVersion : v1 data : resource.exclusions : | - apiGroups: - \"*\" kinds: - \"*\" clusters: - https://192.168.0.20 kind : ConfigMap The resource.exclusions node is a list of objects. Each object can have: apiGroups A list of globs to match the API group. kinds A list of kinds to match. Can be \"*\" to match all. cluster A list of globs to match the cluster. If all three match, then the resource is ignored. In addition to exclusions, you might configure the list of included resources using the resource.inclusions setting. By default, all resource group/kinds are included. The resource.inclusions setting allows customizing the list of included group/kinds: apiVersion : v1 data : resource.inclusions : | - apiGroups: - \"*\" kinds: - Deployment clusters: - https://192.168.0.20 kind : ConfigMap The resource.inclusions and resource.exclusions might be used together. The final list of resources includes group/kinds specified in resource.inclusions minus group/kinds specified in resource.exclusions setting. Notes: Quote globs in your YAML to avoid parsing errors. Invalid globs result in the whole rule being ignored. If you add a rule that matches existing resources, these will appear in the interface as OutOfSync . SSO & RBAC \u00b6 SSO configuration details: SSO RBAC configuration details: RBAC Manage Argo CD Using Argo CD \u00b6 Argo CD is able to manage itself since all settings are represented by Kubernetes manifests. The suggested way is to create Kustomize based application which uses base Argo CD manifests from https://github.com/argoproj/argo-cd and apply required changes on top. Example of kustomization.yaml : bases : - github.com/argoproj/argo-cd//manifests/cluster-install?ref=v1.0.1 # additional resources like ingress rules, cluster and repository secrets. resources : - clusters-secrets.yaml - repos-secrets.yaml # changes to config maps patchesStrategicMerge : - overlays/argo-cd-cm.yaml The live example of self managed Argo CD config is available at https://cd.apps.argoproj.io and with configuration stored at argoproj/argoproj-deployments . Note You will need to sign-in using your github account to get access to https://cd.apps.argoproj.io","title":"Declarative Setup"},{"location":"operator-manual/declarative-setup/#declarative-setup","text":"Argo CD applications, projects and settings can be defined declaratively using Kubernetes manifests. These can be updated using kubectl apply , without needing to touch the argocd command-line tool.","title":"Declarative Setup"},{"location":"operator-manual/declarative-setup/#quick-reference","text":"File Name Resource Name Kind Description argocd-cm.yaml argocd-cm ConfigMap General Argo CD configuration argocd-secret.yaml argocd-secret Secret Password, Certificates, Signing Key argocd-rbac-cm.yaml argocd-rbac-cm ConfigMap RBAC Configuration argocd-tls-certs-cm.yaml argocd-tls-certs-cm ConfigMap Custom TLS certificates for connecting Git repositories via HTTPS (v1.2 and later) argocd-ssh-known-hosts-cm.yaml argocd-ssh-known-hosts-cm ConfigMap SSH known hosts data for connecting Git repositories via SSH (v1.2 and later) application.yaml - Application Example application spec project.yaml - AppProject Example project spec All resources, including Application and AppProject specs, have to be installed in the ArgoCD namespace (by default argocd ). Also, ConfigMap and Secret resources need to be named as shown in the table above. For Application and AppProject resources, the name of the resource equals the name of the application or project within ArgoCD. This also means that application and project names are unique within the same ArgoCD installation - you cannot i.e. have the same application name for two different applications. A note about ConfigMap resources Be sure to annotate your ConfigMap resources using the label app.kubernetes.io/part-of: argocd , otherwise ArgoCD will not be able to use them.","title":"Quick Reference"},{"location":"operator-manual/declarative-setup/#applications","text":"The Application CRD is the Kubernetes resource object representing a deployed application instance in an environment. It is defined by two key pieces of information: source reference to the desired state in Git (repository, revision, path, environment) destination reference to the target cluster and namespace. For the cluster one of server or name can be used, but not both (which will result in an error). Behind the hood when the server is missing, it is being calculated based on the name and then the server is used for any operations. A minimal Application spec is as follows: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook namespace : argocd spec : project : default source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : guestbook destination : server : https://kubernetes.default.svc namespace : guestbook See application.yaml for additional fields. As long as you have completed the first step of Getting Started , you can already apply this with kubectl apply -n argocd -f application.yaml and Argo CD will start deploying the guestbook application. Note The namespace must match the namespace of your Argo cd, typically this is argocd . Note When creating an application from a Helm repository, the chart attribute must be specified instead of the path attribute within spec.source . spec : source : repoURL : https://argoproj.github.io/argo-helm chart : argo Warning By default, deleting an application will not perform a cascade delete, thereby deleting its resources. You must add the finalizer if you want this behaviour - which you may well not want. metadata : finalizers : - resources-finalizer.argocd.argoproj.io","title":"Applications"},{"location":"operator-manual/declarative-setup/#app-of-apps","text":"You can create an app that creates other apps, which in turn can create other apps. This allows you to declaratively manage a group of app that can be deployed and configured in concert. See cluster bootstrapping .","title":"App of Apps"},{"location":"operator-manual/declarative-setup/#projects","text":"The AppProject CRD is the Kubernetes resource object representing a logical grouping of applications. It is defined by the following key pieces of information: sourceRepos reference to the repositories that applications within the project can pull manifests from. destinations reference to clusters and namespaces that applications within the project can deploy into (don't use the name field, only server is being matched). roles list of entities with definitions of their access to resources within the project. An example spec is as follows: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : my-project namespace : argocd # Finalizer that ensures that project is not deleted until it is not referenced by any application finalizers : - resources-finalizer.argocd.argoproj.io spec : description : Example Project # Allow manifests to deploy from any Git repos sourceRepos : - '*' # Only permit applications to deploy to the guestbook namespace in the same cluster destinations : - namespace : guestbook server : https://kubernetes.default.svc # Deny all cluster-scoped resources from being created, except for Namespace clusterResourceWhitelist : - group : '' kind : Namespace # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy namespaceResourceBlacklist : - group : '' kind : ResourceQuota - group : '' kind : LimitRange - group : '' kind : NetworkPolicy # Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet namespaceResourceWhitelist : - group : 'apps' kind : Deployment - group : 'apps' kind : StatefulSet roles : # A role which provides read-only access to all applications in the project - name : read-only description : Read-only privileges to my-project policies : - p, proj:my-project:read-only, applications, get, my-project/*, allow groups : - my-oidc-group # A role which provides sync privileges to only the guestbook-dev application, e.g. to provide # sync privileges to a CI system - name : ci-role description : Sync privileges for guestbook-dev policies : - p, proj:my-project:ci-role, applications, sync, my-project/guestbook-dev, allow # NOTE: JWT tokens can only be generated by the API server and the token is not persisted # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list. jwtTokens : - iat : 1535390316","title":"Projects"},{"location":"operator-manual/declarative-setup/#repositories","text":"Note Some Git hosters - notably GitLab and possibly on-premise GitLab instances as well - require you to specify the .git suffix in the repository URL, otherwise they will send a HTTP 301 redirect to the repository URL suffixed with .git . ArgoCD will not follow these redirects, so you have to adapt your repository URL to be suffixed with .git . Repository credentials are stored in secret. Use following steps to configure a repo: Create secret which contains repository credentials. Consider using bitnami-labs/sealed-secrets to store encrypted secret definition as a Kubernetes manifest. Register repository in the argocd-cm config map. Each repository must have url field and, depending on whether you connect using HTTPS or SSH, usernameSecret and passwordSecret (for HTTPS) or sshPrivateKeySecret (for SSH). Example for HTTPS: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | - url: https://github.com/argoproj/my-private-repository passwordSecret: name: my-secret key: password usernameSecret: name: my-secret key: username Example for SSH: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | - url: git@github.com:argoproj/my-private-repository sshPrivateKeySecret: name: my-secret key: sshPrivateKey Tip The Kubernetes documentation has instructions for creating a secret containing a private key .","title":"Repositories"},{"location":"operator-manual/declarative-setup/#repository-credentials","text":"Earlier than v1.4 If you want to use the same credentials for multiple repositories, you can use repository.credentials : apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | - url: https://github.com/argoproj/private-repo - url: https://github.com/argoproj/other-private-repo repository.credentials : | - url: https://github.com/argoproj passwordSecret: name: my-secret key: password usernameSecret: name: my-secret key: username - url: git@github.com:argoproj-labs sshPrivateKeySecret: name: my-secret key: sshPrivateKey Argo CD will only use the credentials if you omit usernameSecret , passwordSecret , and sshPrivateKeySecret fields ( insecureIgnoreHostKey is ignored) or if your repository is not listed in repositories . A credential may be match if it's URL is the prefix of the repository's URL. The means that credentials may match, e.g in the above example both https://github.com/argoproj and https://github.com would match. Argo CD selects the first one that matches. Tip Order your credentials with the most specific at the top and the least specific at the bottom. A complete example. apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | # this has it's own credentials - url: https://github.com/argoproj/private-repo passwordSecret: name: private-repo-secret key: password usernameSecret: name: private-repo-secret key: username sshPrivateKeySecret: name: private-repo-secret key: sshPrivateKey - url: https://github.com/argoproj/other-private-repo - url: https://github.com/otherproj/another-private-repo repository.credentials : | # this will be used for the second repo - url: https://github.com/argoproj passwordSecret: name: other-private-repo-secret key: password usernameSecret: name: other-private-repo-secret key: username sshPrivateKeySecret: name: other-private-repo-secret key: sshPrivateKey # this will be used for the third repo - url: https://github.com passwordSecret: name: another-private-repo-secret key: password usernameSecret: name: another-private-repo-secret key: username sshPrivateKeySecret: name: another-private-repo-secret key: sshPrivateKey v1.4 or later If you want to use the same credentials for multiple repositories, you can use repository.credentials to configure credential templates. Credential templates can carry the same credentials information as repositories. apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : repositories : | - url: https://github.com/argoproj/private-repo - url: https://github.com/argoproj/other-private-repo repository.credentials : | - url: https://github.com/argoproj passwordSecret: name: my-secret key: password usernameSecret: name: my-secret key: username In the above example, every repository accessed via HTTPS whose URL is prefixed with https://github.com/argoproj would use a username stored in the key username and a password stored in the key password of the secret my-secret for connecting to Git. In order for ArgoCD to use a credential template for any given repository, the following conditions must be met: The repository must either not be configured at all, or if configured, must not contain any credential information (i.e. contain none of sshPrivateKeySecret , usernameSecret , passwordSecret ) The URL configured for a credential template (e.g. https://github.com/argoproj ) must match as prefix for the repository URL (e.g. https://github.com/argoproj/argocd-example-apps ). Note Matching credential template URL prefixes is done on a best match effort, so the longest (best) match will take precedence. The order of definition is not important, as opposed to pre v1.4 configuration. The following keys are valid to refer to credential secrets:","title":"Repository Credentials"},{"location":"operator-manual/declarative-setup/#ssh-repositories","text":"sshPrivateKeySecret refers to a secret where an SSH private key is stored for accessing the repositories","title":"SSH repositories"},{"location":"operator-manual/declarative-setup/#https-repositories","text":"usernameSecret and passwordSecret refer to secrets where username and/or password are stored for accessing the repositories tlsClientCertData and tlsClientCertKey refer to secrets where a TLS client certificate ( tlsClientCertData ) and the corresponding private key tlsClientCertKey are stored for accessing the repositories","title":"HTTPS repositories"},{"location":"operator-manual/declarative-setup/#repositories-using-self-signed-tls-certificates-or-are-signed-by-custom-ca","text":"v1.2 or later You can manage the TLS certificates used to verify the authenticity of your repository servers in a ConfigMap object named argocd-tls-certs-cm . The data section should contain a map, with the repository server's hostname part (not the complete URL) as key, and the certificate(s) in PEM format as data. So, if you connect to a repository with the URL https://server.example.com/repos/my-repo , you should use server.example.com as key. The certificate data should be either the server's certificate (in case of self-signed certificate) or the certificate of the CA that was used to sign the server's certificate. You can configure multiple certificates for each server, e.g. if you are having a certificate roll-over planned. If there are no dedicated certificates configured for a repository server, the system's default trust store is used for validating the server's repository. This should be good enough for most (if not all) public Git repository services such as GitLab, GitHub and Bitbucket as well as most privately hosted sites which use certificates from well-known CAs, including Let's Encrypt certificates. An example ConfigMap object: apiVersion : v1 kind : ConfigMap metadata : name : argocd-tls-certs-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : server.example.com : | -----BEGIN CERTIFICATE----- MIIF1zCCA7+gAwIBAgIUQdTcSHY2Sxd3Tq/v1eIEZPCNbOowDQYJKoZIhvcNAQEL BQAwezELMAkGA1UEBhMCREUxFTATBgNVBAgMDExvd2VyIFNheG9ueTEQMA4GA1UE BwwHSGFub3ZlcjEVMBMGA1UECgwMVGVzdGluZyBDb3JwMRIwEAYDVQQLDAlUZXN0 c3VpdGUxGDAWBgNVBAMMD2Jhci5leGFtcGxlLmNvbTAeFw0xOTA3MDgxMzU2MTda Fw0yMDA3MDcxMzU2MTdaMHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIDAxMb3dlciBT YXhvbnkxEDAOBgNVBAcMB0hhbm92ZXIxFTATBgNVBAoMDFRlc3RpbmcgQ29ycDES MBAGA1UECwwJVGVzdHN1aXRlMRgwFgYDVQQDDA9iYXIuZXhhbXBsZS5jb20wggIi MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCv4mHMdVUcafmaSHVpUM0zZWp5 NFXfboxA4inuOkE8kZlbGSe7wiG9WqLirdr39Ts+WSAFA6oANvbzlu3JrEQ2CHPc CNQm6diPREFwcDPFCe/eMawbwkQAPVSHPts0UoRxnpZox5pn69ghncBR+jtvx+/u P6HdwW0qqTvfJnfAF1hBJ4oIk2AXiip5kkIznsAh9W6WRy6nTVCeetmIepDOGe0G ZJIRn/OfSz7NzKylfDCat2z3EAutyeT/5oXZoWOmGg/8T7pn/pR588GoYYKRQnp+ YilqCPFX+az09EqqK/iHXnkdZ/Z2fCuU+9M/Zhrnlwlygl3RuVBI6xhm/ZsXtL2E Gxa61lNy6pyx5+hSxHEFEJshXLtioRd702VdLKxEOuYSXKeJDs1x9o6cJ75S6hko Ml1L4zCU+xEsMcvb1iQ2n7PZdacqhkFRUVVVmJ56th8aYyX7KNX6M9CD+kMpNm6J kKC1li/Iy+RI138bAvaFplajMF551kt44dSvIoJIbTr1LigudzWPqk31QaZXV/4u kD1n4p/XMc9HYU/was/CmQBFqmIZedTLTtK7clkuFN6wbwzdo1wmUNgnySQuMacO gxhHxxzRWxd24uLyk9Px+9U3BfVPaRLiOPaPoC58lyVOykjSgfpgbus7JS69fCq7 bEH4Jatp/10zkco+UQIDAQABo1MwUTAdBgNVHQ4EFgQUjXH6PHi92y4C4hQpey86 r6+x1ewwHwYDVR0jBBgwFoAUjXH6PHi92y4C4hQpey86r6+x1ewwDwYDVR0TAQH/ BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAFE4SdKsX9UsLy+Z0xuHSxhTd0jfn Iih5mtzb8CDNO5oTw4z0aMeAvpsUvjJ/XjgxnkiRACXh7K9hsG2r+ageRWGevyvx CaRXFbherV1kTnZw4Y9/pgZTYVWs9jlqFOppz5sStkfjsDQ5lmPJGDii/StENAz2 XmtiPOgfG9Upb0GAJBCuKnrU9bIcT4L20gd2F4Y14ccyjlf8UiUi192IX6yM9OjT +TuXwZgqnTOq6piVgr+FTSa24qSvaXb5z/mJDLlk23npecTouLg83TNSn3R6fYQr d/Y9eXuUJ8U7/qTh2Ulz071AO9KzPOmleYPTx4Xty4xAtWi1QE5NHW9/Ajlv5OtO OnMNWIs7ssDJBsB7VFC8hcwf79jz7kC0xmQqDfw51Xhhk04kla+v+HZcFW2AO9so 6ZdVHHQnIbJa7yQJKZ+hK49IOoBR6JgdB5kymoplLLiuqZSYTcwSBZ72FYTm3iAr jzvt1hxpxVDmXvRnkhRrIRhK4QgJL0jRmirBjDY+PYYd7bdRIjN7WNZLFsgplnS8 9w6CwG32pRlm0c8kkiQ7FXA6BYCqOsDI8f1VGQv331OpR2Ck+FTv+L7DAmg6l37W +LB9LGh4OAp68ImTjqf6ioGKG0RBSznwME+r4nXtT1S/qLR6ASWUS4ViWRhbRlNK XWyb96wrUlv+E8I= -----END CERTIFICATE----- Note The argocd-tls-certs-cm ConfigMap will be mounted as a volume at the mount path /app/config/tls in the pods of argocd-server and argocd-repo-server . It will create files for each data key in the mount path directory, so above example would leave the file /app/config/tls/server.example.com , which contains the certificate data. It might take a while for changes in the ConfigMap to be reflected in your pods, depending on your Kubernetes configuration.","title":"Repositories using self-signed TLS certificates (or are signed by custom CA)"},{"location":"operator-manual/declarative-setup/#ssh-known-host-public-keys","text":"If you are connecting repositories via SSH, ArgoCD will need to know the SSH known hosts public key of the repository servers. You can manage the SSH known hosts data in the ConfigMap named argocd-ssh-known-hosts-cm . This ConfigMap contains a single key/value pair, with ssh_known_hosts as the key and the actual public keys of the SSH servers as data. As opposed to TLS configuration, the public key(s) of each single repository server ArgoCD will connect via SSH must be configured, otherwise the connections to the repository will fail. There is no fallback. The data can be copied from any existing ssh_known_hosts file, or from the output of the ssh-keyscan utility. The basic format is <servername> <keydata> , one entry per line. An example ConfigMap object: apiVersion : v1 kind : ConfigMap metadata : name : argocd-ssh-known-hosts-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : ssh_known_hosts : | bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw== github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY= gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9 ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H Note The argocd-ssh-known-hosts-cm ConfigMap will be mounted as a volume at the mount path /app/config/ssh in the pods of argocd-server and argocd-repo-server . It will create a file ssh_known_hosts in that directory, which contains the SSH known hosts data used by ArgoCD for connecting to Git repositories via SSH. It might take a while for changes in the ConfigMap to be reflected in your pods, depending on your Kubernetes configuration.","title":"SSH known host public keys"},{"location":"operator-manual/declarative-setup/#clusters","text":"Cluster credentials are stored in secrets same as repository credentials but does not require entry in argocd-cm config map. Each secret must have label argocd.argoproj.io/secret-type: cluster . The secret data must include following fields: name - cluster name server - cluster api server url namespaces - optional comma-separated list of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty. config - JSON representation of following data structure: # Basic authentication settings username : string password : string # Bearer authentication settings bearerToken : string # IAM authentication configuration awsAuthConfig : clusterName : string roleARN : string # Configure external command to supply client credentials # See https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig execProviderConfig : command : string args : [ string ] env : { key : value } apiVersion : string installHint : string # Transport layer security configuration settings tlsClientConfig : # PEM-encoded bytes (typically read from a client certificate file). caData : string # PEM-encoded bytes (typically read from a client certificate file). certData : string # Server should be accessed without verifying the TLS certificate insecure : boolean # PEM-encoded bytes (typically read from a client certificate key file). keyData : string # ServerName is passed to the server for SNI and is used in the client to check server # certificates against. If ServerName is empty, the hostname used to contact the # server is used. serverName : string Note that if you specify a command to run under execProviderConfig , that command must be available in the ArgoCD image. See BYOI (Build Your Own Image) . Cluster secret example: apiVersion : v1 kind : Secret metadata : name : mycluster-secret labels : argocd.argoproj.io/secret-type : cluster type : Opaque stringData : name : mycluster.com server : https://mycluster.com config : | { \"bearerToken\": \"<authentication token>\", \"tlsClientConfig\": { \"insecure\": false, \"caData\": \"<base64 encoded certificate>\" } }","title":"Clusters"},{"location":"operator-manual/declarative-setup/#helm-chart-repositories","text":"Non standard Helm Chart repositories have to be registered under the repositories key in the argocd-cm ConfigMap. Each repository must have url , type and name fields. For private Helm repos you may need to configure access credentials and HTTPS settings using usernameSecret , passwordSecret , caSecret , certSecret and keySecret fields. Example: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : # v1.2 or earlier use `helm.repositories` helm.repositories : | - url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts name: istio.io # v1.3 or later use `repositories` with `type: helm` repositories : | - type: helm url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts name: istio.io - type: helm url: https://argoproj.github.io/argo-helm name: argo usernameSecret: name: my-secret key: username passwordSecret: name: my-secret key: password caSecret: name: my-secret key: ca certSecret: name: my-secret key: cert keySecret: name: my-secret key: key","title":"Helm Chart Repositories"},{"location":"operator-manual/declarative-setup/#resource-exclusioninclusion","text":"Resources can be excluded from discovery and sync so that ArgoCD is unaware of them. For example, events.k8s.io and metrics.k8s.io are always excluded. Use cases: You have temporal issues and you want to exclude problematic resources. There are many of a kind of resources that impacts ArgoCD's performance. Restrict ArgoCD's access to certain kinds of resources, e.g. secrets. See security.md#cluster-rbac . To configure this, edit the argcd-cm config map: kubectl edit configmap argocd-cm -n argocd Add resource.exclusions , e.g.: apiVersion : v1 data : resource.exclusions : | - apiGroups: - \"*\" kinds: - \"*\" clusters: - https://192.168.0.20 kind : ConfigMap The resource.exclusions node is a list of objects. Each object can have: apiGroups A list of globs to match the API group. kinds A list of kinds to match. Can be \"*\" to match all. cluster A list of globs to match the cluster. If all three match, then the resource is ignored. In addition to exclusions, you might configure the list of included resources using the resource.inclusions setting. By default, all resource group/kinds are included. The resource.inclusions setting allows customizing the list of included group/kinds: apiVersion : v1 data : resource.inclusions : | - apiGroups: - \"*\" kinds: - Deployment clusters: - https://192.168.0.20 kind : ConfigMap The resource.inclusions and resource.exclusions might be used together. The final list of resources includes group/kinds specified in resource.inclusions minus group/kinds specified in resource.exclusions setting. Notes: Quote globs in your YAML to avoid parsing errors. Invalid globs result in the whole rule being ignored. If you add a rule that matches existing resources, these will appear in the interface as OutOfSync .","title":"Resource Exclusion/Inclusion"},{"location":"operator-manual/declarative-setup/#sso-rbac","text":"SSO configuration details: SSO RBAC configuration details: RBAC","title":"SSO &amp; RBAC"},{"location":"operator-manual/declarative-setup/#manage-argo-cd-using-argo-cd","text":"Argo CD is able to manage itself since all settings are represented by Kubernetes manifests. The suggested way is to create Kustomize based application which uses base Argo CD manifests from https://github.com/argoproj/argo-cd and apply required changes on top. Example of kustomization.yaml : bases : - github.com/argoproj/argo-cd//manifests/cluster-install?ref=v1.0.1 # additional resources like ingress rules, cluster and repository secrets. resources : - clusters-secrets.yaml - repos-secrets.yaml # changes to config maps patchesStrategicMerge : - overlays/argo-cd-cm.yaml The live example of self managed Argo CD config is available at https://cd.apps.argoproj.io and with configuration stored at argoproj/argoproj-deployments . Note You will need to sign-in using your github account to get access to https://cd.apps.argoproj.io","title":"Manage Argo CD Using Argo CD"},{"location":"operator-manual/disaster_recovery/","text":"Disaster Recovery \u00b6 You can use argocd-util to import and export all Argo CD data. Make sure you have ~/.kube/config pointing to your Argo CD cluster. Figure out what version of Argo CD you're running: argocd version | grep server # ... export VERSION = v1.0.1 Export to a backup: docker run -v ~/.kube:/home/argocd/.kube --rm argoproj/argocd: $VERSION argocd-util export > backup.yaml Import from a backup: docker run -i -v ~/.kube:/home/argocd/.kube --rm argoproj/argocd: $VERSION argocd-util import - < backup.yaml Note If you are running Argo CD on a namespace different than default remember to pass the namespace parameter (-n ). 'argocd-util export' will not fail if you run it in the wrong namespace.","title":"Disaster Recovery"},{"location":"operator-manual/disaster_recovery/#disaster-recovery","text":"You can use argocd-util to import and export all Argo CD data. Make sure you have ~/.kube/config pointing to your Argo CD cluster. Figure out what version of Argo CD you're running: argocd version | grep server # ... export VERSION = v1.0.1 Export to a backup: docker run -v ~/.kube:/home/argocd/.kube --rm argoproj/argocd: $VERSION argocd-util export > backup.yaml Import from a backup: docker run -i -v ~/.kube:/home/argocd/.kube --rm argoproj/argocd: $VERSION argocd-util import - < backup.yaml Note If you are running Argo CD on a namespace different than default remember to pass the namespace parameter (-n ). 'argocd-util export' will not fail if you run it in the wrong namespace.","title":"Disaster Recovery"},{"location":"operator-manual/health/","text":"Resource Health \u00b6 Overview \u00b6 Argo CD provides built-in health assessment for several standard Kubernetes types, which is then surfaced to the overall Application health status as a whole. The following checks are made for specific types of kubernetes resources: Deployment, ReplicaSet, StatefulSet DaemonSet \u00b6 Observed generation is equal to desired generation. Number of updated replicas equals the number of desired replicas. Service \u00b6 If service type is of type LoadBalancer , the status.loadBalancer.ingress list is non-empty, with at least one value for hostname or IP . Ingress \u00b6 The status.loadBalancer.ingress list is non-empty, with at least one value for hostname or IP . PersistentVolumeClaim \u00b6 The status.phase is Bound Custom Health Checks \u00b6 Argo CD supports custom health checks written in Lua . This is useful if you: Are affected by known issues where your Ingress or StatefulSet resources are stuck in Progressing state because of bug in your resource controller. Have a custom resource for which Argo CD does not have a built-in health check. There are two ways to configure a custom health check. The next two sections describe those ways. Way 1. Define a Custom Health Check in argocd-cm ConfigMap \u00b6 Custom health checks can be defined in resource.customizations field of argocd-cm . Following example demonstrates a health check for cert-manager.io/Certificate . data : resource.customizations : | cert-manager.io/Certificate: health.lua: | hs = {} if obj.status ~= nil then if obj.status.conditions ~= nil then for i, condition in ipairs(obj.status.conditions) do if condition.type == \"Ready\" and condition.status == \"False\" then hs.status = \"Degraded\" hs.message = condition.message return hs end if condition.type == \"Ready\" and condition.status == \"True\" then hs.status = \"Healthy\" hs.message = condition.message return hs end end end end hs.status = \"Progressing\" hs.message = \"Waiting for certificate\" return hs The obj is a global variable which contains the resource. The script must return an object with status and optional message field. NOTE: as a security measure you don't have access to most of the standard Lua libraries. Way 2. Contribute a Custom Health Check \u00b6 A health check can be bundled into Argo CD. Custom health check scripts are located in the resource_customizations directory of https://github.com/argoproj/argo-cd . This must have the following directory structure: argo-cd |-- resource_customizations | |-- your.crd.group.io # CRD group | | |-- MyKind # Resource kind | | | |-- health.lua # Health check | | | |-- health_test.yaml # Test inputs and expected results | | | +-- testdata # Directory with test resource YAML definitions Each health check must have tests defined in health_test.yaml file. The health_test.yaml is a YAML file with the following structure: tests : - healthStatus : status : ExpectedStatus message : Expected message inputPath : testdata/test-resource-definition.yaml The PR#1139 is an example of Cert Manager CRDs custom health check.","title":"Resource Health"},{"location":"operator-manual/health/#resource-health","text":"","title":"Resource Health"},{"location":"operator-manual/health/#overview","text":"Argo CD provides built-in health assessment for several standard Kubernetes types, which is then surfaced to the overall Application health status as a whole. The following checks are made for specific types of kubernetes resources:","title":"Overview"},{"location":"operator-manual/health/#deployment-replicaset-statefulset-daemonset","text":"Observed generation is equal to desired generation. Number of updated replicas equals the number of desired replicas.","title":"Deployment, ReplicaSet, StatefulSet DaemonSet"},{"location":"operator-manual/health/#service","text":"If service type is of type LoadBalancer , the status.loadBalancer.ingress list is non-empty, with at least one value for hostname or IP .","title":"Service"},{"location":"operator-manual/health/#ingress","text":"The status.loadBalancer.ingress list is non-empty, with at least one value for hostname or IP .","title":"Ingress"},{"location":"operator-manual/health/#persistentvolumeclaim","text":"The status.phase is Bound","title":"PersistentVolumeClaim"},{"location":"operator-manual/health/#custom-health-checks","text":"Argo CD supports custom health checks written in Lua . This is useful if you: Are affected by known issues where your Ingress or StatefulSet resources are stuck in Progressing state because of bug in your resource controller. Have a custom resource for which Argo CD does not have a built-in health check. There are two ways to configure a custom health check. The next two sections describe those ways.","title":"Custom Health Checks"},{"location":"operator-manual/health/#way-1-define-a-custom-health-check-in-argocd-cm-configmap","text":"Custom health checks can be defined in resource.customizations field of argocd-cm . Following example demonstrates a health check for cert-manager.io/Certificate . data : resource.customizations : | cert-manager.io/Certificate: health.lua: | hs = {} if obj.status ~= nil then if obj.status.conditions ~= nil then for i, condition in ipairs(obj.status.conditions) do if condition.type == \"Ready\" and condition.status == \"False\" then hs.status = \"Degraded\" hs.message = condition.message return hs end if condition.type == \"Ready\" and condition.status == \"True\" then hs.status = \"Healthy\" hs.message = condition.message return hs end end end end hs.status = \"Progressing\" hs.message = \"Waiting for certificate\" return hs The obj is a global variable which contains the resource. The script must return an object with status and optional message field. NOTE: as a security measure you don't have access to most of the standard Lua libraries.","title":"Way 1. Define a Custom Health Check in argocd-cm ConfigMap"},{"location":"operator-manual/health/#way-2-contribute-a-custom-health-check","text":"A health check can be bundled into Argo CD. Custom health check scripts are located in the resource_customizations directory of https://github.com/argoproj/argo-cd . This must have the following directory structure: argo-cd |-- resource_customizations | |-- your.crd.group.io # CRD group | | |-- MyKind # Resource kind | | | |-- health.lua # Health check | | | |-- health_test.yaml # Test inputs and expected results | | | +-- testdata # Directory with test resource YAML definitions Each health check must have tests defined in health_test.yaml file. The health_test.yaml is a YAML file with the following structure: tests : - healthStatus : status : ExpectedStatus message : Expected message inputPath : testdata/test-resource-definition.yaml The PR#1139 is an example of Cert Manager CRDs custom health check.","title":"Way 2. Contribute a Custom Health Check"},{"location":"operator-manual/high_availability/","text":"High Availability \u00b6 Argo CD is largely stateless, all data is persisted as Kubernetes objects, which in turn is stored in Kubernetes' etcd. Redis is only used as a throw-away cache and can be lost. When lost, it will be rebuilt without loss of service. A set HA of manifests are provided for users who wish to run Argo CD in a highly available manner. This runs more containers, and run Redis in HA mode. Manifests \u29c9 Note The HA installation will require at least three different nodes due to pod anti-affinity roles in the specs. Scaling Up \u00b6 argocd-repo-server \u00b6 settings: The argocd-repo-server is responsible for cloning Git repository, keeping it up to date and generating manifests using the appropriate tool. argocd-repo-server fork/exec config management tool to generate manifests. The fork can fail due to lack of memory and limit on the number of OS threads. The --parallelismlimit flag controls how many manifests generations are running concurrently and allows avoiding OOM kills. the argocd-repo-server ensures that repository is in the clean state during the manifest generation using config management tools such as Kustomize, Helm or custom plugin. As a result Git repositories with multiple applications might be affect repository server performance. Read Monorepo Scaling Considerations for more information. argocd-repo-server clones repository into /tmp ( of path specified in TMPDIR env variable ). Pod might run out of disk space if have too many repository or repositories has a lot of files. To avoid this problem mount persistent volume. argocd-repo-server git ls-remote to resolve ambiguous revision such as HEAD , branch or tag name. This operation is happening pretty frequently and might fail. To avoid failed syncs use ARGOCD_GIT_ATTEMPTS_COUNT environment variable to retry failed requests. argocd-repo-server Every 3m (by default) Argo CD checks for changes to the app manifests. Argo CD assumes by default that manifests only change when the repo changes, so it caches generated manifests (for 24h by default). With Kustomize remote bases, or Helm patch releases, the manifests can change even though the repo has not changed. By reducing the cache time, you can get the changes without waiting for 24h. Use --repo-cache-expiration duration , and we'd suggest in low volume environments you try '1h'. Bear in mind this will negate the benefit of caching if set too low. argocd-repo-server fork exec config management tools such as helm or kustomize and enforces 90 seconds timeout. The timeout can be increased using ARGOCD_EXEC_TIMEOUT env variable. metrics: argocd_git_request_total - Number of git requests. The metric provides two tags: repo - Git repo URL; request_type - ls-remote or fetch . ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM (v1.8+) - environment variable that enables collecting RPC performance metrics. Enable it if you need to troubleshoot performance issue. Note: metric is expensive to both query and store! argocd-application-controller \u00b6 settings: The argocd-application-controller uses argocd-repo-server to get generated manifests and Kubernetes API server to get actual cluster state. each controller replica uses two separate queues to process application reconciliation (milliseconds) and app syncing (seconds). Number of queue processors for each queue is controlled by --status-processors (20 by default) and --operation-processors (10 by default) flags. Increase number of processors if your Argo CD instance manages too many applications. For 1000 application we use 50 for --status-processors and 25 for --operation-processors The manifest generation typically takes the most time during reconciliation. The duration of manifest generation is limited to make sure controller refresh queue does not overflow. The app reconciliation fails with Context deadline exceeded error if manifest generating taking too much time. As workaround increase value of --repo-server-timeout-seconds and consider scaling up argocd-repo-server deployment. The controller uses kubectl fork/exec to push changes into the cluster and to convert resource from preferred version into user specified version (e.g. Deployment apps/v1 into extensions/v1beta1 ). Same as config management tool kubectl fork/exec might cause pod OOM kill. Use --kubectl-parallelism-limit flag to limit number of allowed concurrent kubectl fork/execs. The controller uses Kubernetes watch APIs to maintain lightweight Kubernetes cluster cache. This allows to avoid querying Kubernetes during app reconciliation and significantly improve performance. For performance reasons controller monitors and caches only preferred the version of a resource. During reconciliation, the controller might have to convert cached resource from preferred version into a version of the resource stored in Git. If kubectl convert fails because conversion is not supported than controller fallback to Kubernetes API query which slows down reconciliation. In this case advice user-preferred resource version in Git. The controller polls Git every 3m by default. You can increase this duration using --app-resync seconds to reduce polling. If the controller is managing too many clusters and uses too much memory then you can shard clusters across multiple controller replicas. To enable sharding increase the number of replicas in argocd-application-controller StatefulSet and repeat number of replicas in ARGOCD_CONTROLLER_REPLICAS environment variable. The strategic merge patch below demonstrates changes required to configure two controller replicas. apiVersion : apps/v1 kind : StatefulSet metadata : name : argocd-application-controller spec : replicas : 2 template : spec : containers : - name : argocd-application-controller env : - name : ARGOCD_CONTROLLER_REPLICAS value : \"2\" ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM (v1.8+)- environment variable that enables collecting RPC performance metrics. Enable it if you need to troubleshoot performance issue. Note: metric is expensive to both query and store! metrics argocd_app_reconcile - reports application reconciliation duration. Can be used to build reconciliation duration heat map to get high-level reconciliation performance picture. argocd_app_k8s_request_total - number of k8s requests per application. The number of fallback Kubernetes API queries - useful to identify which application has a resource with non-preferred version and causes performance issues. argocd-server \u00b6 The argocd-server is stateless and probably least likely to cause issues. You might consider increasing number of replicas to 3 or more to ensure there is no downtime during upgrades. settings: The ARGOCD_GRPC_MAX_SIZE_MB environment variable allows specifying the max size of the server response message in megabytes. The default value is 200. You might need to increase for an Argo CD instance that manages 3000+ applications. argocd-dex-server, argocd-redis \u00b6 The argocd-dex-server uses an in-memory database, and two or more instances would have inconsistent data. argocd-redis is pre-configured with the understanding of only three total redis servers/sentinels. Monorepo Scaling Considerations \u00b6 Argo CD repo server maintains one repository clone locally and use it for application manifest generation. If the manifest generation requires to change a file in the local repository clone then only one concurrent manifest generation per server instance is allowed. This limitation might significantly slowdown Argo CD if you have a mono repository with multiple applications (50+). Enable Concurrent Processing \u00b6 Argo CD determines if manifest generation might change local files in the local repository clone based on config management tool and application settings. If the manifest generation has no side effects then requests are processed in parallel without the performance penalty. Following are known cases that might cause slowness and workarounds: Multiple Helm based applications pointing to the same directory in one Git repository: ensure that your Helm chart don't have conditional dependencies and create .argocd-allow-concurrency file in chart directory. Multiple Custom plugin based applications: avoid creating temporal files during manifest generation and and create .argocd-allow-concurrency file in app directory. Multiple Kustomize or Ksonnet applications in same repository with parameter overrides : sorry, no workaround for now. Webhook and Manifest Paths Annotation \u00b6 Argo CD aggressively caches generated manifests and uses repository commit SHA as a cache key. A new commit to the Git repository invalidates cache for all applications configured in the repository that again negatively affect mono repositories with multiple applications. You might use webhooks \u29c9 and argocd.argoproj.io/manifest-generate-paths Application CRD annotation to solve this problem and improve performance. The argocd.argoproj.io/manifest-generate-paths contains a semicolon-separated list of paths within the Git repository that are used during manifest generation. The webhook compares paths specified in the annotation with the changed files specified in the webhook payload. If non of the changed files are located in the paths then webhook don't trigger application reconciliation and re-uses previously generated manifests cache for a new commit. Installations that use a different repo for each app are not subject to this behavior and will likely get no benefit from using these annotations. Note Installations with a large number of apps should also set the --app-resync flag in the argocd-application-controller process to a larger value to reduce automatic refreshes based on git polling. The exact value is a trade-off between reduced work and app sync in case of a missed webhook event. For most cases 1800 (30m) or 3600 (1h) is a good trade-off. Note Application manifest paths annotation support depends on the git provider used for the Application. It is currently only supported for GitHub, GitLab, and Gogs based repos Relative path The annotation might contains relative path. In this case the path is considered relative to the path specified in the application source: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook namespace : argocd annotations : # resolves to the 'guestbook' directory argocd.argoproj.io/manifest-generate-paths : . spec : source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : guestbook # ... Absolute path The annotation value might be an absolute path started from '/'. In this case path is considered as an absolute path within the Git repository: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook annotations : argocd.argoproj.io/manifest-generate-paths : /guestbook spec : source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : guestbook # ... Multiple paths It is possible to put multiple paths into the annotation. Paths must be separated with a semicolon ( ; ): apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook annotations : # resolves to 'my-application' and 'shared' argocd.argoproj.io/manifest-generate-paths : .;../shared spec : source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : my-application # ...","title":"High Availability"},{"location":"operator-manual/high_availability/#high-availability","text":"Argo CD is largely stateless, all data is persisted as Kubernetes objects, which in turn is stored in Kubernetes' etcd. Redis is only used as a throw-away cache and can be lost. When lost, it will be rebuilt without loss of service. A set HA of manifests are provided for users who wish to run Argo CD in a highly available manner. This runs more containers, and run Redis in HA mode. Manifests \u29c9 Note The HA installation will require at least three different nodes due to pod anti-affinity roles in the specs.","title":"High Availability"},{"location":"operator-manual/high_availability/#scaling-up","text":"","title":"Scaling Up"},{"location":"operator-manual/high_availability/#argocd-repo-server","text":"settings: The argocd-repo-server is responsible for cloning Git repository, keeping it up to date and generating manifests using the appropriate tool. argocd-repo-server fork/exec config management tool to generate manifests. The fork can fail due to lack of memory and limit on the number of OS threads. The --parallelismlimit flag controls how many manifests generations are running concurrently and allows avoiding OOM kills. the argocd-repo-server ensures that repository is in the clean state during the manifest generation using config management tools such as Kustomize, Helm or custom plugin. As a result Git repositories with multiple applications might be affect repository server performance. Read Monorepo Scaling Considerations for more information. argocd-repo-server clones repository into /tmp ( of path specified in TMPDIR env variable ). Pod might run out of disk space if have too many repository or repositories has a lot of files. To avoid this problem mount persistent volume. argocd-repo-server git ls-remote to resolve ambiguous revision such as HEAD , branch or tag name. This operation is happening pretty frequently and might fail. To avoid failed syncs use ARGOCD_GIT_ATTEMPTS_COUNT environment variable to retry failed requests. argocd-repo-server Every 3m (by default) Argo CD checks for changes to the app manifests. Argo CD assumes by default that manifests only change when the repo changes, so it caches generated manifests (for 24h by default). With Kustomize remote bases, or Helm patch releases, the manifests can change even though the repo has not changed. By reducing the cache time, you can get the changes without waiting for 24h. Use --repo-cache-expiration duration , and we'd suggest in low volume environments you try '1h'. Bear in mind this will negate the benefit of caching if set too low. argocd-repo-server fork exec config management tools such as helm or kustomize and enforces 90 seconds timeout. The timeout can be increased using ARGOCD_EXEC_TIMEOUT env variable. metrics: argocd_git_request_total - Number of git requests. The metric provides two tags: repo - Git repo URL; request_type - ls-remote or fetch . ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM (v1.8+) - environment variable that enables collecting RPC performance metrics. Enable it if you need to troubleshoot performance issue. Note: metric is expensive to both query and store!","title":"argocd-repo-server"},{"location":"operator-manual/high_availability/#argocd-application-controller","text":"settings: The argocd-application-controller uses argocd-repo-server to get generated manifests and Kubernetes API server to get actual cluster state. each controller replica uses two separate queues to process application reconciliation (milliseconds) and app syncing (seconds). Number of queue processors for each queue is controlled by --status-processors (20 by default) and --operation-processors (10 by default) flags. Increase number of processors if your Argo CD instance manages too many applications. For 1000 application we use 50 for --status-processors and 25 for --operation-processors The manifest generation typically takes the most time during reconciliation. The duration of manifest generation is limited to make sure controller refresh queue does not overflow. The app reconciliation fails with Context deadline exceeded error if manifest generating taking too much time. As workaround increase value of --repo-server-timeout-seconds and consider scaling up argocd-repo-server deployment. The controller uses kubectl fork/exec to push changes into the cluster and to convert resource from preferred version into user specified version (e.g. Deployment apps/v1 into extensions/v1beta1 ). Same as config management tool kubectl fork/exec might cause pod OOM kill. Use --kubectl-parallelism-limit flag to limit number of allowed concurrent kubectl fork/execs. The controller uses Kubernetes watch APIs to maintain lightweight Kubernetes cluster cache. This allows to avoid querying Kubernetes during app reconciliation and significantly improve performance. For performance reasons controller monitors and caches only preferred the version of a resource. During reconciliation, the controller might have to convert cached resource from preferred version into a version of the resource stored in Git. If kubectl convert fails because conversion is not supported than controller fallback to Kubernetes API query which slows down reconciliation. In this case advice user-preferred resource version in Git. The controller polls Git every 3m by default. You can increase this duration using --app-resync seconds to reduce polling. If the controller is managing too many clusters and uses too much memory then you can shard clusters across multiple controller replicas. To enable sharding increase the number of replicas in argocd-application-controller StatefulSet and repeat number of replicas in ARGOCD_CONTROLLER_REPLICAS environment variable. The strategic merge patch below demonstrates changes required to configure two controller replicas. apiVersion : apps/v1 kind : StatefulSet metadata : name : argocd-application-controller spec : replicas : 2 template : spec : containers : - name : argocd-application-controller env : - name : ARGOCD_CONTROLLER_REPLICAS value : \"2\" ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM (v1.8+)- environment variable that enables collecting RPC performance metrics. Enable it if you need to troubleshoot performance issue. Note: metric is expensive to both query and store! metrics argocd_app_reconcile - reports application reconciliation duration. Can be used to build reconciliation duration heat map to get high-level reconciliation performance picture. argocd_app_k8s_request_total - number of k8s requests per application. The number of fallback Kubernetes API queries - useful to identify which application has a resource with non-preferred version and causes performance issues.","title":"argocd-application-controller"},{"location":"operator-manual/high_availability/#argocd-server","text":"The argocd-server is stateless and probably least likely to cause issues. You might consider increasing number of replicas to 3 or more to ensure there is no downtime during upgrades. settings: The ARGOCD_GRPC_MAX_SIZE_MB environment variable allows specifying the max size of the server response message in megabytes. The default value is 200. You might need to increase for an Argo CD instance that manages 3000+ applications.","title":"argocd-server"},{"location":"operator-manual/high_availability/#argocd-dex-server-argocd-redis","text":"The argocd-dex-server uses an in-memory database, and two or more instances would have inconsistent data. argocd-redis is pre-configured with the understanding of only three total redis servers/sentinels.","title":"argocd-dex-server, argocd-redis"},{"location":"operator-manual/high_availability/#monorepo-scaling-considerations","text":"Argo CD repo server maintains one repository clone locally and use it for application manifest generation. If the manifest generation requires to change a file in the local repository clone then only one concurrent manifest generation per server instance is allowed. This limitation might significantly slowdown Argo CD if you have a mono repository with multiple applications (50+).","title":"Monorepo Scaling Considerations"},{"location":"operator-manual/high_availability/#enable-concurrent-processing","text":"Argo CD determines if manifest generation might change local files in the local repository clone based on config management tool and application settings. If the manifest generation has no side effects then requests are processed in parallel without the performance penalty. Following are known cases that might cause slowness and workarounds: Multiple Helm based applications pointing to the same directory in one Git repository: ensure that your Helm chart don't have conditional dependencies and create .argocd-allow-concurrency file in chart directory. Multiple Custom plugin based applications: avoid creating temporal files during manifest generation and and create .argocd-allow-concurrency file in app directory. Multiple Kustomize or Ksonnet applications in same repository with parameter overrides : sorry, no workaround for now.","title":"Enable Concurrent Processing"},{"location":"operator-manual/high_availability/#webhook-and-manifest-paths-annotation","text":"Argo CD aggressively caches generated manifests and uses repository commit SHA as a cache key. A new commit to the Git repository invalidates cache for all applications configured in the repository that again negatively affect mono repositories with multiple applications. You might use webhooks \u29c9 and argocd.argoproj.io/manifest-generate-paths Application CRD annotation to solve this problem and improve performance. The argocd.argoproj.io/manifest-generate-paths contains a semicolon-separated list of paths within the Git repository that are used during manifest generation. The webhook compares paths specified in the annotation with the changed files specified in the webhook payload. If non of the changed files are located in the paths then webhook don't trigger application reconciliation and re-uses previously generated manifests cache for a new commit. Installations that use a different repo for each app are not subject to this behavior and will likely get no benefit from using these annotations. Note Installations with a large number of apps should also set the --app-resync flag in the argocd-application-controller process to a larger value to reduce automatic refreshes based on git polling. The exact value is a trade-off between reduced work and app sync in case of a missed webhook event. For most cases 1800 (30m) or 3600 (1h) is a good trade-off. Note Application manifest paths annotation support depends on the git provider used for the Application. It is currently only supported for GitHub, GitLab, and Gogs based repos Relative path The annotation might contains relative path. In this case the path is considered relative to the path specified in the application source: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook namespace : argocd annotations : # resolves to the 'guestbook' directory argocd.argoproj.io/manifest-generate-paths : . spec : source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : guestbook # ... Absolute path The annotation value might be an absolute path started from '/'. In this case path is considered as an absolute path within the Git repository: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook annotations : argocd.argoproj.io/manifest-generate-paths : /guestbook spec : source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : guestbook # ... Multiple paths It is possible to put multiple paths into the annotation. Paths must be separated with a semicolon ( ; ): apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook annotations : # resolves to 'my-application' and 'shared' argocd.argoproj.io/manifest-generate-paths : .;../shared spec : source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : my-application # ...","title":"Webhook and Manifest Paths Annotation"},{"location":"operator-manual/ingress/","text":"Ingress Configuration \u00b6 Argo CD runs both a gRPC server (used by the CLI), as well as a HTTP/HTTPS server (used by the UI). Both protocols are exposed by the argocd-server service object on the following ports: 443 - gRPC/HTTPS 80 - HTTP (redirects to HTTPS) There are several ways how Ingress can be configured. Ambassador \u00b6 The Ambassador Edge Stack can be used as a Kubernetes ingress controller with automatic TLS termination and routing capabilities for both the CLI and the UI. The API server should be run with TLS disabled. Edit the argocd-server deployment to add the --insecure flag to the argocd-server command. Given the argocd CLI includes the port number in the request host header, 2 Mappings are required. Option 1: Mapping CRD for Host-based Routing \u00b6 apiVersion : getambassador.io/v2 kind : Mapping metadata : name : argocd-server-ui namespace : argocd spec : host : argocd.example.com prefix : / service : argocd-server:443 --- apiVersion : getambassador.io/v2 kind : Mapping metadata : name : argocd-server-cli namespace : argocd spec : host : argocd.example.com:443 prefix : / service : argocd-server:443 Login with the argocd CLI using the extra --grpc-web-root-path flag for gRPC-web. argocd login <host>:<port> --grpc-web-root-path / Option 2: Mapping CRD for Path-based Routing \u00b6 The API server must be configured to be available under a non-root path (e.g. /argo-cd ). Edit the argocd-server deployment to add the --rootpath=/argo-cd flag to the argocd-server command. apiVersion : getambassador.io/v2 kind : Mapping metadata : name : argocd-server namespace : argocd spec : prefix : /argo-cd rewrite : /argo-cd service : argocd-server:443 Login with the argocd CLI using the extra --grpc-web-root-path flag for non-root paths. argocd login <host>:<port> --grpc-web-root-path /argo-cd Contour \u00b6 The Contour ingress controller can terminate TLS ingress traffic at the edge. The Argo CD API server should be run with TLS disabled. Edit the argocd-server Deployment to add the --insecure flag to the argocd-server container command. It is also possible to provide an internal-only ingress path and an external-only ingress path by deploying two instances of Contour: one behind a private-subnet LoadBalancer service and one behind a public-subnet LoadBalancer service. The private Contour deployment will pick up Ingresses annotated with kubernetes.io/ingress.class: contour-external and the public Contour deployment will pick up Ingresses annotated with kubernetes.io/ingress.class: contour-external . This provides the opportunity to deploy the Argo CD UI privately but still allow for SSO callbacks to succeed. Private Argo CD UI with Multiple Ingress Objects and BYO Certificate \u00b6 Since Contour Ingress supports only a single protocol per Ingress object, define three Ingress objects. One for private HTTP/HTTPS, one for private gRPC, and one for public HTTPS SSO callbacks. Internal HTTP/HTTPS Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-http annotations : kubernetes.io/ingress.class : contour-internal ingress.kubernetes.io/force-ssl-redirect : \"true\" spec : rules : - host : internal.path.to.argocd.io http : paths : - backend : serviceName : argocd-server servicePort : http tls : - hosts : - internal.path.to.argocd.io secretName : your-certificate-name Internal gRPC Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-grpc annotations : kubernetes.io/ingress.class : contour-internal spec : rules : - host : grpc-internal.path.to.argocd.io http : paths : - backend : serviceName : argocd-server servicePort : https tls : - hosts : - grpc-internal.path.to.argocd.io secretName : your-certificate-name External HTTPS SSO Callback Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-external-callback-http annotations : kubernetes.io/ingress.class : contour-external ingress.kubernetes.io/force-ssl-redirect : \"true\" spec : rules : - host : external.path.to.argocd.io http : paths : - path : /api/dex/callback backend : serviceName : argocd-server servicePort : http tls : - hosts : - external.path.to.argocd.io secretName : your-certificate-name The argocd-server Service needs to be annotated with projectcontour.io/upstream-protocol.h2c: \"https,443\" to wire up the gRPC protocol proxying. The API server should then be run with TLS disabled. Edit the argocd-server deployment to add the --insecure flag to the argocd-server command: spec : template : spec : containers : - name : argocd-server command : - /argocd-server - --staticassets - /shared/app - --repo-server - argocd-repo-server:8081 - --insecure kubernetes/ingress-nginx \u00b6 Option 1: SSL-Passthrough \u00b6 Argo CD serves multiple protocols (gRPC/HTTPS) on the same port (443), this provides a challenge when attempting to define a single nginx ingress object and rule for the argocd-service, since the nginx.ingress.kubernetes.io/backend-protocol annotation accepts only a single value for the backend protocol (e.g. HTTP, HTTPS, GRPC, GRPCS). In order to expose the Argo CD API server with a single ingress rule and hostname, the nginx.ingress.kubernetes.io/ssl-passthrough annotation must be used to passthrough TLS connections and terminate TLS at the Argo CD API server. apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-ingress namespace : argocd annotations : kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/force-ssl-redirect : \"true\" nginx.ingress.kubernetes.io/ssl-passthrough : \"true\" spec : rules : - host : argocd.example.com http : paths : - backend : serviceName : argocd-server servicePort : https The above rule terminates TLS at the Argo CD API server, which detects the protocol being used, and responds appropriately. Note that the nginx.ingress.kubernetes.io/ssl-passthrough annotation requires that the --enable-ssl-passthrough flag be added to the command line arguments to nginx-ingress-controller . SSL-Passthrough with cert-manager and Let's Encrypt \u00b6 apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-ingress namespace : argocd annotations : cert-manager.io/cluster-issuer : letsencrypt-prod kubernetes.io/ingress.class : nginx kubernetes.io/tls-acme : \"true\" nginx.ingress.kubernetes.io/ssl-passthrough : \"true\" # If you encounter a redirect loop or are getting a 307 response code # then you need to force the nginx ingress to connect to the backend using HTTPS. # # nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\" spec : rules : - host : argocd.example.com http : paths : - backend : serviceName : argocd-server servicePort : https path : / tls : - hosts : - argocd.example.com secretName : argocd-secret # do not change, this is provided by Argo CD Option 2: Multiple Ingress Objects And Hosts \u00b6 Since ingress-nginx Ingress supports only a single protocol per Ingress object, an alternative way would be to define two Ingress objects. One for HTTP/HTTPS, and the other for gRPC: HTTP/HTTPS Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-http-ingress namespace : argocd annotations : kubernetes.io/ingress.class : \"nginx\" nginx.ingress.kubernetes.io/force-ssl-redirect : \"true\" nginx.ingress.kubernetes.io/backend-protocol : \"HTTP\" spec : rules : - http : paths : - backend : serviceName : argocd-server servicePort : http host : argocd.example.com tls : - hosts : - argocd.example.com secretName : argocd-secret # do not change, this is provided by Argo CD gRPC Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-grpc-ingress namespace : argocd annotations : kubernetes.io/ingress.class : \"nginx\" nginx.ingress.kubernetes.io/backend-protocol : \"GRPC\" spec : rules : - http : paths : - backend : serviceName : argocd-server servicePort : https host : grpc.argocd.example.com tls : - hosts : - grpc.argocd.example.com secretName : argocd-secret # do not change, this is provided by Argo CD The API server should then be run with TLS disabled. Edit the argocd-server deployment to add the --insecure flag to the argocd-server command: spec : template : spec : containers : - name : argocd-server command : - /argocd-server - --staticassets - /shared/app - --repo-server - argocd-repo-server:8081 - --insecure The obvious disadvantage to this approach is that this technique requires two separate hostnames for the API server -- one for gRPC and the other for HTTP/HTTPS. However it allows TLS termination to happen at the ingress controller. Traefik (v2.2) \u00b6 Traefik can be used as an edge router and provide TLS termination within the same deployment. It currently has an advantage over NGINX in that it can terminate both TCP and HTTP connections on the same port meaning you do not require multiple hosts or paths. The API server should be run with TLS disabled. Edit the argocd-server deployment to add the --insecure flag to the argocd-server command. IngressRoute CRD \u00b6 apiVersion : traefik.containo.us/v1alpha1 kind : IngressRoute metadata : name : argocd-server namespace : argocd spec : entryPoints : - websecure routes : - kind : Rule match : Host(`argocd.example.com`) priority : 10 services : - name : argocd-server port : 80 - kind : Rule match : Host(`argocd.example.com`) && Headers(`Content-Type`, `application/grpc`) priority : 11 services : - name : argocd-server port : 80 scheme : h2c tls : certResolver : default options : {} AWS Application Load Balancers (ALBs) And Classic ELB (HTTP Mode) \u00b6 AWS ALBs can be used as an L7 Load Balancer for both UI and gRPC traffic, whereas Classic ELBs and NLBs can be used as L4 Load Balancers for both. When using an ALB, you'll want to create a second service for argocd-server. This is necessary because we need to tell the ALB to send the GRPC traffic to a different target group then the UI traffic, since the backend protocol is HTTP2 instead of HTTP1. apiVersion : v1 kind : Service metadata : annotations : alb.ingress.kubernetes.io/backend-protocol-version : HTTP2 #This tells AWS to send traffic from the ALB using HTTP2. Can use GRPC as well if you want to leverage GRPC specific features labels : app : argogrpc name : argogrpc namespace : argocd spec : ports : - name : \"443\" port : 443 protocol : TCP targetPort : 8080 selector : app.kubernetes.io/name : argocd-server sessionAffinity : None type : ClusterIP Once we create this service, we can configure the Ingress to conditionally route all application/grpc traffic to the new HTTP2 backend, using the alb.ingress.kubernetes.io/conditions annotation, as seen below. Note: The value after the . in the condition annotation must be the same name as the service that you want traffic to route to - and will be applied on any path with a matching serviceName. apiVersion : networking.k8s.io/v1 # Use extensions/v1beta1 for Kubernetes 1.14 and older kind : Ingress metadata : annotations : alb.ingress.kubernetes.io/backend-protocol : HTTPS # Use this annotation (which must match a service name) to route traffic to HTTP2 backends. alb.ingress.kubernetes.io/conditions.argogrpc : | [{\"field\":\"http-header\",\"httpHeaderConfig\":{\"httpHeaderName\": \"Content-Type\", \"values\":[\"application/grpc\"]}}] alb.ingress.kubernetes.io/listen-ports : '[{\"HTTPS\":443}]' name : argocd namespace : argocd spec : rules : - host : argocd.argoproj.io http : paths : - backend : serviceName : argogrpc servicePort : 443 pathType : ImplementationSpecific - backend : serviceName : argocd-server servicePort : 443 pathType : ImplementationSpecific tls : - hosts : - argocd.argoproj.io Authenticating through multiple layers of authenticating reverse proxies \u00b6 ArgoCD endpoints may be protected by one or more reverse proxies layers, in that case, you can provide additional headers through the argocd CLI --header parameter to authenticate through those layers. $ argocd login <host>:<port> --header 'x-token1:foo' --header 'x-token2:bar' # can be repeated multiple times $ argocd login <host>:<port> --header 'x-token1:foo,x-token2:bar' # headers can also be comma separated ArgoCD Server and UI Root Path (v1.5.3) \u00b6 ArgoCD server and UI can be configured to be available under a non-root path (e.g. /argo-cd ). To do this, add the --rootpath flag into the argocd-server deployment command: spec : template : spec : name : argocd-server containers : - command : - /argocd-server - --staticassets - /shared/app - --repo-server - argocd-repo-server:8081 - --rootpath - /argo-cd NOTE: The flag --rootpath changes both API Server and UI base URL. Example nginx.conf: worker_processes 1 ; events { worker_connections 1024 ; } http { sendfile on ; server { listen 443 ; location /argo-cd/ { proxy_pass https : // localhost : 8080 / argo-cd / ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Host $server_name ; # buffering should be disabled for api/v1/stream/applications to support chunked response proxy_buffering off ; } } } Flag --grpc-web-root-path is used to provide a non-root path (e.g. /argo-cd) $ argocd login <host>:<port> --grpc-web-root-path /argo-cd UI Base Path \u00b6 If the Argo CD UI is available under a non-root path (e.g. /argo-cd instead of / ) then the UI path should be configured in the API server. To configure the UI path add the --basehref flag into the argocd-server deployment command: spec : template : spec : name : argocd-server containers : - command : - /argocd-server - --staticassets - /shared/app - --repo-server - argocd-repo-server:8081 - --basehref - /argo-cd NOTE: The flag --basehref only changes the UI base URL. The API server will keep using the / path so you need to add a URL rewrite rule to the proxy config. Example nginx.conf with URL rewrite: worker_processes 1 ; events { worker_connections 1024 ; } http { sendfile on ; server { listen 443 ; location /argo-cd { rewrite /argo-cd/(.*) /$1 break ; proxy_pass https : // localhost : 8080 ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Host $server_name ; # buffering should be disabled for api/v1/stream/applications to support chunked response proxy_buffering off ; } } }","title":"Ingress Configuration"},{"location":"operator-manual/ingress/#ingress-configuration","text":"Argo CD runs both a gRPC server (used by the CLI), as well as a HTTP/HTTPS server (used by the UI). Both protocols are exposed by the argocd-server service object on the following ports: 443 - gRPC/HTTPS 80 - HTTP (redirects to HTTPS) There are several ways how Ingress can be configured.","title":"Ingress Configuration"},{"location":"operator-manual/ingress/#ambassador","text":"The Ambassador Edge Stack can be used as a Kubernetes ingress controller with automatic TLS termination and routing capabilities for both the CLI and the UI. The API server should be run with TLS disabled. Edit the argocd-server deployment to add the --insecure flag to the argocd-server command. Given the argocd CLI includes the port number in the request host header, 2 Mappings are required.","title":"Ambassador"},{"location":"operator-manual/ingress/#option-1-mapping-crd-for-host-based-routing","text":"apiVersion : getambassador.io/v2 kind : Mapping metadata : name : argocd-server-ui namespace : argocd spec : host : argocd.example.com prefix : / service : argocd-server:443 --- apiVersion : getambassador.io/v2 kind : Mapping metadata : name : argocd-server-cli namespace : argocd spec : host : argocd.example.com:443 prefix : / service : argocd-server:443 Login with the argocd CLI using the extra --grpc-web-root-path flag for gRPC-web. argocd login <host>:<port> --grpc-web-root-path /","title":"Option 1: Mapping CRD for Host-based Routing"},{"location":"operator-manual/ingress/#option-2-mapping-crd-for-path-based-routing","text":"The API server must be configured to be available under a non-root path (e.g. /argo-cd ). Edit the argocd-server deployment to add the --rootpath=/argo-cd flag to the argocd-server command. apiVersion : getambassador.io/v2 kind : Mapping metadata : name : argocd-server namespace : argocd spec : prefix : /argo-cd rewrite : /argo-cd service : argocd-server:443 Login with the argocd CLI using the extra --grpc-web-root-path flag for non-root paths. argocd login <host>:<port> --grpc-web-root-path /argo-cd","title":"Option 2: Mapping CRD for Path-based Routing"},{"location":"operator-manual/ingress/#contour","text":"The Contour ingress controller can terminate TLS ingress traffic at the edge. The Argo CD API server should be run with TLS disabled. Edit the argocd-server Deployment to add the --insecure flag to the argocd-server container command. It is also possible to provide an internal-only ingress path and an external-only ingress path by deploying two instances of Contour: one behind a private-subnet LoadBalancer service and one behind a public-subnet LoadBalancer service. The private Contour deployment will pick up Ingresses annotated with kubernetes.io/ingress.class: contour-external and the public Contour deployment will pick up Ingresses annotated with kubernetes.io/ingress.class: contour-external . This provides the opportunity to deploy the Argo CD UI privately but still allow for SSO callbacks to succeed.","title":"Contour"},{"location":"operator-manual/ingress/#private-argo-cd-ui-with-multiple-ingress-objects-and-byo-certificate","text":"Since Contour Ingress supports only a single protocol per Ingress object, define three Ingress objects. One for private HTTP/HTTPS, one for private gRPC, and one for public HTTPS SSO callbacks. Internal HTTP/HTTPS Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-http annotations : kubernetes.io/ingress.class : contour-internal ingress.kubernetes.io/force-ssl-redirect : \"true\" spec : rules : - host : internal.path.to.argocd.io http : paths : - backend : serviceName : argocd-server servicePort : http tls : - hosts : - internal.path.to.argocd.io secretName : your-certificate-name Internal gRPC Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-grpc annotations : kubernetes.io/ingress.class : contour-internal spec : rules : - host : grpc-internal.path.to.argocd.io http : paths : - backend : serviceName : argocd-server servicePort : https tls : - hosts : - grpc-internal.path.to.argocd.io secretName : your-certificate-name External HTTPS SSO Callback Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-external-callback-http annotations : kubernetes.io/ingress.class : contour-external ingress.kubernetes.io/force-ssl-redirect : \"true\" spec : rules : - host : external.path.to.argocd.io http : paths : - path : /api/dex/callback backend : serviceName : argocd-server servicePort : http tls : - hosts : - external.path.to.argocd.io secretName : your-certificate-name The argocd-server Service needs to be annotated with projectcontour.io/upstream-protocol.h2c: \"https,443\" to wire up the gRPC protocol proxying. The API server should then be run with TLS disabled. Edit the argocd-server deployment to add the --insecure flag to the argocd-server command: spec : template : spec : containers : - name : argocd-server command : - /argocd-server - --staticassets - /shared/app - --repo-server - argocd-repo-server:8081 - --insecure","title":"Private Argo CD UI with  Multiple Ingress Objects and BYO Certificate"},{"location":"operator-manual/ingress/#kubernetesingress-nginx","text":"","title":"kubernetes/ingress-nginx"},{"location":"operator-manual/ingress/#option-1-ssl-passthrough","text":"Argo CD serves multiple protocols (gRPC/HTTPS) on the same port (443), this provides a challenge when attempting to define a single nginx ingress object and rule for the argocd-service, since the nginx.ingress.kubernetes.io/backend-protocol annotation accepts only a single value for the backend protocol (e.g. HTTP, HTTPS, GRPC, GRPCS). In order to expose the Argo CD API server with a single ingress rule and hostname, the nginx.ingress.kubernetes.io/ssl-passthrough annotation must be used to passthrough TLS connections and terminate TLS at the Argo CD API server. apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-ingress namespace : argocd annotations : kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/force-ssl-redirect : \"true\" nginx.ingress.kubernetes.io/ssl-passthrough : \"true\" spec : rules : - host : argocd.example.com http : paths : - backend : serviceName : argocd-server servicePort : https The above rule terminates TLS at the Argo CD API server, which detects the protocol being used, and responds appropriately. Note that the nginx.ingress.kubernetes.io/ssl-passthrough annotation requires that the --enable-ssl-passthrough flag be added to the command line arguments to nginx-ingress-controller .","title":"Option 1: SSL-Passthrough"},{"location":"operator-manual/ingress/#ssl-passthrough-with-cert-manager-and-lets-encrypt","text":"apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-ingress namespace : argocd annotations : cert-manager.io/cluster-issuer : letsencrypt-prod kubernetes.io/ingress.class : nginx kubernetes.io/tls-acme : \"true\" nginx.ingress.kubernetes.io/ssl-passthrough : \"true\" # If you encounter a redirect loop or are getting a 307 response code # then you need to force the nginx ingress to connect to the backend using HTTPS. # # nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\" spec : rules : - host : argocd.example.com http : paths : - backend : serviceName : argocd-server servicePort : https path : / tls : - hosts : - argocd.example.com secretName : argocd-secret # do not change, this is provided by Argo CD","title":"SSL-Passthrough with cert-manager and Let's Encrypt"},{"location":"operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts","text":"Since ingress-nginx Ingress supports only a single protocol per Ingress object, an alternative way would be to define two Ingress objects. One for HTTP/HTTPS, and the other for gRPC: HTTP/HTTPS Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-http-ingress namespace : argocd annotations : kubernetes.io/ingress.class : \"nginx\" nginx.ingress.kubernetes.io/force-ssl-redirect : \"true\" nginx.ingress.kubernetes.io/backend-protocol : \"HTTP\" spec : rules : - http : paths : - backend : serviceName : argocd-server servicePort : http host : argocd.example.com tls : - hosts : - argocd.example.com secretName : argocd-secret # do not change, this is provided by Argo CD gRPC Ingress: apiVersion : extensions/v1beta1 kind : Ingress metadata : name : argocd-server-grpc-ingress namespace : argocd annotations : kubernetes.io/ingress.class : \"nginx\" nginx.ingress.kubernetes.io/backend-protocol : \"GRPC\" spec : rules : - http : paths : - backend : serviceName : argocd-server servicePort : https host : grpc.argocd.example.com tls : - hosts : - grpc.argocd.example.com secretName : argocd-secret # do not change, this is provided by Argo CD The API server should then be run with TLS disabled. Edit the argocd-server deployment to add the --insecure flag to the argocd-server command: spec : template : spec : containers : - name : argocd-server command : - /argocd-server - --staticassets - /shared/app - --repo-server - argocd-repo-server:8081 - --insecure The obvious disadvantage to this approach is that this technique requires two separate hostnames for the API server -- one for gRPC and the other for HTTP/HTTPS. However it allows TLS termination to happen at the ingress controller.","title":"Option 2: Multiple Ingress Objects And Hosts"},{"location":"operator-manual/ingress/#traefik-v22","text":"Traefik can be used as an edge router and provide TLS termination within the same deployment. It currently has an advantage over NGINX in that it can terminate both TCP and HTTP connections on the same port meaning you do not require multiple hosts or paths. The API server should be run with TLS disabled. Edit the argocd-server deployment to add the --insecure flag to the argocd-server command.","title":"Traefik (v2.2)"},{"location":"operator-manual/ingress/#ingressroute-crd","text":"apiVersion : traefik.containo.us/v1alpha1 kind : IngressRoute metadata : name : argocd-server namespace : argocd spec : entryPoints : - websecure routes : - kind : Rule match : Host(`argocd.example.com`) priority : 10 services : - name : argocd-server port : 80 - kind : Rule match : Host(`argocd.example.com`) && Headers(`Content-Type`, `application/grpc`) priority : 11 services : - name : argocd-server port : 80 scheme : h2c tls : certResolver : default options : {}","title":"IngressRoute CRD"},{"location":"operator-manual/ingress/#aws-application-load-balancers-albs-and-classic-elb-http-mode","text":"AWS ALBs can be used as an L7 Load Balancer for both UI and gRPC traffic, whereas Classic ELBs and NLBs can be used as L4 Load Balancers for both. When using an ALB, you'll want to create a second service for argocd-server. This is necessary because we need to tell the ALB to send the GRPC traffic to a different target group then the UI traffic, since the backend protocol is HTTP2 instead of HTTP1. apiVersion : v1 kind : Service metadata : annotations : alb.ingress.kubernetes.io/backend-protocol-version : HTTP2 #This tells AWS to send traffic from the ALB using HTTP2. Can use GRPC as well if you want to leverage GRPC specific features labels : app : argogrpc name : argogrpc namespace : argocd spec : ports : - name : \"443\" port : 443 protocol : TCP targetPort : 8080 selector : app.kubernetes.io/name : argocd-server sessionAffinity : None type : ClusterIP Once we create this service, we can configure the Ingress to conditionally route all application/grpc traffic to the new HTTP2 backend, using the alb.ingress.kubernetes.io/conditions annotation, as seen below. Note: The value after the . in the condition annotation must be the same name as the service that you want traffic to route to - and will be applied on any path with a matching serviceName. apiVersion : networking.k8s.io/v1 # Use extensions/v1beta1 for Kubernetes 1.14 and older kind : Ingress metadata : annotations : alb.ingress.kubernetes.io/backend-protocol : HTTPS # Use this annotation (which must match a service name) to route traffic to HTTP2 backends. alb.ingress.kubernetes.io/conditions.argogrpc : | [{\"field\":\"http-header\",\"httpHeaderConfig\":{\"httpHeaderName\": \"Content-Type\", \"values\":[\"application/grpc\"]}}] alb.ingress.kubernetes.io/listen-ports : '[{\"HTTPS\":443}]' name : argocd namespace : argocd spec : rules : - host : argocd.argoproj.io http : paths : - backend : serviceName : argogrpc servicePort : 443 pathType : ImplementationSpecific - backend : serviceName : argocd-server servicePort : 443 pathType : ImplementationSpecific tls : - hosts : - argocd.argoproj.io","title":"AWS Application Load Balancers (ALBs) And Classic ELB (HTTP Mode)"},{"location":"operator-manual/ingress/#authenticating-through-multiple-layers-of-authenticating-reverse-proxies","text":"ArgoCD endpoints may be protected by one or more reverse proxies layers, in that case, you can provide additional headers through the argocd CLI --header parameter to authenticate through those layers. $ argocd login <host>:<port> --header 'x-token1:foo' --header 'x-token2:bar' # can be repeated multiple times $ argocd login <host>:<port> --header 'x-token1:foo,x-token2:bar' # headers can also be comma separated","title":"Authenticating through multiple layers of authenticating reverse proxies"},{"location":"operator-manual/ingress/#argocd-server-and-ui-root-path-v153","text":"ArgoCD server and UI can be configured to be available under a non-root path (e.g. /argo-cd ). To do this, add the --rootpath flag into the argocd-server deployment command: spec : template : spec : name : argocd-server containers : - command : - /argocd-server - --staticassets - /shared/app - --repo-server - argocd-repo-server:8081 - --rootpath - /argo-cd NOTE: The flag --rootpath changes both API Server and UI base URL. Example nginx.conf: worker_processes 1 ; events { worker_connections 1024 ; } http { sendfile on ; server { listen 443 ; location /argo-cd/ { proxy_pass https : // localhost : 8080 / argo-cd / ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Host $server_name ; # buffering should be disabled for api/v1/stream/applications to support chunked response proxy_buffering off ; } } } Flag --grpc-web-root-path is used to provide a non-root path (e.g. /argo-cd) $ argocd login <host>:<port> --grpc-web-root-path /argo-cd","title":"ArgoCD Server and UI Root Path (v1.5.3)"},{"location":"operator-manual/ingress/#ui-base-path","text":"If the Argo CD UI is available under a non-root path (e.g. /argo-cd instead of / ) then the UI path should be configured in the API server. To configure the UI path add the --basehref flag into the argocd-server deployment command: spec : template : spec : name : argocd-server containers : - command : - /argocd-server - --staticassets - /shared/app - --repo-server - argocd-repo-server:8081 - --basehref - /argo-cd NOTE: The flag --basehref only changes the UI base URL. The API server will keep using the / path so you need to add a URL rewrite rule to the proxy config. Example nginx.conf with URL rewrite: worker_processes 1 ; events { worker_connections 1024 ; } http { sendfile on ; server { listen 443 ; location /argo-cd { rewrite /argo-cd/(.*) /$1 break ; proxy_pass https : // localhost : 8080 ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Host $server_name ; # buffering should be disabled for api/v1/stream/applications to support chunked response proxy_buffering off ; } } }","title":"UI Base Path"},{"location":"operator-manual/metrics/","text":"Metrics \u00b6 Argo CD exposes two sets of Prometheus metrics Application Metrics \u00b6 Metrics about applications. Scraped at the argocd-metrics:8082/metrics endpoint. Gauge for application health status Gauge for application sync status Counter for application sync history API Server Metrics \u00b6 Metrics about API Server API request and response activity (request totals, response codes, etc...). Scraped at the argocd-server-metrics:8083/metrics endpoint. Prometheus Operator \u00b6 If using Prometheus Operator, the following ServiceMonitor example manifests can be used. Change metadata.labels.release to the name of label selected by your Prometheus. apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : argocd-metrics labels : release : prometheus-operator spec : selector : matchLabels : app.kubernetes.io/name : argocd-metrics endpoints : - port : metrics apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : argocd-server-metrics labels : release : prometheus-operator spec : selector : matchLabels : app.kubernetes.io/name : argocd-server-metrics endpoints : - port : metrics apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : argocd-repo-server-metrics labels : release : prometheus-operator spec : selector : matchLabels : app.kubernetes.io/name : argocd-repo-server endpoints : - port : metrics Dashboards \u00b6 You can find an example Grafana dashboard here or check demo instance dashboard .","title":"Metrics"},{"location":"operator-manual/metrics/#metrics","text":"Argo CD exposes two sets of Prometheus metrics","title":"Metrics"},{"location":"operator-manual/metrics/#application-metrics","text":"Metrics about applications. Scraped at the argocd-metrics:8082/metrics endpoint. Gauge for application health status Gauge for application sync status Counter for application sync history","title":"Application Metrics"},{"location":"operator-manual/metrics/#api-server-metrics","text":"Metrics about API Server API request and response activity (request totals, response codes, etc...). Scraped at the argocd-server-metrics:8083/metrics endpoint.","title":"API Server Metrics"},{"location":"operator-manual/metrics/#prometheus-operator","text":"If using Prometheus Operator, the following ServiceMonitor example manifests can be used. Change metadata.labels.release to the name of label selected by your Prometheus. apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : argocd-metrics labels : release : prometheus-operator spec : selector : matchLabels : app.kubernetes.io/name : argocd-metrics endpoints : - port : metrics apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : argocd-server-metrics labels : release : prometheus-operator spec : selector : matchLabels : app.kubernetes.io/name : argocd-server-metrics endpoints : - port : metrics apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : argocd-repo-server-metrics labels : release : prometheus-operator spec : selector : matchLabels : app.kubernetes.io/name : argocd-repo-server endpoints : - port : metrics","title":"Prometheus Operator"},{"location":"operator-manual/metrics/#dashboards","text":"You can find an example Grafana dashboard here or check demo instance dashboard .","title":"Dashboards"},{"location":"operator-manual/notifications/","text":"Notifications \u00b6 The notifications support is not bundled into the Argo CD itself. Instead of reinventing the wheel and implementing opinionated notifications system Argo CD leverages integrations with the third-party notification system. Following integrations are recommended: To monitor Argo CD performance or health state of managed applications use Prometheus Metrics in combination with Grafana , Alertmanager . To notify the end-users of Argo CD about events like application upgrades, user errors in application definition, etc use one of the following projects: ArgoCD Notifications - Argo CD specific notification system that continuously monitors Argo CD applications and aims to integrate with various notification services such as Slack, SMTP, Telegram, Discord, etc. Argo Kube Notifier - generic Kubernetes resource controller that allows monitoring any Kubernetes resource and sends a notification when the configured rule is met. Kube Watch - a Kubernetes watcher that could publishes notification to Slack/hipchat/mattermost/flock channels. It watches the cluster for resource changes and notifies them through webhooks.","title":"Notifications"},{"location":"operator-manual/notifications/#notifications","text":"The notifications support is not bundled into the Argo CD itself. Instead of reinventing the wheel and implementing opinionated notifications system Argo CD leverages integrations with the third-party notification system. Following integrations are recommended: To monitor Argo CD performance or health state of managed applications use Prometheus Metrics in combination with Grafana , Alertmanager . To notify the end-users of Argo CD about events like application upgrades, user errors in application definition, etc use one of the following projects: ArgoCD Notifications - Argo CD specific notification system that continuously monitors Argo CD applications and aims to integrate with various notification services such as Slack, SMTP, Telegram, Discord, etc. Argo Kube Notifier - generic Kubernetes resource controller that allows monitoring any Kubernetes resource and sends a notification when the configured rule is met. Kube Watch - a Kubernetes watcher that could publishes notification to Slack/hipchat/mattermost/flock channels. It watches the cluster for resource changes and notifies them through webhooks.","title":"Notifications"},{"location":"operator-manual/rbac/","text":"RBAC Configuration \u00b6 The RBAC feature enables restriction of access to Argo CD resources. Argo CD does not have its own user management system and has only one built-in user admin . The admin user is a superuser and it has unrestricted access to the system. RBAC requires SSO configuration or one or more local users setup . Once SSO or local users are configured, additional RBAC roles can be defined, and SSO groups or local users can man be mapped to roles. Basic Built-in Roles \u00b6 Argo CD has two pre-defined roles but RBAC configuration allows defining roles and groups (see below). role:readonly - read-only access to all resources role:admin - unrestricted access to all resources These default built-in role definitions can be seen in builtin-policy.csv RBAC Permission Structure \u00b6 Breaking down the permissions definition differs slightly between applications and every other resource type in Argo CD. All resources except applications permissions (see next bullet): p, <role/user/group>, <resource>, <action>, <object> Applications (which belong to an AppProject): p, <role/user/group>, <resource>, <action>, <appproject>/<object> RBAC Resources and Actions \u00b6 Resources: clusters , projects , applications , repositories , certificates Actions: get , create , update , delete , sync , override , action Tying It All Together \u00b6 Additional roles and groups can be configured in argocd-rbac-cm ConfigMap. The example below configures a custom role, named org-admin . The role is assigned to any user which belongs to your-github-org:your-team group. All other users get the default policy of role:readonly , which cannot modify Argo CD settings. ArgoCD ConfigMap argocd-rbac-cm Example: apiVersion : v1 kind : ConfigMap metadata : name : argocd-rbac-cm namespace : argocd data : policy.default : role:readonly policy.csv : | p, role:org-admin, applications, *, */*, allow p, role:org-admin, clusters, get, *, allow p, role:org-admin, repositories, get, *, allow p, role:org-admin, repositories, create, *, allow p, role:org-admin, repositories, update, *, allow p, role:org-admin, repositories, delete, *, allow g, your-github-org:your-team, role:org-admin Another policy.csv example might look as follows: p, role:staging-db-admins, applications, create, staging-db-admins/*, allow p, role:staging-db-admins, applications, delete, staging-db-admins/*, allow p, role:staging-db-admins, applications, get, staging-db-admins/*, allow p, role:staging-db-admins, applications, override, staging-db-admins/*, allow p, role:staging-db-admins, applications, sync, staging-db-admins/*, allow p, role:staging-db-admins, applications, update, staging-db-admins/*, allow p, role:staging-db-admins, projects, get, staging-db-admins, allow g, db-admins, role:staging-db-admins This example defines a role called staging-db-admins with seven permissions that allow that role to perform the actions ( create / delete / get / override / sync / update applications, and get appprojects) against * (all) objects in the staging-db-admins Argo CD AppProject. Anonymous Access \u00b6 The anonymous access to Argo CD can be enabled using users.anonymous.enabled field in argocd-cm (see argocd-cm.yaml ). The anonymous users get default role permissions specified by policy.default in argocd-rbac-cm.yaml . For read-only access you'll want policy.default: role:readonly as above Validating and testing your RBAC policies \u00b6 If you want to ensure that your RBAC policies are working as expected, you can use the argocd-util rbac command to validate them. This tool allows you to test whether a certain role or subject can perform the requested action with a policy that's not live yet in the system, i.e. from a local file or config map. Additionally, it can be used against the live policy in the cluster your Argo CD is running in. To check whether your new policy is valid and understood by Argo CD's RBAC implementation, you can use the argocd-util rbac validate command. Validating a policy \u00b6 To validate a policy stored in a local text file: argocd-util rbac validate --policy-file somepolicy.csv To validate a policy stored in a local K8s ConfigMap definition in a YAML file: argocd-util rbac validate --policy-file argocd-rbac-cm.yaml To validate a policy stored in K8s, used by Argo CD in namespace argocd , ensure that your current context in ~/.kube/config is pointing to your Argo CD cluster and give appropriate namespace: argocd-util rbac validate --namespace argocd Testing a policy \u00b6 To test whether a role or subject (group or local user) has sufficient permissions to execute certain actions on certain resources, you can use the argocd-util rbac can command. Its general syntax is argocd-util rbac can SOMEROLE ACTION RESOURCE SUBRESOURCE [ flags ] Given the example from the above ConfigMap, which defines the role role:org-admin , and is stored on your local system as argocd-rbac-cm-yaml , you can test whether that role can do something like follows: $ argocd-util rbac can role:org-admin get applications --policy-file argocd-rbac-cm.yaml Yes $ argocd-util rbac can role:org-admin get clusters --policy-file argocd-rbac-cm.yaml Yes $ argocd-util rbac can role:org-admin create clusters 'somecluster' --policy-file argocd-rbac-cm.yaml No $ argocd-util rbac can role:org-admin create applications 'someproj/someapp' --policy-file argocd-rbac-cm.yaml Yes Another example, given the policy above from policy.csv , which defines the role role:staging-db-admins and associates the group db-admins with it. Policy is stored locally as policy.csv : You can test against the role: # Plain policy, without a default role defined $ argocd-util rbac can role:stagin-db-admins get applications --policy-file policy.csv No $ argocd-util rbac can role:staging-db-admins get applications 'staging-db-admins/*' --policy-file policy.csv Yes # Argo CD augments a builtin policy with two roles defined, the default role # being 'role:readonly' - You can include a named default role to use: $ argocd-util rbac can role:stagin-db-admins get applications --policy-file policy.csv --default-role role:readonly Yes Or against the group defined: $ argocd-util rbac can db-admins get applications 'staging-db-admins/*' --policy-file policy.csv Yes","title":"RBAC Configuration"},{"location":"operator-manual/rbac/#rbac-configuration","text":"The RBAC feature enables restriction of access to Argo CD resources. Argo CD does not have its own user management system and has only one built-in user admin . The admin user is a superuser and it has unrestricted access to the system. RBAC requires SSO configuration or one or more local users setup . Once SSO or local users are configured, additional RBAC roles can be defined, and SSO groups or local users can man be mapped to roles.","title":"RBAC Configuration"},{"location":"operator-manual/rbac/#basic-built-in-roles","text":"Argo CD has two pre-defined roles but RBAC configuration allows defining roles and groups (see below). role:readonly - read-only access to all resources role:admin - unrestricted access to all resources These default built-in role definitions can be seen in builtin-policy.csv","title":"Basic Built-in Roles"},{"location":"operator-manual/rbac/#rbac-permission-structure","text":"Breaking down the permissions definition differs slightly between applications and every other resource type in Argo CD. All resources except applications permissions (see next bullet): p, <role/user/group>, <resource>, <action>, <object> Applications (which belong to an AppProject): p, <role/user/group>, <resource>, <action>, <appproject>/<object>","title":"RBAC Permission Structure"},{"location":"operator-manual/rbac/#rbac-resources-and-actions","text":"Resources: clusters , projects , applications , repositories , certificates Actions: get , create , update , delete , sync , override , action","title":"RBAC Resources and Actions"},{"location":"operator-manual/rbac/#tying-it-all-together","text":"Additional roles and groups can be configured in argocd-rbac-cm ConfigMap. The example below configures a custom role, named org-admin . The role is assigned to any user which belongs to your-github-org:your-team group. All other users get the default policy of role:readonly , which cannot modify Argo CD settings. ArgoCD ConfigMap argocd-rbac-cm Example: apiVersion : v1 kind : ConfigMap metadata : name : argocd-rbac-cm namespace : argocd data : policy.default : role:readonly policy.csv : | p, role:org-admin, applications, *, */*, allow p, role:org-admin, clusters, get, *, allow p, role:org-admin, repositories, get, *, allow p, role:org-admin, repositories, create, *, allow p, role:org-admin, repositories, update, *, allow p, role:org-admin, repositories, delete, *, allow g, your-github-org:your-team, role:org-admin Another policy.csv example might look as follows: p, role:staging-db-admins, applications, create, staging-db-admins/*, allow p, role:staging-db-admins, applications, delete, staging-db-admins/*, allow p, role:staging-db-admins, applications, get, staging-db-admins/*, allow p, role:staging-db-admins, applications, override, staging-db-admins/*, allow p, role:staging-db-admins, applications, sync, staging-db-admins/*, allow p, role:staging-db-admins, applications, update, staging-db-admins/*, allow p, role:staging-db-admins, projects, get, staging-db-admins, allow g, db-admins, role:staging-db-admins This example defines a role called staging-db-admins with seven permissions that allow that role to perform the actions ( create / delete / get / override / sync / update applications, and get appprojects) against * (all) objects in the staging-db-admins Argo CD AppProject.","title":"Tying It All Together"},{"location":"operator-manual/rbac/#anonymous-access","text":"The anonymous access to Argo CD can be enabled using users.anonymous.enabled field in argocd-cm (see argocd-cm.yaml ). The anonymous users get default role permissions specified by policy.default in argocd-rbac-cm.yaml . For read-only access you'll want policy.default: role:readonly as above","title":"Anonymous Access"},{"location":"operator-manual/rbac/#validating-and-testing-your-rbac-policies","text":"If you want to ensure that your RBAC policies are working as expected, you can use the argocd-util rbac command to validate them. This tool allows you to test whether a certain role or subject can perform the requested action with a policy that's not live yet in the system, i.e. from a local file or config map. Additionally, it can be used against the live policy in the cluster your Argo CD is running in. To check whether your new policy is valid and understood by Argo CD's RBAC implementation, you can use the argocd-util rbac validate command.","title":"Validating and testing your RBAC policies"},{"location":"operator-manual/rbac/#validating-a-policy","text":"To validate a policy stored in a local text file: argocd-util rbac validate --policy-file somepolicy.csv To validate a policy stored in a local K8s ConfigMap definition in a YAML file: argocd-util rbac validate --policy-file argocd-rbac-cm.yaml To validate a policy stored in K8s, used by Argo CD in namespace argocd , ensure that your current context in ~/.kube/config is pointing to your Argo CD cluster and give appropriate namespace: argocd-util rbac validate --namespace argocd","title":"Validating a policy"},{"location":"operator-manual/rbac/#testing-a-policy","text":"To test whether a role or subject (group or local user) has sufficient permissions to execute certain actions on certain resources, you can use the argocd-util rbac can command. Its general syntax is argocd-util rbac can SOMEROLE ACTION RESOURCE SUBRESOURCE [ flags ] Given the example from the above ConfigMap, which defines the role role:org-admin , and is stored on your local system as argocd-rbac-cm-yaml , you can test whether that role can do something like follows: $ argocd-util rbac can role:org-admin get applications --policy-file argocd-rbac-cm.yaml Yes $ argocd-util rbac can role:org-admin get clusters --policy-file argocd-rbac-cm.yaml Yes $ argocd-util rbac can role:org-admin create clusters 'somecluster' --policy-file argocd-rbac-cm.yaml No $ argocd-util rbac can role:org-admin create applications 'someproj/someapp' --policy-file argocd-rbac-cm.yaml Yes Another example, given the policy above from policy.csv , which defines the role role:staging-db-admins and associates the group db-admins with it. Policy is stored locally as policy.csv : You can test against the role: # Plain policy, without a default role defined $ argocd-util rbac can role:stagin-db-admins get applications --policy-file policy.csv No $ argocd-util rbac can role:staging-db-admins get applications 'staging-db-admins/*' --policy-file policy.csv Yes # Argo CD augments a builtin policy with two roles defined, the default role # being 'role:readonly' - You can include a named default role to use: $ argocd-util rbac can role:stagin-db-admins get applications --policy-file policy.csv --default-role role:readonly Yes Or against the group defined: $ argocd-util rbac can db-admins get applications 'staging-db-admins/*' --policy-file policy.csv Yes","title":"Testing a policy"},{"location":"operator-manual/secret-management/","text":"Secret Management \u00b6 Argo CD is un-opinionated about how secrets are managed. There's many ways to do it and there's no one-size-fits-all solution. Here's some ways people are doing GitOps secrets: Bitnami Sealed Secrets GoDaddy Kubernetes External Secrets External Secrets Operator Hashicorp Vault Banzai Cloud Bank-Vaults Helm Secrets Kustomize secret generator plugins aws-secret-operator KSOPS For discussion, see #1364","title":"Secret Management"},{"location":"operator-manual/secret-management/#secret-management","text":"Argo CD is un-opinionated about how secrets are managed. There's many ways to do it and there's no one-size-fits-all solution. Here's some ways people are doing GitOps secrets: Bitnami Sealed Secrets GoDaddy Kubernetes External Secrets External Secrets Operator Hashicorp Vault Banzai Cloud Bank-Vaults Helm Secrets Kustomize secret generator plugins aws-secret-operator KSOPS For discussion, see #1364","title":"Secret Management"},{"location":"operator-manual/security/","text":"Security \u00b6 Argo CD has undergone rigorous internal security reviews and penetration testing to satisfy PCI compliance requirements. The following are some security topics and implementation details of Argo CD. Authentication \u00b6 Authentication to Argo CD API server is performed exclusively using JSON Web Tokens (JWTs). Username/password bearer tokens are not used for authentication. The JWT is obtained/managed in one of the following ways: For the local admin user, a username/password is exchanged for a JWT using the /api/v1/session endpoint. This token is signed & issued by the Argo CD API server itself, and has no expiration. When the admin password is updated, all existing admin JWT tokens are immediately revoked. The password is stored as a bcrypt hash in the argocd-secret Secret. For Single Sign-On users, the user completes an OAuth2 login flow to the configured OIDC identity provider (either delegated through the bundled Dex provider, or directly to a self-managed OIDC provider). This JWT is signed & issued by the IDP, and expiration and revocation is handled by the provider. Dex tokens expire after 24 hours. Automation tokens are generated for a project using the /api/v1/projects/{project}/roles/{role}/token endpoint, and are signed & issued by Argo CD. These tokens are limited in scope and privilege, and can only be used to manage application resources in the project which it belongs to. Project JWTs have a configurable expiration and can be immediately revoked by deleting the JWT reference ID from the project role. Authorization \u00b6 Authorization is performed by iterating the list of group membership in a user's JWT groups claims, and comparing each group against the roles/rules in the RBAC policy. Any matched rule permits access to the API request. TLS \u00b6 All network communication is performed over TLS including service-to-service communication between the three components (argocd-server, argocd-repo-server, argocd-application-controller). The Argo CD API server can enforce the use of TLS 1.2 using the flag: --tlsminversion 1.2 . Sensitive Information \u00b6 Secrets \u00b6 Argo CD never returns sensitive data from its API, and redacts all sensitive data in API payloads and logs. This includes: cluster credentials Git credentials OAuth2 client secrets Kubernetes Secret values External Cluster Credentials \u00b6 To manage external clusters, Argo CD stores the credentials of the external cluster as a Kubernetes Secret in the argocd namespace. This secret contains the K8s API bearer token associated with the argocd-manager ServiceAccount created during argocd cluster add , along with connection options to that API server (TLS configuration/certs, aws-iam-authenticator RoleARN, etc...). The information is used to reconstruct a REST config and kubeconfig to the cluster used by Argo CD services. To rotate the bearer token used by Argo CD, the token can be deleted (e.g. using kubectl) which causes kubernetes to generate a new secret with a new bearer token. The new token can be re-inputted to Argo CD by re-running argocd cluster add . Run the following commands against the managed cluster: # run using a kubeconfig for the externally managed cluster kubectl delete secret argocd-manager-token-XXXXXX -n kube-system argocd cluster add CONTEXTNAME To revoke Argo CD's access to a managed cluster, delete the RBAC artifacts against the managed cluster, and remove the cluster entry from Argo CD: # run using a kubeconfig for the externally managed cluster kubectl delete sa argocd-manager -n kube-system kubectl delete clusterrole argocd-manager-role kubectl delete clusterrolebinding argocd-manager-role-binding argocd cluster rm https://your-kubernetes-cluster-addr NOTE: for AWS EKS clusters, aws-iam-authenticator is used to authenticate to the external cluster, which uses IAM roles in lieu of locally stored tokens, so token rotation is not needed, and revocation is handled through IAM. Cluster RBAC \u00b6 By default, Argo CD uses a clusteradmin level role in order to: watch & operate on cluster state deploy resources to the cluster Although Argo CD requires cluster-wide read privileges to resources in the managed cluster to function properly, it does not necessarily need full write privileges to the cluster. The ClusterRole used by argocd-server and argocd-application-controller can be modified such that write privileges are limited to only the namespaces and resources that you wish Argo CD to manage. To fine-tune privileges of externally managed clusters, edit the ClusterRole of the argocd-manager-role # run using a kubeconfig for the externally managed cluster kubectl edit clusterrole argocd-manager-role To fine-tune privileges which Argo CD has against its own cluster (i.e. https://kubernetes.default.svc ), edit the following cluster roles where Argo CD is running in: # run using a kubeconfig to the cluster Argo CD is running in kubectl edit clusterrole argocd-server kubectl edit clusterrole argocd-application-controller Tip If you want to deny ArgoCD access to a kind of resource then add it as an excluded resource . Auditing \u00b6 As a GitOps deployment tool, the Git commit history provides a natural audit log of what changes were made to application configuration, when they were made, and by whom. However, this audit log only applies to what happened in Git and does not necessarily correlate one-to-one with events that happen in a cluster. For example, User A could have made multiple commits to application manifests, but User B could have just only synced those changes to the cluster sometime later. To complement the Git revision history, Argo CD emits Kubernetes Events of application activity, indicating the responsible actor when applicable. For example: $ kubectl get events LAST SEEN FIRST SEEN COUNT NAME KIND SUBOBJECT TYPE REASON SOURCE MESSAGE 1m 1m 1 guestbook.157f7c5edd33aeac Application Normal ResourceCreated argocd-server admin created application 1m 1m 1 guestbook.157f7c5f0f747acf Application Normal ResourceUpdated argocd-application-controller Updated sync status: -> OutOfSync 1m 1m 1 guestbook.157f7c5f0fbebbff Application Normal ResourceUpdated argocd-application-controller Updated health status: -> Missing 1m 1m 1 guestbook.157f7c6069e14f4d Application Normal OperationStarted argocd-server admin initiated sync to HEAD ( 8a1cb4a02d3538e54907c827352f66f20c3d7b0d ) 1m 1m 1 guestbook.157f7c60a55a81a8 Application Normal OperationCompleted argocd-application-controller Sync operation to 8a1cb4a02d3538e54907c827352f66f20c3d7b0d succeeded 1m 1m 1 guestbook.157f7c60af1ccae2 Application Normal ResourceUpdated argocd-application-controller Updated sync status: OutOfSync -> Synced 1m 1m 1 guestbook.157f7c60af5bc4f0 Application Normal ResourceUpdated argocd-application-controller Updated health status: Missing -> Progressing 1m 1m 1 guestbook.157f7c651990e848 Application Normal ResourceUpdated argocd-application-controller Updated health status: Progressing -> Healthy These events can be then be persisted for longer periods of time using other tools as Event Exporter or Event Router . WebHook Payloads \u00b6 Payloads from webhook events are considered untrusted. Argo CD only examines the payload to infer the involved applications of the webhook event (e.g. which repo was modified), then refreshes the related application for reconciliation. This refresh is the same refresh which occurs regularly at three minute intervals, just fast-tracked by the webhook event.","title":"Security"},{"location":"operator-manual/security/#security","text":"Argo CD has undergone rigorous internal security reviews and penetration testing to satisfy PCI compliance requirements. The following are some security topics and implementation details of Argo CD.","title":"Security"},{"location":"operator-manual/security/#authentication","text":"Authentication to Argo CD API server is performed exclusively using JSON Web Tokens (JWTs). Username/password bearer tokens are not used for authentication. The JWT is obtained/managed in one of the following ways: For the local admin user, a username/password is exchanged for a JWT using the /api/v1/session endpoint. This token is signed & issued by the Argo CD API server itself, and has no expiration. When the admin password is updated, all existing admin JWT tokens are immediately revoked. The password is stored as a bcrypt hash in the argocd-secret Secret. For Single Sign-On users, the user completes an OAuth2 login flow to the configured OIDC identity provider (either delegated through the bundled Dex provider, or directly to a self-managed OIDC provider). This JWT is signed & issued by the IDP, and expiration and revocation is handled by the provider. Dex tokens expire after 24 hours. Automation tokens are generated for a project using the /api/v1/projects/{project}/roles/{role}/token endpoint, and are signed & issued by Argo CD. These tokens are limited in scope and privilege, and can only be used to manage application resources in the project which it belongs to. Project JWTs have a configurable expiration and can be immediately revoked by deleting the JWT reference ID from the project role.","title":"Authentication"},{"location":"operator-manual/security/#authorization","text":"Authorization is performed by iterating the list of group membership in a user's JWT groups claims, and comparing each group against the roles/rules in the RBAC policy. Any matched rule permits access to the API request.","title":"Authorization"},{"location":"operator-manual/security/#tls","text":"All network communication is performed over TLS including service-to-service communication between the three components (argocd-server, argocd-repo-server, argocd-application-controller). The Argo CD API server can enforce the use of TLS 1.2 using the flag: --tlsminversion 1.2 .","title":"TLS"},{"location":"operator-manual/security/#sensitive-information","text":"","title":"Sensitive Information"},{"location":"operator-manual/security/#secrets","text":"Argo CD never returns sensitive data from its API, and redacts all sensitive data in API payloads and logs. This includes: cluster credentials Git credentials OAuth2 client secrets Kubernetes Secret values","title":"Secrets"},{"location":"operator-manual/security/#external-cluster-credentials","text":"To manage external clusters, Argo CD stores the credentials of the external cluster as a Kubernetes Secret in the argocd namespace. This secret contains the K8s API bearer token associated with the argocd-manager ServiceAccount created during argocd cluster add , along with connection options to that API server (TLS configuration/certs, aws-iam-authenticator RoleARN, etc...). The information is used to reconstruct a REST config and kubeconfig to the cluster used by Argo CD services. To rotate the bearer token used by Argo CD, the token can be deleted (e.g. using kubectl) which causes kubernetes to generate a new secret with a new bearer token. The new token can be re-inputted to Argo CD by re-running argocd cluster add . Run the following commands against the managed cluster: # run using a kubeconfig for the externally managed cluster kubectl delete secret argocd-manager-token-XXXXXX -n kube-system argocd cluster add CONTEXTNAME To revoke Argo CD's access to a managed cluster, delete the RBAC artifacts against the managed cluster, and remove the cluster entry from Argo CD: # run using a kubeconfig for the externally managed cluster kubectl delete sa argocd-manager -n kube-system kubectl delete clusterrole argocd-manager-role kubectl delete clusterrolebinding argocd-manager-role-binding argocd cluster rm https://your-kubernetes-cluster-addr NOTE: for AWS EKS clusters, aws-iam-authenticator is used to authenticate to the external cluster, which uses IAM roles in lieu of locally stored tokens, so token rotation is not needed, and revocation is handled through IAM.","title":"External Cluster Credentials"},{"location":"operator-manual/security/#cluster-rbac","text":"By default, Argo CD uses a clusteradmin level role in order to: watch & operate on cluster state deploy resources to the cluster Although Argo CD requires cluster-wide read privileges to resources in the managed cluster to function properly, it does not necessarily need full write privileges to the cluster. The ClusterRole used by argocd-server and argocd-application-controller can be modified such that write privileges are limited to only the namespaces and resources that you wish Argo CD to manage. To fine-tune privileges of externally managed clusters, edit the ClusterRole of the argocd-manager-role # run using a kubeconfig for the externally managed cluster kubectl edit clusterrole argocd-manager-role To fine-tune privileges which Argo CD has against its own cluster (i.e. https://kubernetes.default.svc ), edit the following cluster roles where Argo CD is running in: # run using a kubeconfig to the cluster Argo CD is running in kubectl edit clusterrole argocd-server kubectl edit clusterrole argocd-application-controller Tip If you want to deny ArgoCD access to a kind of resource then add it as an excluded resource .","title":"Cluster RBAC"},{"location":"operator-manual/security/#auditing","text":"As a GitOps deployment tool, the Git commit history provides a natural audit log of what changes were made to application configuration, when they were made, and by whom. However, this audit log only applies to what happened in Git and does not necessarily correlate one-to-one with events that happen in a cluster. For example, User A could have made multiple commits to application manifests, but User B could have just only synced those changes to the cluster sometime later. To complement the Git revision history, Argo CD emits Kubernetes Events of application activity, indicating the responsible actor when applicable. For example: $ kubectl get events LAST SEEN FIRST SEEN COUNT NAME KIND SUBOBJECT TYPE REASON SOURCE MESSAGE 1m 1m 1 guestbook.157f7c5edd33aeac Application Normal ResourceCreated argocd-server admin created application 1m 1m 1 guestbook.157f7c5f0f747acf Application Normal ResourceUpdated argocd-application-controller Updated sync status: -> OutOfSync 1m 1m 1 guestbook.157f7c5f0fbebbff Application Normal ResourceUpdated argocd-application-controller Updated health status: -> Missing 1m 1m 1 guestbook.157f7c6069e14f4d Application Normal OperationStarted argocd-server admin initiated sync to HEAD ( 8a1cb4a02d3538e54907c827352f66f20c3d7b0d ) 1m 1m 1 guestbook.157f7c60a55a81a8 Application Normal OperationCompleted argocd-application-controller Sync operation to 8a1cb4a02d3538e54907c827352f66f20c3d7b0d succeeded 1m 1m 1 guestbook.157f7c60af1ccae2 Application Normal ResourceUpdated argocd-application-controller Updated sync status: OutOfSync -> Synced 1m 1m 1 guestbook.157f7c60af5bc4f0 Application Normal ResourceUpdated argocd-application-controller Updated health status: Missing -> Progressing 1m 1m 1 guestbook.157f7c651990e848 Application Normal ResourceUpdated argocd-application-controller Updated health status: Progressing -> Healthy These events can be then be persisted for longer periods of time using other tools as Event Exporter or Event Router .","title":"Auditing"},{"location":"operator-manual/security/#webhook-payloads","text":"Payloads from webhook events are considered untrusted. Argo CD only examines the payload to infer the involved applications of the webhook event (e.g. which repo was modified), then refreshes the related application for reconciliation. This refresh is the same refresh which occurs regularly at three minute intervals, just fast-tracked by the webhook event.","title":"WebHook Payloads"},{"location":"operator-manual/troubleshooting/","text":"Troubleshooting Tools \u00b6 The document describes how to use argocd-tool binary to simplify Argo CD settings customizations and troubleshot connectivity issues. Settings \u00b6 Argo CD provides multiple ways to customize system behavior and has a lot of settings. It might be dangerous to modify settings on Argo CD used in production by multiple users. Before applying settings you can use argocd-util binary to make sure that settings are valid and Argo CD is working as expected. The argocd-util binary is available in argocd image and might be used using docker. You can download the latest argocd-util binary from the latest release page of this repository , which will include the argocd-util CLI. Example: docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings validate --argocd-cm-path ./argocd-cm.yaml If you are using Linux you can extract argocd-util binary from docker image: docker run --rm -it -w /src -v $( pwd ) :/src argocd cp /usr/local/bin/argocd-util ./argocd-util The argocd-util settings validate command performs basic settings validation and print short summary of each settings group. Diffing Customization Diffing customization allows excluding some resource fields from diffing process. The diffing customizations are configured in resource.customizations field of argocd-cm ConfigMap. The following argocd-util command prints information about fields excluded from diffing in the specified ConfigMap. docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml Health Assessment Health assessment allows excluding some resource fields from diffing process. The diffing customizations are configured in resource.customizations field of argocd-cm ConfigMap. The following argocd-util command assess resource health using Lua script configured in the specified ConfigMap. docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml Resource Actions Resource actions allows configuring named Lua script which performs resource modification. The following argocd-util command executes action using Lua script configured in the specified ConfigMap and prints applied modifications. docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings resource-overrides run-action /tmp/deploy.yaml restart --argocd-cm-path /private/tmp/argocd-cm.yaml The following argocd-util command lists actions available for a given resource using Lua script configured in the specified ConfigMap. docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings resource-overrides list-actions /tmp/deploy.yaml --argocd-cm-path /private/tmp/argocd-cm.yaml Cluster credentials \u00b6 The argocd-util kubeconfig is useful if you manually created Secret with cluster credentials and trying need to troubleshoot connectivity issues. In this case, it is suggested to use the following steps: 1 SSH into [argocd-application-controller] pod. kubectl exec - n argocd - it \\ $ ( kubectl get pods - n argocd - l app . kubernetes . io / name = argocd - application - controller - o jsonpath = ' {.items[0].metadata.name} ' ) bash 2 Use argocd-util kubeconfig command to export kubeconfig file from the configured Secret: argocd-util kubeconfig https://<api-server-url> /tmp/kubeconfig --namespace argocd 3 Use kubectl to get more details about connection issues, fix them and apply changes back to secret: export KUBECONFIG =/ tmp / kubeconfig kubectl get pods - v 9","title":"Troubleshooting Tools"},{"location":"operator-manual/troubleshooting/#troubleshooting-tools","text":"The document describes how to use argocd-tool binary to simplify Argo CD settings customizations and troubleshot connectivity issues.","title":"Troubleshooting Tools"},{"location":"operator-manual/troubleshooting/#settings","text":"Argo CD provides multiple ways to customize system behavior and has a lot of settings. It might be dangerous to modify settings on Argo CD used in production by multiple users. Before applying settings you can use argocd-util binary to make sure that settings are valid and Argo CD is working as expected. The argocd-util binary is available in argocd image and might be used using docker. You can download the latest argocd-util binary from the latest release page of this repository , which will include the argocd-util CLI. Example: docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings validate --argocd-cm-path ./argocd-cm.yaml If you are using Linux you can extract argocd-util binary from docker image: docker run --rm -it -w /src -v $( pwd ) :/src argocd cp /usr/local/bin/argocd-util ./argocd-util The argocd-util settings validate command performs basic settings validation and print short summary of each settings group. Diffing Customization Diffing customization allows excluding some resource fields from diffing process. The diffing customizations are configured in resource.customizations field of argocd-cm ConfigMap. The following argocd-util command prints information about fields excluded from diffing in the specified ConfigMap. docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml Health Assessment Health assessment allows excluding some resource fields from diffing process. The diffing customizations are configured in resource.customizations field of argocd-cm ConfigMap. The following argocd-util command assess resource health using Lua script configured in the specified ConfigMap. docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml Resource Actions Resource actions allows configuring named Lua script which performs resource modification. The following argocd-util command executes action using Lua script configured in the specified ConfigMap and prints applied modifications. docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings resource-overrides run-action /tmp/deploy.yaml restart --argocd-cm-path /private/tmp/argocd-cm.yaml The following argocd-util command lists actions available for a given resource using Lua script configured in the specified ConfigMap. docker run --rm -it -w /src -v $( pwd ) :/src argoproj/argocd:<version> \\ argocd-util settings resource-overrides list-actions /tmp/deploy.yaml --argocd-cm-path /private/tmp/argocd-cm.yaml","title":"Settings"},{"location":"operator-manual/troubleshooting/#cluster-credentials","text":"The argocd-util kubeconfig is useful if you manually created Secret with cluster credentials and trying need to troubleshoot connectivity issues. In this case, it is suggested to use the following steps: 1 SSH into [argocd-application-controller] pod. kubectl exec - n argocd - it \\ $ ( kubectl get pods - n argocd - l app . kubernetes . io / name = argocd - application - controller - o jsonpath = ' {.items[0].metadata.name} ' ) bash 2 Use argocd-util kubeconfig command to export kubeconfig file from the configured Secret: argocd-util kubeconfig https://<api-server-url> /tmp/kubeconfig --namespace argocd 3 Use kubectl to get more details about connection issues, fix them and apply changes back to secret: export KUBECONFIG =/ tmp / kubeconfig kubectl get pods - v 9","title":"Cluster credentials"},{"location":"operator-manual/webhook/","text":"Git Webhook Configuration \u00b6 Overview \u00b6 Argo CD polls Git repositories every three minutes to detect changes to the manifests. To eliminate this delay from polling, the API server can be configured to receive webhook events. Argo CD supports Git webhook notifications from GitHub, GitLab, Bitbucket, Bitbucket Server and Gogs. The following explains how to configure a Git webhook for GitHub, but the same process should be applicable to other providers. 1. Create The WebHook In The Git Provider \u00b6 In your Git provider, navigate to the settings page where webhooks can be configured. The payload URL configured in the Git provider should use the /api/webhook endpoint of your Argo CD instance (e.g. [https://argocd.example.com/api/webhook]). If you wish to use a shared secret, input an arbitrary value in the secret. This value will be used when configuring the webhook in the next step. Note When creating the webhook in Github, the \"Content type\" needs to be set to \"application/json\". The default value \"application/x-www-form-urlencoded\" is not supported by the library used to handle the hooks 2. Configure Argo CD With The WebHook Secret (Optional) \u00b6 Configuring a webhook shared secret is optional, since Argo CD will still refresh applications related to the Git repository, even with unauthenticated webhook events. This is safe to do since the contents of webhook payloads are considered untrusted, and will only result in a refresh of the application (a process which already occurs at three-minute intervals). If Argo CD is publicly accessible, then configuring a webhook secret is recommended to prevent a DDoS attack. In the argocd-secret kubernetes secret, configure one of the following keys with the Git provider's webhook secret configured in step 1. Provider K8s Secret Key GitHub webhook.github.secret GitLab webhook.gitlab.secret BitBucket webhook.bitbucket.uuid BitBucketServer webhook.bitbucketserver.secret Gogs webhook.gogs.secret Edit the Argo CD kubernetes secret: kubectl edit secret argocd-secret -n argocd TIP: for ease of entering secrets, kubernetes supports inputting secrets in the stringData field, which saves you the trouble of base64 encoding the values and copying it to the data field. Simply copy the shared webhook secret created in step 1, to the corresponding GitHub/GitLab/BitBucket key under the stringData field: apiVersion : v1 kind : Secret metadata : name : argocd-secret namespace : argocd type : Opaque data : ... stringData : # github webhook secret webhook.github.secret : shhhh! it's a github secret # gitlab webhook secret webhook.gitlab.secret : shhhh! it's a gitlab secret # bitbucket webhook secret webhook.bitbucket.uuid : your-bitbucket-uuid # bitbucket server webhook secret webhook.bitbucketserver.secret : shhhh! it's a bitbucket server secret # gogs server webhook secret webhook.gogs.secret : shhhh! it's a gogs server secret After saving, the changes should take effect automatically.","title":"Git Webhook Configuration"},{"location":"operator-manual/webhook/#git-webhook-configuration","text":"","title":"Git Webhook Configuration"},{"location":"operator-manual/webhook/#overview","text":"Argo CD polls Git repositories every three minutes to detect changes to the manifests. To eliminate this delay from polling, the API server can be configured to receive webhook events. Argo CD supports Git webhook notifications from GitHub, GitLab, Bitbucket, Bitbucket Server and Gogs. The following explains how to configure a Git webhook for GitHub, but the same process should be applicable to other providers.","title":"Overview"},{"location":"operator-manual/webhook/#1-create-the-webhook-in-the-git-provider","text":"In your Git provider, navigate to the settings page where webhooks can be configured. The payload URL configured in the Git provider should use the /api/webhook endpoint of your Argo CD instance (e.g. [https://argocd.example.com/api/webhook]). If you wish to use a shared secret, input an arbitrary value in the secret. This value will be used when configuring the webhook in the next step. Note When creating the webhook in Github, the \"Content type\" needs to be set to \"application/json\". The default value \"application/x-www-form-urlencoded\" is not supported by the library used to handle the hooks","title":"1. Create The WebHook In The Git Provider"},{"location":"operator-manual/webhook/#2-configure-argo-cd-with-the-webhook-secret-optional","text":"Configuring a webhook shared secret is optional, since Argo CD will still refresh applications related to the Git repository, even with unauthenticated webhook events. This is safe to do since the contents of webhook payloads are considered untrusted, and will only result in a refresh of the application (a process which already occurs at three-minute intervals). If Argo CD is publicly accessible, then configuring a webhook secret is recommended to prevent a DDoS attack. In the argocd-secret kubernetes secret, configure one of the following keys with the Git provider's webhook secret configured in step 1. Provider K8s Secret Key GitHub webhook.github.secret GitLab webhook.gitlab.secret BitBucket webhook.bitbucket.uuid BitBucketServer webhook.bitbucketserver.secret Gogs webhook.gogs.secret Edit the Argo CD kubernetes secret: kubectl edit secret argocd-secret -n argocd TIP: for ease of entering secrets, kubernetes supports inputting secrets in the stringData field, which saves you the trouble of base64 encoding the values and copying it to the data field. Simply copy the shared webhook secret created in step 1, to the corresponding GitHub/GitLab/BitBucket key under the stringData field: apiVersion : v1 kind : Secret metadata : name : argocd-secret namespace : argocd type : Opaque data : ... stringData : # github webhook secret webhook.github.secret : shhhh! it's a github secret # gitlab webhook secret webhook.gitlab.secret : shhhh! it's a gitlab secret # bitbucket webhook secret webhook.bitbucket.uuid : your-bitbucket-uuid # bitbucket server webhook secret webhook.bitbucketserver.secret : shhhh! it's a bitbucket server secret # gogs server webhook secret webhook.gogs.secret : shhhh! it's a gogs server secret After saving, the changes should take effect automatically.","title":"2. Configure Argo CD With The WebHook Secret (Optional)"},{"location":"operator-manual/server-commands/argocd-application-controller/","text":"argocd-application-controller \u00b6 Run ArgoCD Application Controller Synopsis \u00b6 ArgoCD application controller is a Kubernetes controller that continuously monitors running applications and compares the current, live state against the desired target state (as specified in the repo). This command runs Application Controller in the foreground. It can be configured by following options. argocd - application - controller [ flags ] Options \u00b6 -- app - resync int Time period in seconds for application resync . ( default 180 ) -- app - state - cache - expiration duration Cache expiration for app state ( default 1 h0m0s ) -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- default - cache - expiration duration Cache expiration default ( default 24 h0m0s ) -- gloglevel int Set the glog logging level - h , -- help help for argocd - application - controller -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- kubectl - parallelism - limit int Number of allowed concurrent kubectl fork / execs . Any value less the 1 means no limit . ( default 20 ) -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- metrics - port int Start metrics server on given port ( default 8082 ) - n , -- namespace string If present , the namespace scope for this CLI request -- operation - processors int Number of application operation processors ( default 1 ) -- password string Password for basic authentication to the API server -- redis string Redis server hostname and port ( e . g . argocd - redis : 6379 ) . -- redisdb int Redis database . -- repo - server string Repo server address . ( default \" argocd-repo-server:8081 \" ) -- repo - server - timeout - seconds int Repo server RPC call timeout seconds . ( default 60 ) -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- self - heal - timeout - seconds int Specifies timeout between application self heal attempts ( default 5 ) -- sentinel stringArray Redis sentinel hostname and port ( e . g . argocd - redis - ha - announce - 0 : 6379 ) . -- sentinelmaster string Redis sentinel master group name . ( default \" master \" ) -- server string The address and port of the Kubernetes API server -- status - processors int Number of application status processors ( default 1 ) -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Argocd application controller"},{"location":"operator-manual/server-commands/argocd-application-controller/#argocd-application-controller","text":"Run ArgoCD Application Controller","title":"argocd-application-controller"},{"location":"operator-manual/server-commands/argocd-application-controller/#synopsis","text":"ArgoCD application controller is a Kubernetes controller that continuously monitors running applications and compares the current, live state against the desired target state (as specified in the repo). This command runs Application Controller in the foreground. It can be configured by following options. argocd - application - controller [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-application-controller/#options","text":"-- app - resync int Time period in seconds for application resync . ( default 180 ) -- app - state - cache - expiration duration Cache expiration for app state ( default 1 h0m0s ) -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- default - cache - expiration duration Cache expiration default ( default 24 h0m0s ) -- gloglevel int Set the glog logging level - h , -- help help for argocd - application - controller -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- kubectl - parallelism - limit int Number of allowed concurrent kubectl fork / execs . Any value less the 1 means no limit . ( default 20 ) -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- metrics - port int Start metrics server on given port ( default 8082 ) - n , -- namespace string If present , the namespace scope for this CLI request -- operation - processors int Number of application operation processors ( default 1 ) -- password string Password for basic authentication to the API server -- redis string Redis server hostname and port ( e . g . argocd - redis : 6379 ) . -- redisdb int Redis database . -- repo - server string Repo server address . ( default \" argocd-repo-server:8081 \" ) -- repo - server - timeout - seconds int Repo server RPC call timeout seconds . ( default 60 ) -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- self - heal - timeout - seconds int Specifies timeout between application self heal attempts ( default 5 ) -- sentinel stringArray Redis sentinel hostname and port ( e . g . argocd - redis - ha - announce - 0 : 6379 ) . -- sentinelmaster string Redis sentinel master group name . ( default \" master \" ) -- server string The address and port of the Kubernetes API server -- status - processors int Number of application status processors ( default 1 ) -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-repo-server/","text":"argocd-repo-server \u00b6 Run ArgoCD Repository Server Synopsis \u00b6 ArgoCD Repository Server is an internal service which maintains a local cache of the Git repository holding the application manifests, and is responsible for generating and returning the Kubernetes manifests. This command runs Repository Server in the foreground. It can be configured by following options. argocd - repo - server [ flags ] Options \u00b6 -- default - cache - expiration duration Cache expiration default ( default 24 h0m0s ) - h , -- help help for argocd - repo - server -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- metrics - port int Start metrics server on given port ( default 8084 ) -- parallelismlimit int Limit on number of concurrent manifests generate requests . Any value less the 1 means no limit . -- port int Listen on given port for incoming connections ( default 8081 ) -- redis string Redis server hostname and port ( e . g . argocd - redis : 6379 ) . -- redisdb int Redis database . -- repo - cache - expiration duration Cache expiration for repo state , incl . app lists , app details , manifest generation , revision meta - data ( default 24 h0m0s ) -- sentinel stringArray Redis sentinel hostname and port ( e . g . argocd - redis - ha - announce - 0 : 6379 ) . -- sentinelmaster string Redis sentinel master group name . ( default \" master \" ) -- tlsciphers string The list of acceptable ciphers to be used when establishing TLS connections . Use ' list ' to list available ciphers . ( default \" TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_RSA_WITH_AES_256_GCM_SHA384 \" ) -- tlsmaxversion string The maximum SSL / TLS version that is acceptable ( one of : 1 . 0 | 1 . 1 | 1 . 2 | 1 . 3 ) ( default \" 1.3 \" ) -- tlsminversion string The minimum SSL / TLS version that is acceptable ( one of : 1 . 0 | 1 . 1 | 1 . 2 | 1 . 3 ) ( default \" 1.2 \" )","title":"Argocd repo server"},{"location":"operator-manual/server-commands/argocd-repo-server/#argocd-repo-server","text":"Run ArgoCD Repository Server","title":"argocd-repo-server"},{"location":"operator-manual/server-commands/argocd-repo-server/#synopsis","text":"ArgoCD Repository Server is an internal service which maintains a local cache of the Git repository holding the application manifests, and is responsible for generating and returning the Kubernetes manifests. This command runs Repository Server in the foreground. It can be configured by following options. argocd - repo - server [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-repo-server/#options","text":"-- default - cache - expiration duration Cache expiration default ( default 24 h0m0s ) - h , -- help help for argocd - repo - server -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- metrics - port int Start metrics server on given port ( default 8084 ) -- parallelismlimit int Limit on number of concurrent manifests generate requests . Any value less the 1 means no limit . -- port int Listen on given port for incoming connections ( default 8081 ) -- redis string Redis server hostname and port ( e . g . argocd - redis : 6379 ) . -- redisdb int Redis database . -- repo - cache - expiration duration Cache expiration for repo state , incl . app lists , app details , manifest generation , revision meta - data ( default 24 h0m0s ) -- sentinel stringArray Redis sentinel hostname and port ( e . g . argocd - redis - ha - announce - 0 : 6379 ) . -- sentinelmaster string Redis sentinel master group name . ( default \" master \" ) -- tlsciphers string The list of acceptable ciphers to be used when establishing TLS connections . Use ' list ' to list available ciphers . ( default \" TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_RSA_WITH_AES_256_GCM_SHA384 \" ) -- tlsmaxversion string The maximum SSL / TLS version that is acceptable ( one of : 1 . 0 | 1 . 1 | 1 . 2 | 1 . 3 ) ( default \" 1.3 \" ) -- tlsminversion string The minimum SSL / TLS version that is acceptable ( one of : 1 . 0 | 1 . 1 | 1 . 2 | 1 . 3 ) ( default \" 1.2 \" )","title":"Options"},{"location":"operator-manual/server-commands/argocd-server/","text":"argocd-server \u00b6 Run the ArgoCD API server Synopsis \u00b6 The API server is a gRPC/REST server which exposes the API consumed by the Web UI, CLI, and CI/CD systems. This command runs API server in the foreground. It can be configured by following options. argocd - server [ flags ] Options \u00b6 -- app - state - cache - expiration duration Cache expiration for app state ( default 1 h0m0s ) -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- basehref string Value for base href in index . html . Used if Argo CD is running behind reverse proxy under subpath different from / ( default \" / \" ) -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- connection - status - cache - expiration duration Cache expiration for cluster / repo connection status ( default 1 h0m0s ) -- context string The name of the kubeconfig context to use -- default - cache - expiration duration Cache expiration default ( default 24 h0m0s ) -- dex - server string Dex server address ( default \" http://argocd-dex-server:5556 \" ) -- disable - auth Disable client authentication -- enable - gzip Enable GZIP compression -- gloglevel int Set the glog logging level - h , -- help help for argocd - server -- insecure Run server without TLS -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- login - attempts - expiration duration Cache expiration for failed login attempts ( default 24 h0m0s ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- metrics - port int Start metrics on given port ( default 8083 ) - n , -- namespace string If present , the namespace scope for this CLI request -- oidc - cache - expiration duration Cache expiration for OIDC state ( default 3 m0s ) -- password string Password for basic authentication to the API server -- port int Listen on given port ( default 8080 ) -- redis string Redis server hostname and port ( e . g . argocd - redis : 6379 ) . -- redisdb int Redis database . -- repo - server string Repo server address ( default \" argocd-repo-server:8081 \" ) -- repo - server - timeout - seconds int Repo server RPC call timeout seconds . ( default 60 ) -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- rootpath string Used if Argo CD is running behind reverse proxy under subpath different from / -- sentinel stringArray Redis sentinel hostname and port ( e . g . argocd - redis - ha - announce - 0 : 6379 ) . -- sentinelmaster string Redis sentinel master group name . ( default \" master \" ) -- server string The address and port of the Kubernetes API server -- staticassets string Static assets directory path -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- tlsciphers string The list of acceptable ciphers to be used when establishing TLS connections . Use ' list ' to list available ciphers . ( default \" TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_RSA_WITH_AES_256_GCM_SHA384 \" ) -- tlsmaxversion string The maximum SSL / TLS version that is acceptable ( one of : 1 . 0 | 1 . 1 | 1 . 2 | 1 . 3 ) ( default \" 1.3 \" ) -- tlsminversion string The minimum SSL / TLS version that is acceptable ( one of : 1 . 0 | 1 . 1 | 1 . 2 | 1 . 3 ) ( default \" 1.2 \" ) -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server -- x - frame - options value Set X - Frame - Options header in HTTP responses to value . To disable , set to \"\" . ( default \" sameorigin \" ) SEE ALSO \u00b6 argocd-server version - Print version information","title":"Argocd server"},{"location":"operator-manual/server-commands/argocd-server/#argocd-server","text":"Run the ArgoCD API server","title":"argocd-server"},{"location":"operator-manual/server-commands/argocd-server/#synopsis","text":"The API server is a gRPC/REST server which exposes the API consumed by the Web UI, CLI, and CI/CD systems. This command runs API server in the foreground. It can be configured by following options. argocd - server [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-server/#options","text":"-- app - state - cache - expiration duration Cache expiration for app state ( default 1 h0m0s ) -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- basehref string Value for base href in index . html . Used if Argo CD is running behind reverse proxy under subpath different from / ( default \" / \" ) -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- connection - status - cache - expiration duration Cache expiration for cluster / repo connection status ( default 1 h0m0s ) -- context string The name of the kubeconfig context to use -- default - cache - expiration duration Cache expiration default ( default 24 h0m0s ) -- dex - server string Dex server address ( default \" http://argocd-dex-server:5556 \" ) -- disable - auth Disable client authentication -- enable - gzip Enable GZIP compression -- gloglevel int Set the glog logging level - h , -- help help for argocd - server -- insecure Run server without TLS -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- login - attempts - expiration duration Cache expiration for failed login attempts ( default 24 h0m0s ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- metrics - port int Start metrics on given port ( default 8083 ) - n , -- namespace string If present , the namespace scope for this CLI request -- oidc - cache - expiration duration Cache expiration for OIDC state ( default 3 m0s ) -- password string Password for basic authentication to the API server -- port int Listen on given port ( default 8080 ) -- redis string Redis server hostname and port ( e . g . argocd - redis : 6379 ) . -- redisdb int Redis database . -- repo - server string Repo server address ( default \" argocd-repo-server:8081 \" ) -- repo - server - timeout - seconds int Repo server RPC call timeout seconds . ( default 60 ) -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- rootpath string Used if Argo CD is running behind reverse proxy under subpath different from / -- sentinel stringArray Redis sentinel hostname and port ( e . g . argocd - redis - ha - announce - 0 : 6379 ) . -- sentinelmaster string Redis sentinel master group name . ( default \" master \" ) -- server string The address and port of the Kubernetes API server -- staticassets string Static assets directory path -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- tlsciphers string The list of acceptable ciphers to be used when establishing TLS connections . Use ' list ' to list available ciphers . ( default \" TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_RSA_WITH_AES_256_GCM_SHA384 \" ) -- tlsmaxversion string The maximum SSL / TLS version that is acceptable ( one of : 1 . 0 | 1 . 1 | 1 . 2 | 1 . 3 ) ( default \" 1.3 \" ) -- tlsminversion string The minimum SSL / TLS version that is acceptable ( one of : 1 . 0 | 1 . 1 | 1 . 2 | 1 . 3 ) ( default \" 1.2 \" ) -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server -- x - frame - options value Set X - Frame - Options header in HTTP responses to value . To disable , set to \"\" . ( default \" sameorigin \" )","title":"Options"},{"location":"operator-manual/server-commands/argocd-server/#see-also","text":"argocd-server version - Print version information","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-server_version/","text":"argocd-server version \u00b6 Print version information argocd - server version [ flags ] Options \u00b6 - h , -- help help for version -- short print just the version number Options inherited from parent commands \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-server - Run the ArgoCD API server","title":"Argocd server version"},{"location":"operator-manual/server-commands/argocd-server_version/#argocd-server-version","text":"Print version information argocd - server version [ flags ]","title":"argocd-server version"},{"location":"operator-manual/server-commands/argocd-server_version/#options","text":"- h , -- help help for version -- short print just the version number","title":"Options"},{"location":"operator-manual/server-commands/argocd-server_version/#options-inherited-from-parent-commands","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"operator-manual/server-commands/argocd-server_version/#see-also","text":"argocd-server - Run the ArgoCD API server","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util/","text":"argocd-util \u00b6 argocd-util tools used by Argo CD Synopsis \u00b6 argocd-util has internal utility tools used by Argo CD argocd - util [ flags ] Options \u00b6 - h , -- help help for argocd - util -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) SEE ALSO \u00b6 argocd-util apps - Utility commands operate on ArgoCD applications argocd-util config - Generate declarative configuration files argocd-util export - Export all Argo CD data to stdout (default) or a file argocd-util gendexcfg - Generates a dex config from Argo CD settings argocd-util import - Import Argo CD data from stdin (specify `-') or a file argocd-util kubeconfig - Generates kubeconfig for the specified cluster argocd-util projects - Utility commands operate on ArgoCD Projects argocd-util rbac - Validate and test RBAC configuration argocd-util rundex - Runs dex generating a config using settings from the Argo CD configmap and secret argocd-util settings - Provides set of commands for settings validation and troubleshooting argocd-util version - Print version information","title":"argocd-util Tools"},{"location":"operator-manual/server-commands/argocd-util/#argocd-util","text":"argocd-util tools used by Argo CD","title":"argocd-util"},{"location":"operator-manual/server-commands/argocd-util/#synopsis","text":"argocd-util has internal utility tools used by Argo CD argocd - util [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-util/#options","text":"- h , -- help help for argocd - util -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" )","title":"Options"},{"location":"operator-manual/server-commands/argocd-util/#see-also","text":"argocd-util apps - Utility commands operate on ArgoCD applications argocd-util config - Generate declarative configuration files argocd-util export - Export all Argo CD data to stdout (default) or a file argocd-util gendexcfg - Generates a dex config from Argo CD settings argocd-util import - Import Argo CD data from stdin (specify `-') or a file argocd-util kubeconfig - Generates kubeconfig for the specified cluster argocd-util projects - Utility commands operate on ArgoCD Projects argocd-util rbac - Validate and test RBAC configuration argocd-util rundex - Runs dex generating a config using settings from the Argo CD configmap and secret argocd-util settings - Provides set of commands for settings validation and troubleshooting argocd-util version - Print version information","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_apps/","text":"argocd-util apps \u00b6 Utility commands operate on ArgoCD applications argocd - util apps [ flags ] Options \u00b6 - h , -- help help for apps SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD argocd-util apps diff-reconcile-results - Compare results of two reconciliations and print diff. argocd-util apps get-reconcile-results - Reconcile all applications and stores reconciliation summary in the specified file.","title":"Argocd util apps"},{"location":"operator-manual/server-commands/argocd-util_apps/#argocd-util-apps","text":"Utility commands operate on ArgoCD applications argocd - util apps [ flags ]","title":"argocd-util apps"},{"location":"operator-manual/server-commands/argocd-util_apps/#options","text":"- h , -- help help for apps","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_apps/#see-also","text":"argocd-util - argocd-util tools used by Argo CD argocd-util apps diff-reconcile-results - Compare results of two reconciliations and print diff. argocd-util apps get-reconcile-results - Reconcile all applications and stores reconciliation summary in the specified file.","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_apps_diff-reconcile-results/","text":"argocd-util apps diff-reconcile-results \u00b6 Compare results of two reconciliations and print diff. argocd - util apps diff - reconcile - results PATH1 PATH2 [ flags ] Options \u00b6 - h , -- help help for diff - reconcile - results SEE ALSO \u00b6 argocd-util apps - Utility commands operate on ArgoCD applications","title":"Argocd util apps diff reconcile results"},{"location":"operator-manual/server-commands/argocd-util_apps_diff-reconcile-results/#argocd-util-apps-diff-reconcile-results","text":"Compare results of two reconciliations and print diff. argocd - util apps diff - reconcile - results PATH1 PATH2 [ flags ]","title":"argocd-util apps diff-reconcile-results"},{"location":"operator-manual/server-commands/argocd-util_apps_diff-reconcile-results/#options","text":"- h , -- help help for diff - reconcile - results","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_apps_diff-reconcile-results/#see-also","text":"argocd-util apps - Utility commands operate on ArgoCD applications","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_apps_get-reconcile-results/","text":"argocd-util apps get-reconcile-results \u00b6 Reconcile all applications and stores reconciliation summary in the specified file. argocd - util apps get - reconcile - results PATH [ flags ] Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for get - reconcile - results -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- l string Label selector - n , -- namespace string If present , the namespace scope for this CLI request -- o string Output format ( yaml | json ) ( default \" yaml \" ) -- password string Password for basic authentication to the API server -- refresh If set to true then recalculates apps reconciliation -- repo - server string Repo server address . -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util apps - Utility commands operate on ArgoCD applications","title":"Argocd util apps get reconcile results"},{"location":"operator-manual/server-commands/argocd-util_apps_get-reconcile-results/#argocd-util-apps-get-reconcile-results","text":"Reconcile all applications and stores reconciliation summary in the specified file. argocd - util apps get - reconcile - results PATH [ flags ]","title":"argocd-util apps get-reconcile-results"},{"location":"operator-manual/server-commands/argocd-util_apps_get-reconcile-results/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for get - reconcile - results -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- l string Label selector - n , -- namespace string If present , the namespace scope for this CLI request -- o string Output format ( yaml | json ) ( default \" yaml \" ) -- password string Password for basic authentication to the API server -- refresh If set to true then recalculates apps reconciliation -- repo - server string Repo server address . -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_apps_get-reconcile-results/#see-also","text":"argocd-util apps - Utility commands operate on ArgoCD applications","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_config/","text":"argocd-util config \u00b6 Generate declarative configuration files argocd - util config [ flags ] Options \u00b6 - h , -- help help for config SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD argocd-util config app - Generate declarative config for an application argocd-util config cluster - Generate declarative config for a cluster argocd-util config proj - Generate declarative config for a project argocd-util config repo - Generate declarative config for a repo","title":"Argocd util config"},{"location":"operator-manual/server-commands/argocd-util_config/#argocd-util-config","text":"Generate declarative configuration files argocd - util config [ flags ]","title":"argocd-util config"},{"location":"operator-manual/server-commands/argocd-util_config/#options","text":"- h , -- help help for config","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_config/#see-also","text":"argocd-util - argocd-util tools used by Argo CD argocd-util config app - Generate declarative config for an application argocd-util config cluster - Generate declarative config for a cluster argocd-util config proj - Generate declarative config for a project argocd-util config repo - Generate declarative config for a repo","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_config_app/","text":"argocd-util config app \u00b6 Generate declarative config for an application argocd - util config app APPNAME [ flags ] Examples \u00b6 # Generate declarative config for a directory app argocd - util config app guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- directory - recurse # Generate declarative config for a Jsonnet app argocd - util config app jsonnet - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path jsonnet - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- jsonnet - ext - str replicas = 2 # Generate declarative config for a Helm app argocd - util config app helm - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path helm - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- helm - set replicaCount = 2 # Generate declarative config for a Helm app from a Helm repo argocd - util config app nginx - ingress -- repo https : // kubernetes - charts . storage . googleapis . com -- helm - chart nginx - ingress -- revision 1.24 . 3 -- dest - namespace default -- dest - server https : // kubernetes . default . svc # Generate declarative config for a Kustomize app argocd - util config app kustomize - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path kustomize - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- kustomize - image gcr . io / heptio - images / ks - guestbook - demo : 0.1 # Generate declarative config for a app using a custom tool: argocd - util config app ksane -- repo https : // github . com / argoproj / argocd - example - apps . git -- path plugins / kasane -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- config - management - plugin kasane Options \u00b6 -- allow - empty Set allow zero live resources when sync is automated -- auto - prune Set automatic pruning when sync is automated -- config - management - plugin string Config management plugin name -- dest - name string K8s cluster Name ( e . g . minikube ) -- dest - namespace string K8s target namespace ( overrides the namespace specified in the ksonnet app . yaml ) -- dest - server string K8s cluster URL ( e . g . https : // kubernetes . default . svc ) -- directory - exclude string Set glob expression used to exclude files from application source path -- directory - include string Set glob expression used to include files from application source path -- directory - recurse Recurse directory -- env string Application environment to monitor - f , -- file string Filename or URL to Kubernetes manifests for the app -- helm - chart string Helm Chart name -- helm - set stringArray Helm set values on the command line ( can be repeated to set several values : -- helm - set key1 = val1 -- helm - set key2 = val2 ) -- helm - set - file stringArray Helm set values from respective files specified via the command line ( can be repeated to set several values : -- helm - set - file key1 = path1 -- helm - set - file key2 = path2 ) -- helm - set - string stringArray Helm set STRING values on the command line ( can be repeated to set several values : -- helm - set - string key1 = val1 -- helm - set - string key2 = val2 ) -- helm - version string Helm version - h , -- help help for app -- jsonnet - ext - var - code stringArray Jsonnet ext var -- jsonnet - ext - var - str stringArray Jsonnet string ext var -- jsonnet - libs stringArray Additional jsonnet libs ( prefixed by repoRoot ) -- jsonnet - tla - code stringArray Jsonnet top level code arguments -- jsonnet - tla - str stringArray Jsonnet top level string arguments -- kustomize - common - annotation stringArray Set common labels in Kustomize -- kustomize - common - label stringArray Set common labels in Kustomize -- kustomize - image stringArray Kustomize images ( e . g . -- kustomize - image node : 8.15 . 0 -- kustomize - image mysql = mariadb , alpine @ sha256 : 24 a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d ) -- kustomize - version string Kustomize version - l , -- label stringArray Labels to apply to the app -- name string A name for the app , ignored if a file is set ( DEPRECATED ) -- nameprefix string Kustomize nameprefix -- namesuffix string Kustomize namesuffix - o , -- output string Output format . One of : json | yaml ( default \"yaml\" ) - p , -- parameter stringArray set a parameter override ( e . g . - p guestbook = image = example / guestbook : latest ) -- path string Path in repository to the app directory , ignored if a file is set -- plugin - env stringArray Additional plugin envs -- project string Application project name -- release - name string Helm release - name -- repo string Repository URL , ignored if a file is set -- revision string The tracking source branch , tag , commit or Helm chart version the application will sync to -- revision - history - limit int How many items to keep in revision history ( default 10 ) -- self - heal Set self healing when sync is automated -- sync - option Prune = false Add or remove a sync options , e . g add Prune = false . Remove using ` ! ` prefix , e . g . ` ! Prune = false ` -- sync - policy string Set the sync policy ( one of : none , automated ( aliases of automated : auto , automatic )) -- validate Validation of repo and cluster ( default true ) -- values stringArray Helm values file ( s ) to use -- values - literal - file string Filename or URL to import as a literal Helm values block SEE ALSO \u00b6 argocd-util config - Generate declarative configuration files","title":"Argocd util config app"},{"location":"operator-manual/server-commands/argocd-util_config_app/#argocd-util-config-app","text":"Generate declarative config for an application argocd - util config app APPNAME [ flags ]","title":"argocd-util config app"},{"location":"operator-manual/server-commands/argocd-util_config_app/#examples","text":"# Generate declarative config for a directory app argocd - util config app guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- directory - recurse # Generate declarative config for a Jsonnet app argocd - util config app jsonnet - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path jsonnet - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- jsonnet - ext - str replicas = 2 # Generate declarative config for a Helm app argocd - util config app helm - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path helm - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- helm - set replicaCount = 2 # Generate declarative config for a Helm app from a Helm repo argocd - util config app nginx - ingress -- repo https : // kubernetes - charts . storage . googleapis . com -- helm - chart nginx - ingress -- revision 1.24 . 3 -- dest - namespace default -- dest - server https : // kubernetes . default . svc # Generate declarative config for a Kustomize app argocd - util config app kustomize - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path kustomize - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- kustomize - image gcr . io / heptio - images / ks - guestbook - demo : 0.1 # Generate declarative config for a app using a custom tool: argocd - util config app ksane -- repo https : // github . com / argoproj / argocd - example - apps . git -- path plugins / kasane -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- config - management - plugin kasane","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_config_app/#options","text":"-- allow - empty Set allow zero live resources when sync is automated -- auto - prune Set automatic pruning when sync is automated -- config - management - plugin string Config management plugin name -- dest - name string K8s cluster Name ( e . g . minikube ) -- dest - namespace string K8s target namespace ( overrides the namespace specified in the ksonnet app . yaml ) -- dest - server string K8s cluster URL ( e . g . https : // kubernetes . default . svc ) -- directory - exclude string Set glob expression used to exclude files from application source path -- directory - include string Set glob expression used to include files from application source path -- directory - recurse Recurse directory -- env string Application environment to monitor - f , -- file string Filename or URL to Kubernetes manifests for the app -- helm - chart string Helm Chart name -- helm - set stringArray Helm set values on the command line ( can be repeated to set several values : -- helm - set key1 = val1 -- helm - set key2 = val2 ) -- helm - set - file stringArray Helm set values from respective files specified via the command line ( can be repeated to set several values : -- helm - set - file key1 = path1 -- helm - set - file key2 = path2 ) -- helm - set - string stringArray Helm set STRING values on the command line ( can be repeated to set several values : -- helm - set - string key1 = val1 -- helm - set - string key2 = val2 ) -- helm - version string Helm version - h , -- help help for app -- jsonnet - ext - var - code stringArray Jsonnet ext var -- jsonnet - ext - var - str stringArray Jsonnet string ext var -- jsonnet - libs stringArray Additional jsonnet libs ( prefixed by repoRoot ) -- jsonnet - tla - code stringArray Jsonnet top level code arguments -- jsonnet - tla - str stringArray Jsonnet top level string arguments -- kustomize - common - annotation stringArray Set common labels in Kustomize -- kustomize - common - label stringArray Set common labels in Kustomize -- kustomize - image stringArray Kustomize images ( e . g . -- kustomize - image node : 8.15 . 0 -- kustomize - image mysql = mariadb , alpine @ sha256 : 24 a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d ) -- kustomize - version string Kustomize version - l , -- label stringArray Labels to apply to the app -- name string A name for the app , ignored if a file is set ( DEPRECATED ) -- nameprefix string Kustomize nameprefix -- namesuffix string Kustomize namesuffix - o , -- output string Output format . One of : json | yaml ( default \"yaml\" ) - p , -- parameter stringArray set a parameter override ( e . g . - p guestbook = image = example / guestbook : latest ) -- path string Path in repository to the app directory , ignored if a file is set -- plugin - env stringArray Additional plugin envs -- project string Application project name -- release - name string Helm release - name -- repo string Repository URL , ignored if a file is set -- revision string The tracking source branch , tag , commit or Helm chart version the application will sync to -- revision - history - limit int How many items to keep in revision history ( default 10 ) -- self - heal Set self healing when sync is automated -- sync - option Prune = false Add or remove a sync options , e . g add Prune = false . Remove using ` ! ` prefix , e . g . ` ! Prune = false ` -- sync - policy string Set the sync policy ( one of : none , automated ( aliases of automated : auto , automatic )) -- validate Validation of repo and cluster ( default true ) -- values stringArray Helm values file ( s ) to use -- values - literal - file string Filename or URL to import as a literal Helm values block","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_config_app/#see-also","text":"argocd-util config - Generate declarative configuration files","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_config_cluster/","text":"argocd-util config cluster \u00b6 Generate declarative config for a cluster argocd - util config cluster CONTEXT [ flags ] Options \u00b6 -- aws - cluster - name string AWS Cluster name if set then aws cli eks token command will be used to access cluster -- aws - role - arn string Optional AWS role arn . If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain . -- bearer - token string Authentication token that should be used to access K8S API server -- exec - command string Command to run to provide client credentials to the cluster . You may need to build a custom ArgoCD image to ensure the command is available at runtime . -- exec - command - api - version string Preferred input version of the ExecInfo for the -- exec - command -- exec - command - args stringArray Arguments to supply to the -- exec - command command -- exec - command - env stringToString Environment vars to set when running the -- exec - command command ( default []) -- exec - command - install - hint string Text shown to the user when the -- exec - command executable doesn 't seem to be present - h , -- help help for cluster -- in - cluster Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname ( kubernetes . default . svc ) -- kubeconfig string use a particular kubeconfig file -- name string Overwrite the cluster name -- namespace stringArray List of namespaces which are allowed to manage - o , -- output string Output format . One of : json | yaml ( default \"yaml\" ) -- shard int Cluster shard number ; inferred from hostname if not set ( default - 1 ) SEE ALSO \u00b6 argocd-util config - Generate declarative configuration files","title":"Argocd util config cluster"},{"location":"operator-manual/server-commands/argocd-util_config_cluster/#argocd-util-config-cluster","text":"Generate declarative config for a cluster argocd - util config cluster CONTEXT [ flags ]","title":"argocd-util config cluster"},{"location":"operator-manual/server-commands/argocd-util_config_cluster/#options","text":"-- aws - cluster - name string AWS Cluster name if set then aws cli eks token command will be used to access cluster -- aws - role - arn string Optional AWS role arn . If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain . -- bearer - token string Authentication token that should be used to access K8S API server -- exec - command string Command to run to provide client credentials to the cluster . You may need to build a custom ArgoCD image to ensure the command is available at runtime . -- exec - command - api - version string Preferred input version of the ExecInfo for the -- exec - command -- exec - command - args stringArray Arguments to supply to the -- exec - command command -- exec - command - env stringToString Environment vars to set when running the -- exec - command command ( default []) -- exec - command - install - hint string Text shown to the user when the -- exec - command executable doesn 't seem to be present - h , -- help help for cluster -- in - cluster Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname ( kubernetes . default . svc ) -- kubeconfig string use a particular kubeconfig file -- name string Overwrite the cluster name -- namespace stringArray List of namespaces which are allowed to manage - o , -- output string Output format . One of : json | yaml ( default \"yaml\" ) -- shard int Cluster shard number ; inferred from hostname if not set ( default - 1 )","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_config_cluster/#see-also","text":"argocd-util config - Generate declarative configuration files","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_config_proj/","text":"argocd-util config proj \u00b6 Generate declarative config for a project argocd - util config proj PROJECT [ flags ] Options \u00b6 -- description string Project description - d , -- dest stringArray Permitted destination server and namespace ( e . g . https : // 192 . 168 . 99 . 100 : 8443 , default ) - f , -- file string Filename or URL to Kubernetes manifests for the project - h , -- help help for proj -- orphaned - resources Enables orphaned resources monitoring -- orphaned - resources - warn Specifies if applications should be a warning condition when orphaned resources detected - o , -- output string Output format . One of : json | yaml ( default \" yaml \" ) -- signature - keys strings GnuPG public key IDs for commit signature verification - s , -- src stringArray Permitted source repository URL SEE ALSO \u00b6 argocd-util config - Generate declarative configuration files","title":"Argocd util config proj"},{"location":"operator-manual/server-commands/argocd-util_config_proj/#argocd-util-config-proj","text":"Generate declarative config for a project argocd - util config proj PROJECT [ flags ]","title":"argocd-util config proj"},{"location":"operator-manual/server-commands/argocd-util_config_proj/#options","text":"-- description string Project description - d , -- dest stringArray Permitted destination server and namespace ( e . g . https : // 192 . 168 . 99 . 100 : 8443 , default ) - f , -- file string Filename or URL to Kubernetes manifests for the project - h , -- help help for proj -- orphaned - resources Enables orphaned resources monitoring -- orphaned - resources - warn Specifies if applications should be a warning condition when orphaned resources detected - o , -- output string Output format . One of : json | yaml ( default \" yaml \" ) -- signature - keys strings GnuPG public key IDs for commit signature verification - s , -- src stringArray Permitted source repository URL","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_config_proj/#see-also","text":"argocd-util config - Generate declarative configuration files","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_config_repo/","text":"argocd-util config repo \u00b6 Generate declarative config for a repo argocd - util config repo REPOURL [ flags ] Examples \u00b6 # Add a Git repository via SSH using a private key for authentication , ignoring the server 's host key: argocd-util config repo git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here argocd-util config repo ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa # Add a private Git repository via HTTPS using username/password and TLS client certificates: argocd-util config repo https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key # Add a private Git repository via HTTPS using username/password without verifying the server' s TLS certificate argocd - util config repo https : // git . example . com / repos / repo -- username git -- password secret -- insecure - skip - server - verification # Add a public Helm repository named 'stable' via HTTPS argocd - util config repo https : // kubernetes - charts . storage . googleapis . com -- type helm -- name stable # Add a private Helm repository named 'stable' via HTTPS argocd - util config repo https : // kubernetes - charts . storage . googleapis . com -- type helm -- name stable -- username test -- password test # Add a private Helm OCI - based repository named 'stable' via HTTPS argocd - util config repo helm - oci - registry . cn - zhangjiakou . cr . aliyuncs . com --type helm --name stable --enable-oci --username test --password test Options \u00b6 -- enable - lfs enable git - lfs ( Large File Support ) on this repository -- enable - oci enable helm - oci ( Helm OCI - Based Repository ) - h , -- help help for repo -- insecure - ignore - host - key disables SSH strict host key checking ( deprecated , use -- insecure - skip - server - verification instead ) -- insecure - skip - server - verification disables server certificate and host key checks -- name string name of the repository , mandatory for repositories of type helm - o , -- output string Output format . One of : json | yaml ( default \" yaml \" ) -- password string password to the repository -- ssh - private - key - path string path to the private ssh key ( e . g . ~/ . ssh / id_rsa ) -- tls - client - cert - key - path string path to the TLS client cert ' s key path (must be PEM format) -- tls - client - cert - path string path to the TLS client cert ( must be PEM format ) -- type string type of the repository , \" git \" or \" helm \" ( default \" git \" ) -- username string username to the repository SEE ALSO \u00b6 argocd-util config - Generate declarative configuration files","title":"Argocd util config repo"},{"location":"operator-manual/server-commands/argocd-util_config_repo/#argocd-util-config-repo","text":"Generate declarative config for a repo argocd - util config repo REPOURL [ flags ]","title":"argocd-util config repo"},{"location":"operator-manual/server-commands/argocd-util_config_repo/#examples","text":"# Add a Git repository via SSH using a private key for authentication , ignoring the server 's host key: argocd-util config repo git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here argocd-util config repo ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa # Add a private Git repository via HTTPS using username/password and TLS client certificates: argocd-util config repo https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key # Add a private Git repository via HTTPS using username/password without verifying the server' s TLS certificate argocd - util config repo https : // git . example . com / repos / repo -- username git -- password secret -- insecure - skip - server - verification # Add a public Helm repository named 'stable' via HTTPS argocd - util config repo https : // kubernetes - charts . storage . googleapis . com -- type helm -- name stable # Add a private Helm repository named 'stable' via HTTPS argocd - util config repo https : // kubernetes - charts . storage . googleapis . com -- type helm -- name stable -- username test -- password test # Add a private Helm OCI - based repository named 'stable' via HTTPS argocd - util config repo helm - oci - registry . cn - zhangjiakou . cr . aliyuncs . com --type helm --name stable --enable-oci --username test --password test","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_config_repo/#options","text":"-- enable - lfs enable git - lfs ( Large File Support ) on this repository -- enable - oci enable helm - oci ( Helm OCI - Based Repository ) - h , -- help help for repo -- insecure - ignore - host - key disables SSH strict host key checking ( deprecated , use -- insecure - skip - server - verification instead ) -- insecure - skip - server - verification disables server certificate and host key checks -- name string name of the repository , mandatory for repositories of type helm - o , -- output string Output format . One of : json | yaml ( default \" yaml \" ) -- password string password to the repository -- ssh - private - key - path string path to the private ssh key ( e . g . ~/ . ssh / id_rsa ) -- tls - client - cert - key - path string path to the TLS client cert ' s key path (must be PEM format) -- tls - client - cert - path string path to the TLS client cert ( must be PEM format ) -- type string type of the repository , \" git \" or \" helm \" ( default \" git \" ) -- username string username to the repository","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_config_repo/#see-also","text":"argocd-util config - Generate declarative configuration files","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_export/","text":"argocd-util export \u00b6 Export all Argo CD data to stdout (default) or a file argocd - util export [ flags ] Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for export -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request - o , -- out string Output to the specified file instead of stdout ( default \"-\" ) -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD","title":"Argocd util export"},{"location":"operator-manual/server-commands/argocd-util_export/#argocd-util-export","text":"Export all Argo CD data to stdout (default) or a file argocd - util export [ flags ]","title":"argocd-util export"},{"location":"operator-manual/server-commands/argocd-util_export/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for export -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request - o , -- out string Output to the specified file instead of stdout ( default \"-\" ) -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_export/#see-also","text":"argocd-util - argocd-util tools used by Argo CD","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_gendexcfg/","text":"argocd-util gendexcfg \u00b6 Generates a dex config from Argo CD settings argocd - util gendexcfg [ flags ] Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for gendexcfg -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request - o , -- out string Output to the specified file instead of stdout -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD","title":"Argocd util gendexcfg"},{"location":"operator-manual/server-commands/argocd-util_gendexcfg/#argocd-util-gendexcfg","text":"Generates a dex config from Argo CD settings argocd - util gendexcfg [ flags ]","title":"argocd-util gendexcfg"},{"location":"operator-manual/server-commands/argocd-util_gendexcfg/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for gendexcfg -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request - o , -- out string Output to the specified file instead of stdout -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_gendexcfg/#see-also","text":"argocd-util - argocd-util tools used by Argo CD","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_import/","text":"argocd-util import \u00b6 Import Argo CD data from stdin (specify `-') or a file argocd - util import SOURCE [ flags ] Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- dry - run Print what will be performed - h , -- help help for import -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- prune Prune secrets , applications and projects which do not appear in the backup -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD","title":"Argocd util import"},{"location":"operator-manual/server-commands/argocd-util_import/#argocd-util-import","text":"Import Argo CD data from stdin (specify `-') or a file argocd - util import SOURCE [ flags ]","title":"argocd-util import"},{"location":"operator-manual/server-commands/argocd-util_import/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- dry - run Print what will be performed - h , -- help help for import -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- prune Prune secrets , applications and projects which do not appear in the backup -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_import/#see-also","text":"argocd-util - argocd-util tools used by Argo CD","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_kubeconfig/","text":"argocd-util kubeconfig \u00b6 Generates kubeconfig for the specified cluster argocd - util kubeconfig CLUSTER_URL OUTPUT_PATH [ flags ] Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for kubeconfig -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD","title":"Argocd util kubeconfig"},{"location":"operator-manual/server-commands/argocd-util_kubeconfig/#argocd-util-kubeconfig","text":"Generates kubeconfig for the specified cluster argocd - util kubeconfig CLUSTER_URL OUTPUT_PATH [ flags ]","title":"argocd-util kubeconfig"},{"location":"operator-manual/server-commands/argocd-util_kubeconfig/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for kubeconfig -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_kubeconfig/#see-also","text":"argocd-util - argocd-util tools used by Argo CD","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_projects/","text":"argocd-util projects \u00b6 Utility commands operate on ArgoCD Projects argocd - util projects [ flags ] Options \u00b6 - h , -- help help for projects SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD argocd-util projects generate-allow-list - Generates project allow list from the specified clusterRole file argocd-util projects update-role-policy - Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.","title":"Argocd util projects"},{"location":"operator-manual/server-commands/argocd-util_projects/#argocd-util-projects","text":"Utility commands operate on ArgoCD Projects argocd - util projects [ flags ]","title":"argocd-util projects"},{"location":"operator-manual/server-commands/argocd-util_projects/#options","text":"- h , -- help help for projects","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_projects/#see-also","text":"argocd-util - argocd-util tools used by Argo CD argocd-util projects generate-allow-list - Generates project allow list from the specified clusterRole file argocd-util projects update-role-policy - Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_projects_generate-allow-list/","text":"argocd-util projects generate-allow-list \u00b6 Generates project allow list from the specified clusterRole file argocd - util projects generate - allow - list CLUSTERROLE_PATH PROJ_NAME [ flags ] Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for generate - allow - list -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request - o , -- out string Output to the specified file instead of stdout ( default \" - \" ) -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util projects - Utility commands operate on ArgoCD Projects","title":"Argocd util projects generate allow list"},{"location":"operator-manual/server-commands/argocd-util_projects_generate-allow-list/#argocd-util-projects-generate-allow-list","text":"Generates project allow list from the specified clusterRole file argocd - util projects generate - allow - list CLUSTERROLE_PATH PROJ_NAME [ flags ]","title":"argocd-util projects generate-allow-list"},{"location":"operator-manual/server-commands/argocd-util_projects_generate-allow-list/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for generate - allow - list -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request - o , -- out string Output to the specified file instead of stdout ( default \" - \" ) -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_projects_generate-allow-list/#see-also","text":"argocd-util projects - Utility commands operate on ArgoCD Projects","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_projects_update-role-policy/","text":"argocd-util projects update-role-policy \u00b6 Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions. argocd - util projects update - role - policy PROJECT_GLOB MODIFICATION ACTION [ flags ] Examples \u00b6 # Add policy that allows executing any action (action/*) to roles which name matches to *deployer* in all projects argocd-util projects update-role-policy '*' set 'action/*' --role '*deployer*' --resource applications --scope '*' --permission allow # Remove policy that which manages running (action/*) from all roles which name matches *deployer* in all projects argocd-util projects update-role-policy '*' remove override --role '*deployer*' Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- dry - run Dry run ( default true ) - h , -- help help for update - role - policy -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- permission string Action permission -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- resource string Resource e . g . ' applications ' -- role string Role name pattern e . g . ' *deployer* ' ( default \" * \" ) -- scope string Resource scope e . g . ' * ' -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util projects - Utility commands operate on ArgoCD Projects","title":"Argocd util projects update role policy"},{"location":"operator-manual/server-commands/argocd-util_projects_update-role-policy/#argocd-util-projects-update-role-policy","text":"Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions. argocd - util projects update - role - policy PROJECT_GLOB MODIFICATION ACTION [ flags ]","title":"argocd-util projects update-role-policy"},{"location":"operator-manual/server-commands/argocd-util_projects_update-role-policy/#examples","text":"# Add policy that allows executing any action (action/*) to roles which name matches to *deployer* in all projects argocd-util projects update-role-policy '*' set 'action/*' --role '*deployer*' --resource applications --scope '*' --permission allow # Remove policy that which manages running (action/*) from all roles which name matches *deployer* in all projects argocd-util projects update-role-policy '*' remove override --role '*deployer*'","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_projects_update-role-policy/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- dry - run Dry run ( default true ) - h , -- help help for update - role - policy -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- permission string Action permission -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- resource string Resource e . g . ' applications ' -- role string Role name pattern e . g . ' *deployer* ' ( default \" * \" ) -- scope string Resource scope e . g . ' * ' -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_projects_update-role-policy/#see-also","text":"argocd-util projects - Utility commands operate on ArgoCD Projects","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_rbac/","text":"argocd-util rbac \u00b6 Validate and test RBAC configuration argocd - util rbac [ flags ] Options \u00b6 - h , -- help help for rbac SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD argocd-util rbac can - Check RBAC permissions for a role or subject argocd-util rbac validate - Validate RBAC policy","title":"Argocd util rbac"},{"location":"operator-manual/server-commands/argocd-util_rbac/#argocd-util-rbac","text":"Validate and test RBAC configuration argocd - util rbac [ flags ]","title":"argocd-util rbac"},{"location":"operator-manual/server-commands/argocd-util_rbac/#options","text":"- h , -- help help for rbac","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_rbac/#see-also","text":"argocd-util - argocd-util tools used by Argo CD argocd-util rbac can - Check RBAC permissions for a role or subject argocd-util rbac validate - Validate RBAC policy","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_rbac_can/","text":"argocd-util rbac can \u00b6 Check RBAC permissions for a role or subject Synopsis \u00b6 Check whether a given role or subject has appropriate RBAC permissions to do something. argocd - util rbac can ROLE / SUBJECT ACTION RESOURCE [ SUB-RESOURCE ] [ flags ] Examples \u00b6 # Check whether role some : role has permissions to create an application in the # ' default ' project , using a local policy . csv file argocd - util rbac can some : role create application ' default/app ' -- policy - file policy . csv # Policy file can also be K8s config map with data keys like argocd - rbac - cm , # i . e . ' policy.csv ' and ( optionally ) ' policy.default ' argocd - util rbac can some : role create application ' default/app ' -- policy - file argocd - rbac - cm . yaml # If -- policy - file is not given , the ConfigMap ' argocd-rbac-cm ' from K8s is # used . You need to specify the argocd namespace , and make sure that your # current Kubernetes context is pointing to the cluster Argo CD is running in argocd - util rbac can some : role create application ' default/app ' -- namespace argocd # You can override a possibly configured default role argocd - util rbac can someuser create application ' default/app ' -- default - role role : readonly Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- default - role string name of the default role to use - h , -- help help for can -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- policy - file string path to the policy file to use - q , -- quiet quiet mode - do not print results to stdout -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- strict whether to perform strict check on action and resource names ( default true ) -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- use - builtin - policy whether to also use builtin - policy ( default true ) -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util rbac - Validate and test RBAC configuration","title":"Argocd util rbac can"},{"location":"operator-manual/server-commands/argocd-util_rbac_can/#argocd-util-rbac-can","text":"Check RBAC permissions for a role or subject","title":"argocd-util rbac can"},{"location":"operator-manual/server-commands/argocd-util_rbac_can/#synopsis","text":"Check whether a given role or subject has appropriate RBAC permissions to do something. argocd - util rbac can ROLE / SUBJECT ACTION RESOURCE [ SUB-RESOURCE ] [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-util_rbac_can/#examples","text":"# Check whether role some : role has permissions to create an application in the # ' default ' project , using a local policy . csv file argocd - util rbac can some : role create application ' default/app ' -- policy - file policy . csv # Policy file can also be K8s config map with data keys like argocd - rbac - cm , # i . e . ' policy.csv ' and ( optionally ) ' policy.default ' argocd - util rbac can some : role create application ' default/app ' -- policy - file argocd - rbac - cm . yaml # If -- policy - file is not given , the ConfigMap ' argocd-rbac-cm ' from K8s is # used . You need to specify the argocd namespace , and make sure that your # current Kubernetes context is pointing to the cluster Argo CD is running in argocd - util rbac can some : role create application ' default/app ' -- namespace argocd # You can override a possibly configured default role argocd - util rbac can someuser create application ' default/app ' -- default - role role : readonly","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_rbac_can/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- default - role string name of the default role to use - h , -- help help for can -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- policy - file string path to the policy file to use - q , -- quiet quiet mode - do not print results to stdout -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- strict whether to perform strict check on action and resource names ( default true ) -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- use - builtin - policy whether to also use builtin - policy ( default true ) -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_rbac_can/#see-also","text":"argocd-util rbac - Validate and test RBAC configuration","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_rbac_validate/","text":"argocd-util rbac validate \u00b6 Validate RBAC policy Synopsis \u00b6 Validates an RBAC policy for being syntactically correct. The policy must be a local file, and in either CSV or K8s ConfigMap format. argocd - util rbac validate --policy-file=POLICYFILE [flags] Options \u00b6 - h , -- help help for validate -- policy - file string path to the policy file to use SEE ALSO \u00b6 argocd-util rbac - Validate and test RBAC configuration","title":"Argocd util rbac validate"},{"location":"operator-manual/server-commands/argocd-util_rbac_validate/#argocd-util-rbac-validate","text":"Validate RBAC policy","title":"argocd-util rbac validate"},{"location":"operator-manual/server-commands/argocd-util_rbac_validate/#synopsis","text":"Validates an RBAC policy for being syntactically correct. The policy must be a local file, and in either CSV or K8s ConfigMap format. argocd - util rbac validate --policy-file=POLICYFILE [flags]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-util_rbac_validate/#options","text":"- h , -- help help for validate -- policy - file string path to the policy file to use","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_rbac_validate/#see-also","text":"argocd-util rbac - Validate and test RBAC configuration","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_rundex/","text":"argocd-util rundex \u00b6 Runs dex generating a config using settings from the Argo CD configmap and secret argocd - util rundex [ flags ] Options \u00b6 -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for rundex -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD","title":"Argocd util rundex"},{"location":"operator-manual/server-commands/argocd-util_rundex/#argocd-util-rundex","text":"Runs dex generating a config using settings from the Argo CD configmap and secret argocd - util rundex [ flags ]","title":"argocd-util rundex"},{"location":"operator-manual/server-commands/argocd-util_rundex/#options","text":"-- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for rundex -- insecure - skip - tls - verify If true , the server ' s certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don ' t timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_rundex/#see-also","text":"argocd-util - argocd-util tools used by Argo CD","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_settings/","text":"argocd-util settings \u00b6 Provides set of commands for settings validation and troubleshooting argocd - util settings [ flags ] Options \u00b6 -- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for settings -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD argocd-util settings resource-overrides - Troubleshoot resource overrides argocd-util settings validate - Validate settings","title":"Argocd util settings"},{"location":"operator-manual/server-commands/argocd-util_settings/#argocd-util-settings","text":"Provides set of commands for settings validation and troubleshooting argocd - util settings [ flags ]","title":"argocd-util settings"},{"location":"operator-manual/server-commands/argocd-util_settings/#options","text":"-- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use - h , -- help help for settings -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_settings/#see-also","text":"argocd-util - argocd-util tools used by Argo CD argocd-util settings resource-overrides - Troubleshoot resource overrides argocd-util settings validate - Validate settings","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides/","text":"argocd-util settings resource-overrides \u00b6 Troubleshoot resource overrides argocd - util settings resource - overrides [ flags ] Options \u00b6 - h , -- help help for resource - overrides Options inherited from parent commands \u00b6 -- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util settings - Provides set of commands for settings validation and troubleshooting argocd-util settings resource-overrides health - Assess resource health argocd-util settings resource-overrides ignore-differences - Renders fields excluded from diffing argocd-util settings resource-overrides list-actions - List available resource actions argocd-util settings resource-overrides run-action - Executes resource action","title":"Argocd util settings resource overrides"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides/#argocd-util-settings-resource-overrides","text":"Troubleshoot resource overrides argocd - util settings resource - overrides [ flags ]","title":"argocd-util settings resource-overrides"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides/#options","text":"- h , -- help help for resource - overrides","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides/#options-inherited-from-parent-commands","text":"-- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides/#see-also","text":"argocd-util settings - Provides set of commands for settings validation and troubleshooting argocd-util settings resource-overrides health - Assess resource health argocd-util settings resource-overrides ignore-differences - Renders fields excluded from diffing argocd-util settings resource-overrides list-actions - List available resource actions argocd-util settings resource-overrides run-action - Executes resource action","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_health/","text":"argocd-util settings resource-overrides health \u00b6 Assess resource health Synopsis \u00b6 Assess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap argocd - util settings resource - overrides health RESOURCE_YAML_PATH [ flags ] Examples \u00b6 argocd-util settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml Options \u00b6 - h , -- help help for health Options inherited from parent commands \u00b6 -- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util settings resource-overrides - Troubleshoot resource overrides","title":"Argocd util settings resource overrides health"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_health/#argocd-util-settings-resource-overrides-health","text":"Assess resource health","title":"argocd-util settings resource-overrides health"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_health/#synopsis","text":"Assess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap argocd - util settings resource - overrides health RESOURCE_YAML_PATH [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_health/#examples","text":"argocd-util settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_health/#options","text":"- h , -- help help for health","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_health/#options-inherited-from-parent-commands","text":"-- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_health/#see-also","text":"argocd-util settings resource-overrides - Troubleshoot resource overrides","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_ignore-differences/","text":"argocd-util settings resource-overrides ignore-differences \u00b6 Renders fields excluded from diffing Synopsis \u00b6 Renders ignored fields using the 'ignoreDifferences' setting specified in the 'resource.customizations' field of 'argocd-cm' ConfigMap argocd - util settings resource - overrides ignore - differences RESOURCE_YAML_PATH [ flags ] Examples \u00b6 argocd-util settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml Options \u00b6 - h , -- help help for ignore - differences Options inherited from parent commands \u00b6 -- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util settings resource-overrides - Troubleshoot resource overrides","title":"Argocd util settings resource overrides ignore differences"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_ignore-differences/#argocd-util-settings-resource-overrides-ignore-differences","text":"Renders fields excluded from diffing","title":"argocd-util settings resource-overrides ignore-differences"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_ignore-differences/#synopsis","text":"Renders ignored fields using the 'ignoreDifferences' setting specified in the 'resource.customizations' field of 'argocd-cm' ConfigMap argocd - util settings resource - overrides ignore - differences RESOURCE_YAML_PATH [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_ignore-differences/#examples","text":"argocd-util settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_ignore-differences/#options","text":"- h , -- help help for ignore - differences","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_ignore-differences/#options-inherited-from-parent-commands","text":"-- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_ignore-differences/#see-also","text":"argocd-util settings resource-overrides - Troubleshoot resource overrides","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_list-actions/","text":"argocd-util settings resource-overrides list-actions \u00b6 List available resource actions Synopsis \u00b6 List actions available for given resource action using the lua scripts configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields argocd - util settings resource - overrides list - actions RESOURCE_YAML_PATH [ flags ] Examples \u00b6 argocd-util settings resource-overrides action list /tmp/deploy.yaml --argocd-cm-path ./argocd-cm.yaml Options \u00b6 - h , -- help help for list - actions Options inherited from parent commands \u00b6 -- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util settings resource-overrides - Troubleshoot resource overrides","title":"Argocd util settings resource overrides list actions"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_list-actions/#argocd-util-settings-resource-overrides-list-actions","text":"List available resource actions","title":"argocd-util settings resource-overrides list-actions"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_list-actions/#synopsis","text":"List actions available for given resource action using the lua scripts configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields argocd - util settings resource - overrides list - actions RESOURCE_YAML_PATH [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_list-actions/#examples","text":"argocd-util settings resource-overrides action list /tmp/deploy.yaml --argocd-cm-path ./argocd-cm.yaml","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_list-actions/#options","text":"- h , -- help help for list - actions","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_list-actions/#options-inherited-from-parent-commands","text":"-- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_list-actions/#see-also","text":"argocd-util settings resource-overrides - Troubleshoot resource overrides","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_run-action/","text":"argocd-util settings resource-overrides run-action \u00b6 Executes resource action Synopsis \u00b6 Executes resource action using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields argocd - util settings resource - overrides run - action RESOURCE_YAML_PATH ACTION [ flags ] Examples \u00b6 argocd-util settings resource-overrides action run /tmp/deploy.yaml restart --argocd-cm-path ./argocd-cm.yaml Options \u00b6 - h , -- help help for run - action Options inherited from parent commands \u00b6 -- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util settings resource-overrides - Troubleshoot resource overrides","title":"Argocd util settings resource overrides run action"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_run-action/#argocd-util-settings-resource-overrides-run-action","text":"Executes resource action","title":"argocd-util settings resource-overrides run-action"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_run-action/#synopsis","text":"Executes resource action using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields argocd - util settings resource - overrides run - action RESOURCE_YAML_PATH ACTION [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_run-action/#examples","text":"argocd-util settings resource-overrides action run /tmp/deploy.yaml restart --argocd-cm-path ./argocd-cm.yaml","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_run-action/#options","text":"- h , -- help help for run - action","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_run-action/#options-inherited-from-parent-commands","text":"-- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"operator-manual/server-commands/argocd-util_settings_resource-overrides_run-action/#see-also","text":"argocd-util settings resource-overrides - Troubleshoot resource overrides","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_settings_validate/","text":"argocd-util settings validate \u00b6 Validate settings Synopsis \u00b6 Validates settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret argocd - util settings validate [ flags ] Examples \u00b6 #Validates all settings in the specified YAML file argocd - util settings validate -- argocd - cm - path ./ argocd - cm . yaml #Validates accounts and plugins settings in Kubernetes cluster of current kubeconfig context argocd - util settings validate -- group accounts -- group plugins -- load - cluster - settings Options \u00b6 -- group stringArray Optional list of setting groups that have to be validated ( one of : accounts , general , kustomize , plugins , repositories , resource - overrides ) - h , -- help help for validate Options inherited from parent commands \u00b6 -- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server SEE ALSO \u00b6 argocd-util settings - Provides set of commands for settings validation and troubleshooting","title":"Argocd util settings validate"},{"location":"operator-manual/server-commands/argocd-util_settings_validate/#argocd-util-settings-validate","text":"Validate settings","title":"argocd-util settings validate"},{"location":"operator-manual/server-commands/argocd-util_settings_validate/#synopsis","text":"Validates settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret argocd - util settings validate [ flags ]","title":"Synopsis"},{"location":"operator-manual/server-commands/argocd-util_settings_validate/#examples","text":"#Validates all settings in the specified YAML file argocd - util settings validate -- argocd - cm - path ./ argocd - cm . yaml #Validates accounts and plugins settings in Kubernetes cluster of current kubeconfig context argocd - util settings validate -- group accounts -- group plugins -- load - cluster - settings","title":"Examples"},{"location":"operator-manual/server-commands/argocd-util_settings_validate/#options","text":"-- group stringArray Optional list of setting groups that have to be validated ( one of : accounts , general , kustomize , plugins , repositories , resource - overrides ) - h , -- help help for validate","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_settings_validate/#options-inherited-from-parent-commands","text":"-- argocd - cm - path string Path to local argocd - cm . yaml file -- argocd - secret - path string Path to local argocd - secret . yaml file -- as string Username to impersonate for the operation -- as - group stringArray Group to impersonate for the operation , this flag can be repeated to specify multiple groups . -- certificate - authority string Path to a cert file for the certificate authority -- client - certificate string Path to a client certificate file for TLS -- client - key string Path to a client key file for TLS -- cluster string The name of the kubeconfig cluster to use -- context string The name of the kubeconfig context to use -- insecure - skip - tls - verify If true , the server 's certificate will not be checked for validity. This will make your HTTPS connections insecure -- kubeconfig string Path to a kube config . Only required if out - of - cluster -- load - cluster - settings Indicates that config map and secret should be loaded from cluster unless local file path is provided - n , -- namespace string If present , the namespace scope for this CLI request -- password string Password for basic authentication to the API server -- request - timeout string The length of time to wait before giving up on a single server request . Non - zero values should contain a corresponding time unit ( e . g . 1 s , 2 m , 3 h ) . A value of zero means don 't timeout requests. (default \"0\") -- server string The address and port of the Kubernetes API server -- tls - server - name string If provided , this name will be used to validate server certificate . If this is not provided , hostname used to contact the server is used . -- token string Bearer token for authentication to the API server -- user string The name of the kubeconfig user to use -- username string Username for basic authentication to the API server","title":"Options inherited from parent commands"},{"location":"operator-manual/server-commands/argocd-util_settings_validate/#see-also","text":"argocd-util settings - Provides set of commands for settings validation and troubleshooting","title":"SEE ALSO"},{"location":"operator-manual/server-commands/argocd-util_version/","text":"argocd-util version \u00b6 Print version information argocd - util version [ flags ] Options \u00b6 - h , -- help help for version -- short print just the version number SEE ALSO \u00b6 argocd-util - argocd-util tools used by Argo CD","title":"Argocd util version"},{"location":"operator-manual/server-commands/argocd-util_version/#argocd-util-version","text":"Print version information argocd - util version [ flags ]","title":"argocd-util version"},{"location":"operator-manual/server-commands/argocd-util_version/#options","text":"- h , -- help help for version -- short print just the version number","title":"Options"},{"location":"operator-manual/server-commands/argocd-util_version/#see-also","text":"argocd-util - argocd-util tools used by Argo CD","title":"SEE ALSO"},{"location":"operator-manual/upgrading/1.0-1.1/","text":"v1.0 to 1.1 \u00b6 The v1.1 release does not introduce backward incompatible changes. Please note that Kustomize v1.0 is deprecated and support will be removed in the Argo CD v1.2 release. From here on you can follow the regular upgrade process .","title":"v1.0 to 1.1"},{"location":"operator-manual/upgrading/1.0-1.1/#v10-to-11","text":"The v1.1 release does not introduce backward incompatible changes. Please note that Kustomize v1.0 is deprecated and support will be removed in the Argo CD v1.2 release. From here on you can follow the regular upgrade process .","title":"v1.0 to 1.1"},{"location":"operator-manual/upgrading/1.1-1.2/","text":"v1.1 to 1.2 \u00b6 Kustomize \u00b6 Kustomize v1 support is removed. All kustomize charts are built using the same Kustomize version Kustomize v2.0.3 upgraded to v3.1.0 . We've noticed one backward incompatible change: https://github.com/kubernetes-sigs/kustomize/issues/42 . Starting v2.1.0 namespace prefix feature works with CRD ( which might cause renaming of generated resource definitions) ConfigMap labels \u00b6 Argo CD config maps must be annotated with app.kubernetes.io/part-of: argocd label. Make sure to apply updated install.yaml manifest in addition to changing image version. From here on you can follow the regular upgrade process .","title":"v1.1 to 1.2"},{"location":"operator-manual/upgrading/1.1-1.2/#v11-to-12","text":"","title":"v1.1 to 1.2"},{"location":"operator-manual/upgrading/1.1-1.2/#kustomize","text":"Kustomize v1 support is removed. All kustomize charts are built using the same Kustomize version Kustomize v2.0.3 upgraded to v3.1.0 . We've noticed one backward incompatible change: https://github.com/kubernetes-sigs/kustomize/issues/42 . Starting v2.1.0 namespace prefix feature works with CRD ( which might cause renaming of generated resource definitions)","title":"Kustomize"},{"location":"operator-manual/upgrading/1.1-1.2/#configmap-labels","text":"Argo CD config maps must be annotated with app.kubernetes.io/part-of: argocd label. Make sure to apply updated install.yaml manifest in addition to changing image version. From here on you can follow the regular upgrade process .","title":"ConfigMap labels"},{"location":"operator-manual/upgrading/1.2-1.3/","text":"v1.2 to 1.3 \u00b6 API Changes \u00b6 The 1.3 release introduces backward incompatible changes in some public Argo CD APIs. Please make sure to upgrade Argo CD CLI to v1.3. From here on you can follow the regular upgrade process .","title":"v1.2 to 1.3"},{"location":"operator-manual/upgrading/1.2-1.3/#v12-to-13","text":"","title":"v1.2 to 1.3"},{"location":"operator-manual/upgrading/1.2-1.3/#api-changes","text":"The 1.3 release introduces backward incompatible changes in some public Argo CD APIs. Please make sure to upgrade Argo CD CLI to v1.3. From here on you can follow the regular upgrade process .","title":"API Changes"},{"location":"operator-manual/upgrading/1.3-1.4/","text":"v1.3 to 1.4 \u00b6 Sync Hooks \u00b6 The Argo CD deletes all in-flight hooks if you terminate running sync operation. The hook state assessment change implemented in this release the Argo CD enables detection of an in-flight state for all Kubernetes resources including Deployment , PVC , StatefulSet , ReplicaSet etc. So if you terminate the sync operation that has, for example, StatefulSet hook that is Progressing it will be deleted. The long-running jobs are not supposed to be used as a sync hook and you should consider using Sync Waves instead. From here on you can follow the regular upgrade process . API Changes \u00b6 The 1.3 release introduces backward incompatible changes in some public Argo CD APIs. Please make sure to upgrade Argo CD CLI to v1.3.","title":"v1.3 to 1.4"},{"location":"operator-manual/upgrading/1.3-1.4/#v13-to-14","text":"","title":"v1.3 to 1.4"},{"location":"operator-manual/upgrading/1.3-1.4/#sync-hooks","text":"The Argo CD deletes all in-flight hooks if you terminate running sync operation. The hook state assessment change implemented in this release the Argo CD enables detection of an in-flight state for all Kubernetes resources including Deployment , PVC , StatefulSet , ReplicaSet etc. So if you terminate the sync operation that has, for example, StatefulSet hook that is Progressing it will be deleted. The long-running jobs are not supposed to be used as a sync hook and you should consider using Sync Waves instead. From here on you can follow the regular upgrade process .","title":"Sync Hooks"},{"location":"operator-manual/upgrading/1.3-1.4/#api-changes","text":"The 1.3 release introduces backward incompatible changes in some public Argo CD APIs. Please make sure to upgrade Argo CD CLI to v1.3.","title":"API Changes"},{"location":"operator-manual/upgrading/1.4-1.5/","text":"v1.4 to 1.5 \u00b6 Updated prometheus metrics \u00b6 The argocd_app_sync_status , argocd_app_health_status and argocd_app_created_time prometheus metrics are deprecated in favor of additional labels to argocd_app_info metric. The deprecated labels are still available can be re-enabled using ARGOCD_LEGACY_CONTROLLER_METRICS=true environment variable. The legacy example Grafana dashboard is available at examples/dashboard-legacy.json . Redis HA Proxy \u00b6 Warning Manual intervention might be required to complete the upgrade. High-availability (HA) Argo CD manifests now bundles Redis in HA Proxy in front of it. Following issue have been observed during the upgrade: you might see intermittent login failures; after upgrade is completed ha proxy might be unable to access redis server (see argo-cd#3547 , DandyDeveloper/charts#26 ). As workaround \"restart\" argocd-redis-ha-haproxy Deployment and argocd-redis-ha-server StatefulSet. Upgraded Kustomize Version \u00b6 Note that bundled Kustomize has been upgraded to v3.6.1. From here on you can follow the regular upgrade process .","title":"v1.4 to 1.5"},{"location":"operator-manual/upgrading/1.4-1.5/#v14-to-15","text":"","title":"v1.4 to 1.5"},{"location":"operator-manual/upgrading/1.4-1.5/#updated-prometheus-metrics","text":"The argocd_app_sync_status , argocd_app_health_status and argocd_app_created_time prometheus metrics are deprecated in favor of additional labels to argocd_app_info metric. The deprecated labels are still available can be re-enabled using ARGOCD_LEGACY_CONTROLLER_METRICS=true environment variable. The legacy example Grafana dashboard is available at examples/dashboard-legacy.json .","title":"Updated prometheus metrics"},{"location":"operator-manual/upgrading/1.4-1.5/#redis-ha-proxy","text":"Warning Manual intervention might be required to complete the upgrade. High-availability (HA) Argo CD manifests now bundles Redis in HA Proxy in front of it. Following issue have been observed during the upgrade: you might see intermittent login failures; after upgrade is completed ha proxy might be unable to access redis server (see argo-cd#3547 , DandyDeveloper/charts#26 ). As workaround \"restart\" argocd-redis-ha-haproxy Deployment and argocd-redis-ha-server StatefulSet.","title":"Redis HA Proxy"},{"location":"operator-manual/upgrading/1.4-1.5/#upgraded-kustomize-version","text":"Note that bundled Kustomize has been upgraded to v3.6.1. From here on you can follow the regular upgrade process .","title":"Upgraded Kustomize Version"},{"location":"operator-manual/upgrading/1.5-1.6/","text":"v1.5 to 1.6 \u00b6 Removed Deprecated Field of /managed-resources API \u00b6 The deprecated diff field had been removed from /api/v1/applications/<app-name>/managed-resources API. The field is not used by Argo CD CLI or UI, so it might affect you only if you programmatically use the managed-resources API. From here on you can follow the regular upgrade process .","title":"v1.5 to 1.6"},{"location":"operator-manual/upgrading/1.5-1.6/#v15-to-16","text":"","title":"v1.5 to 1.6"},{"location":"operator-manual/upgrading/1.5-1.6/#removed-deprecated-field-of-managed-resources-api","text":"The deprecated diff field had been removed from /api/v1/applications/<app-name>/managed-resources API. The field is not used by Argo CD CLI or UI, so it might affect you only if you programmatically use the managed-resources API. From here on you can follow the regular upgrade process .","title":"Removed Deprecated Field of /managed-resources API"},{"location":"operator-manual/upgrading/1.6-1.7/","text":"v1.6 to 1.7 \u00b6 AppProject tokens moved to status field \u00b6 In order to address argoproj/argo-cd#2718 the JWT tokens stored in AppProject CRD have been moved from spec to status field. The migration is performed automatically during upgrade and might cause few seconds delay. No additional side effects besides the delay are expected. It is acceptable to rollback to previous version - no data loss is expected. Resources like ConfigMap might become out-of-sync due to YAML library upgrade \u00b6 As part of v1.7 release, the Kubernetes client library have been upgrade to v1.18.8 as well as we've started using https://github.com/kubernetes-sigs/yaml for YAML handling to be consistent with kubectl behavior. This introduced a change of multiline string handling in resource manifests. As a result, YAML manifests with multiline strings might become out-of-sync after upgrading and you might have to trigger the synchronization once to resolve it. Affected resource example: --- apiVersion : v1 kind : ConfigMap metadata : name : my-config-map data : value : |+ # block chomping indicator is dropped by Argo CD v1.7 ( same as kubectl apply) hello From here on you can follow the regular upgrade process .","title":"v1.6 to 1.7"},{"location":"operator-manual/upgrading/1.6-1.7/#v16-to-17","text":"","title":"v1.6 to 1.7"},{"location":"operator-manual/upgrading/1.6-1.7/#appproject-tokens-moved-to-status-field","text":"In order to address argoproj/argo-cd#2718 the JWT tokens stored in AppProject CRD have been moved from spec to status field. The migration is performed automatically during upgrade and might cause few seconds delay. No additional side effects besides the delay are expected. It is acceptable to rollback to previous version - no data loss is expected.","title":"AppProject tokens moved to status field"},{"location":"operator-manual/upgrading/1.6-1.7/#resources-like-configmap-might-become-out-of-sync-due-to-yaml-library-upgrade","text":"As part of v1.7 release, the Kubernetes client library have been upgrade to v1.18.8 as well as we've started using https://github.com/kubernetes-sigs/yaml for YAML handling to be consistent with kubectl behavior. This introduced a change of multiline string handling in resource manifests. As a result, YAML manifests with multiline strings might become out-of-sync after upgrading and you might have to trigger the synchronization once to resolve it. Affected resource example: --- apiVersion : v1 kind : ConfigMap metadata : name : my-config-map data : value : |+ # block chomping indicator is dropped by Argo CD v1.7 ( same as kubectl apply) hello From here on you can follow the regular upgrade process .","title":"Resources like ConfigMap might become out-of-sync due to YAML library upgrade"},{"location":"operator-manual/upgrading/1.7-1.8/","text":"v1.7 to 1.8 \u00b6 The argocd-application-controller converted to StatefulSet \u00b6 The argocd-application-controller has been converted to StatefulSet. That means you need to manually delete argocd-application-controller Deployment after upgrading. Similarly if you decided to rollback to v1.7 don't forget to delete argocd-application-controller StatefulSet. Health assessement of argoproj.io/Application CRD has been removed \u00b6 The health assessement of argoproj.io/Application CRD has been removed (see #3781 for more information). You might need to restore it if you are using app-of-apps pattern and orchestrating syncronization using sync waves. Add the following resource customization in argocd-cm ConfigMap: --- apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : resource.customizations : | argoproj.io/Application: health.lua: | hs = {} hs.status = \"Healthy\" hs.message = \"\" if obj.status ~= nil then if obj.status.health ~= nil then hs.status = obj.status.health.status hs.message = obj.status.health.message end end return hs gRPC metrics are disabled by default \u00b6 The gRPC metrics are not exposed by default by argocd-server and argocd-repo-server anymore. These metrics appear to be too expensive so we've decided to disable them by default. Metrics can be enabled using ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM=true environment variable. From here on you can follow the regular upgrade process .","title":"v1.7 to 1.8"},{"location":"operator-manual/upgrading/1.7-1.8/#v17-to-18","text":"","title":"v1.7 to 1.8"},{"location":"operator-manual/upgrading/1.7-1.8/#the-argocd-application-controller-converted-to-statefulset","text":"The argocd-application-controller has been converted to StatefulSet. That means you need to manually delete argocd-application-controller Deployment after upgrading. Similarly if you decided to rollback to v1.7 don't forget to delete argocd-application-controller StatefulSet.","title":"The argocd-application-controller converted to StatefulSet"},{"location":"operator-manual/upgrading/1.7-1.8/#health-assessement-of-argoprojioapplication-crd-has-been-removed","text":"The health assessement of argoproj.io/Application CRD has been removed (see #3781 for more information). You might need to restore it if you are using app-of-apps pattern and orchestrating syncronization using sync waves. Add the following resource customization in argocd-cm ConfigMap: --- apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : resource.customizations : | argoproj.io/Application: health.lua: | hs = {} hs.status = \"Healthy\" hs.message = \"\" if obj.status ~= nil then if obj.status.health ~= nil then hs.status = obj.status.health.status hs.message = obj.status.health.message end end return hs","title":"Health assessement of argoproj.io/Application CRD has been removed"},{"location":"operator-manual/upgrading/1.7-1.8/#grpc-metrics-are-disabled-by-default","text":"The gRPC metrics are not exposed by default by argocd-server and argocd-repo-server anymore. These metrics appear to be too expensive so we've decided to disable them by default. Metrics can be enabled using ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM=true environment variable. From here on you can follow the regular upgrade process .","title":"gRPC metrics are disabled by default"},{"location":"operator-manual/upgrading/1.8-1.9/","text":"v1.8 to 1.9 \u00b6 Environment variables expansion \u00b6 Argo CD supports using environment variables in config management tools parameters. The expansion logic has been improved and now expands missing environment variables into an empty string. Docker image migrated to use Ubuntu as base \u00b6 The official Docker image has been migrated to use ubuntu:20.10 instead of debian:10-slim as base image. While this should not affect user experience, you might be affected if you use custom-built images and/or include third party tools in custom-built images. Please make sure that your custom tools are still working with the update to v1.9 before deploying it onto production. Container registry switched to quay.io and sundown of Docker Hub repository \u00b6 Due to Docker Hub's new rate-limiting and retention policies, the Argo project has decided to switch to the quay.io registry as a new home for all images published by its sub-projects. As of Argo CD version 1.9, the installation manifests are configured to pull the container images from quay.io and we announce the sundown of the existing Docker Hub repositories. For the 1.9 release this means, we will still push to both registries, but we will stop pushing images to Docker Hub once Argo CD 1.10 has been released. Please make sure that your clusters can pull from the quay.io registry. If you aren't able to do so timely, you can change the container image slugs in the installation manually to Docker Hub as a workaround to install Argo CD 1.9. This workaround will not be possible anymore with 1.10, however.","title":"v1.8 to 1.9"},{"location":"operator-manual/upgrading/1.8-1.9/#v18-to-19","text":"","title":"v1.8 to 1.9"},{"location":"operator-manual/upgrading/1.8-1.9/#environment-variables-expansion","text":"Argo CD supports using environment variables in config management tools parameters. The expansion logic has been improved and now expands missing environment variables into an empty string.","title":"Environment variables expansion"},{"location":"operator-manual/upgrading/1.8-1.9/#docker-image-migrated-to-use-ubuntu-as-base","text":"The official Docker image has been migrated to use ubuntu:20.10 instead of debian:10-slim as base image. While this should not affect user experience, you might be affected if you use custom-built images and/or include third party tools in custom-built images. Please make sure that your custom tools are still working with the update to v1.9 before deploying it onto production.","title":"Docker image migrated to use Ubuntu as base"},{"location":"operator-manual/upgrading/1.8-1.9/#container-registry-switched-to-quayio-and-sundown-of-docker-hub-repository","text":"Due to Docker Hub's new rate-limiting and retention policies, the Argo project has decided to switch to the quay.io registry as a new home for all images published by its sub-projects. As of Argo CD version 1.9, the installation manifests are configured to pull the container images from quay.io and we announce the sundown of the existing Docker Hub repositories. For the 1.9 release this means, we will still push to both registries, but we will stop pushing images to Docker Hub once Argo CD 1.10 has been released. Please make sure that your clusters can pull from the quay.io registry. If you aren't able to do so timely, you can change the container image slugs in the installation manually to Docker Hub as a workaround to install Argo CD 1.9. This workaround will not be possible anymore with 1.10, however.","title":"Container registry switched to quay.io and sundown of Docker Hub repository"},{"location":"operator-manual/upgrading/overview/","text":"Overview \u00b6 Note This section contains information on upgrading Argo CD. Before upgrading please make sure to read details about the breaking changes between Argo CD versions. Argo CD uses the semver versioning and ensures that following rules: The patch release does not introduce any breaking changes. So if you are upgrading from v1.5.1 to v1.5.3 there should be no special instructions to follow. The minor release might introduce minor changes with a workaround. If you are upgrading from v1.3.0 to v1.5.2 please make sure to check upgrading details in both v1.3 to v1.4 and v1.4 to v1.5 upgrading instructions. The major release introduces backward incompatible behavior changes. It is recommended to take a backup of Argo CD settings using disaster recovery guide . After reading the relevant notes about possible breaking changes introduced in Argo CD version use the following command to upgrade Argo CD. Make sure to replace <version> with the required version number: Non-HA : kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<version>/manifests/install.yaml HA : kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<version>/manifests/ha/install.yaml Warning Even though some releases require only image change it is still recommended to apply whole manifests set. Manifest changes might include important parameter modifications and applying the whole set will protect you from introducing misconfiguration. v1.7 to v1.8 v1.6 to v1.7 v1.5 to v1.6 v1.4 to v1.5 v1.3 to v1.4 v1.2 to v1.3 v1.1 to v1.2 v1.0 to v1.1","title":"Overview"},{"location":"operator-manual/upgrading/overview/#overview","text":"Note This section contains information on upgrading Argo CD. Before upgrading please make sure to read details about the breaking changes between Argo CD versions. Argo CD uses the semver versioning and ensures that following rules: The patch release does not introduce any breaking changes. So if you are upgrading from v1.5.1 to v1.5.3 there should be no special instructions to follow. The minor release might introduce minor changes with a workaround. If you are upgrading from v1.3.0 to v1.5.2 please make sure to check upgrading details in both v1.3 to v1.4 and v1.4 to v1.5 upgrading instructions. The major release introduces backward incompatible behavior changes. It is recommended to take a backup of Argo CD settings using disaster recovery guide . After reading the relevant notes about possible breaking changes introduced in Argo CD version use the following command to upgrade Argo CD. Make sure to replace <version> with the required version number: Non-HA : kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<version>/manifests/install.yaml HA : kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<version>/manifests/ha/install.yaml Warning Even though some releases require only image change it is still recommended to apply whole manifests set. Manifest changes might include important parameter modifications and applying the whole set will protect you from introducing misconfiguration. v1.7 to v1.8 v1.6 to v1.7 v1.5 to v1.6 v1.4 to v1.5 v1.3 to v1.4 v1.2 to v1.3 v1.1 to v1.2 v1.0 to v1.1","title":"Overview"},{"location":"operator-manual/user-management/","text":"Overview \u00b6 Once installed Argo CD has one built-in admin user that has full access to the system. It is recommended to use admin user only for initial configuration and then switch to local users or configure SSO integration. Local users/accounts (v1.5) \u00b6 The local users/accounts feature serves two main use-cases: Auth tokens for Argo CD management automation. It is possible to configure an API account with limited permissions and generate an authentication token. Such token can be used to automatically create applications, projects etc. Additional users for a very small team where use of SSO integration might be considered an overkill. The local users don't provide advanced features such as groups, login history etc. So if you need such features it is strongly recommended to use SSO. Note When you create local users, each of those users will need additional RBAC rules set up, otherwise they will fall back to the default policy specified by policy.default field of the argocd-rbac-cm ConfigMap. The maximum length of a local account's username is 32. Create new user \u00b6 New users should be defined in argocd-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : # add an additional local user with apiKey and login capabilities # apiKey - allows generating API keys # login - allows to login using UI accounts.alice : apiKey, login # disables user. User is enabled by default accounts.alice.enabled : \"false\" Each user might have two capabilities: apiKey - allows generating authentication tokens for API access login - allows to login using UI Disable admin user \u00b6 As soon as additional users are created it is recommended to disable admin user: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : admin.enabled : \"false\" Manage users \u00b6 The Argo CD CLI provides set of commands to set user password and generate tokens. Get full users list argocd account list Get specific user details argocd account get <username> Set user password argocd account update-password \\ --account <name> \\ --current-password <current-admin> \\ --new-password <new-user-password> Generate auth token # if flag --account is omitted then Argo CD generates token for current user argocd account generate-token --account <username> Failed logins rate limiting \u00b6 Argo CD rejects login attempts after too many failed in order to prevent password brute-forcing. The following environments variables are available to control throttling settings: ARGOCD_SESSION_MAX_FAIL_COUNT : Maximum number of failed logins before Argo CD starts rejecting login attempts. Default: 5. ARGOCD_SESSION_FAILURE_WINDOW_SECONDS : Number of seconds for the failure window. Default: 300 (5 minutes). If this is set to 0, the failure window is disabled and the login attempts gets rejected after 10 consecutive logon failures, regardless of the time frame they happened. ARGOCD_SESSION_MAX_CACHE_SIZE : Maximum number of entries allowed in the cache. Default: 1000 ARGOCD_MAX_CONCURRENT_LOGIN_REQUESTS_COUNT : Limits max number of concurrent login requests. If set to 0 then limit is disabled. Default: 50. SSO \u00b6 There are two ways that SSO can be configured: Bundled Dex OIDC provider - use this option if your current provider does not support OIDC (e.g. SAML, LDAP) or if you wish to leverage any of Dex's connector features (e.g. the ability to map GitHub organizations and teams to OIDC groups claims). Existing OIDC provider - use this if you already have an OIDC provider which you are using (e.g. Okta , OneLogin , Auth0 , Microsoft , Keycloak , Google (G Suite) ), where you manage your users, groups, and memberships. Dex \u00b6 Argo CD embeds and bundles Dex as part of its installation, for the purpose of delegating authentication to an external identity provider. Multiple types of identity providers are supported (OIDC, SAML, LDAP, GitHub, etc...). SSO configuration of Argo CD requires editing the argocd-cm ConfigMap with Dex connector settings. This document describes how to configure Argo CD SSO using GitHub (OAuth2) as an example, but the steps should be similar for other identity providers. 1. Register the application in the identity provider \u00b6 In GitHub, register a new application. The callback address should be the /api/dex/callback endpoint of your Argo CD URL (e.g. https://argocd.example.com/api/dex/callback ). After registering the app, you will receive an OAuth2 client ID and secret. These values will be inputted into the Argo CD configmap. 2. Configure Argo CD for SSO \u00b6 Edit the argocd-cm configmap: kubectl edit configmap argocd-cm -n argocd In the url key, input the base URL of Argo CD. In this example, it is https://argocd.example.com In the dex.config key, add the github connector to the connectors sub field. See Dex's GitHub connector documentation for explanation of the fields. A minimal config should populate the clientID, clientSecret generated in Step 1. You will very likely want to restrict logins to one or more GitHub organization. In the connectors.config.orgs list, add one or more GitHub organizations. Any member of the org will then be able to login to Argo CD to perform management tasks. data : url : https://argocd.example.com dex.config : | connectors: # GitHub example - type: github id: github name: GitHub config: clientID: aabbccddeeff00112233 clientSecret: $dex.github.clientSecret orgs: - name: your-github-org # GitHub enterprise example - type: github id: acme-github name: Acme GitHub config: hostName: github.acme.com clientID: abcdefghijklmnopqrst clientSecret: $dex.acme.clientSecret orgs: - name: your-github-org After saving, the changes should take affect automatically. NOTES: There is no need to set redirectURI in the connectors.config as shown in the dex documentation. Argo CD will automatically use the correct redirectURI for any OAuth2 connectors, to match the correct external callback URL (e.g. https://argocd.example.com/api/dex/callback ) Existing OIDC Provider \u00b6 To configure Argo CD to delegate authenticate to your existing OIDC provider, add the OAuth2 configuration to the argocd-cm ConfigMap under the oidc.config key: data : url : https://argocd.example.com oidc.config : | name: Okta issuer: https://dev-123456.oktapreview.com clientID: aaaabbbbccccddddeee clientSecret: $oidc.okta.clientSecret # Optional set of OIDC scopes to request. If omitted, defaults to: [\"openid\", \"profile\", \"email\", \"groups\"] requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"] # Optional set of OIDC claims to request on the ID token. requestedIDTokenClaims: {\"groups\": {\"essential\": true}} # Some OIDC providers require a separate clientID for different callback URLs. # For example, if configuring Argo CD with self-hosted Dex, you will need a separate client ID # for the 'localhost' (CLI) client to Dex. This field is optional. If omitted, the CLI will # use the same clientID as the Argo CD server cliClientID: vvvvwwwwxxxxyyyyzzzz Note The callback address should be the /auth/callback endpoint of your Argo CD URL (e.g. https://argocd.example.com/auth/callback). Requesting additional ID token claims \u00b6 Not all OIDC providers support a special groups scope. E.g. Okta, OneLogin and Microsoft do support a special groups scope and will return group membership with the default requestedScopes . Other OIDC providers might be able to return a claim with group membership if explicitly requested to do so. Individual claims can be requested with requestedIDTokenClaims , see OpenID Connect Claims Parameter for details. The Argo CD configuration for claims is as follows: oidc.config : | requestedIDTokenClaims: email: essential: true groups: essential: true value: org:myorg acr: essential: true values: - urn:mace:incommon:iap:silver - urn:mace:incommon:iap:bronze For a simple case this can be: oidc.config : | requestedIDTokenClaims: {\"groups\": {\"essential\": true}} Configuring a custom logout URL for your OIDC provider \u00b6 Optionally, if your OIDC provider exposes a logout API and you wish to configure a custom logout URL for the purposes of invalidating any active session post logout, you can do so by specifying it as follows: oidc.config : | name: example-OIDC-provider issuer: https://example-OIDC-provider.com clientID: xxxxxxxxx clientSecret: xxxxxxxxx requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"] requestedIDTokenClaims: {\"groups\": {\"essential\": true}} logoutURL: https://example-OIDC-provider.com/logout?id_token_hint={{token}} By default, this would take the user to their OIDC provider's login page after logout. If you also wish to redirect the user back to Argo CD after logout, you can specify the logout URL as follows: ... logoutURL : https://example-OIDC-provider.com/logout?id_token_hint={{token}}&post_logout_redirect_uri={{logoutRedirectURL}} You are not required to specify a logoutRedirectURL as this is automatically generated by ArgoCD as your base ArgoCD url + Rootpath Note The post logout redirect URI may need to be whitelisted against your OIDC provider's client settings for ArgoCD. SSO Further Reading \u00b6 Sensitive Data and SSO Client Secrets \u00b6 You can use the argocd-secret to store any sensitive data. ArgoCD knows to check the keys under data in the argocd-secret secret for a corresponding key whenever a value in a configmap starts with $ . This can be used to store things such as your clientSecret . Data should be base64 encoded before it is added to argocd-secret . You can do so by running printf RAW_SECRET_STRING | base64 . Example \u00b6 argocd-secret : apiVersion : v1 kind : Secret metadata : name : argocd-secret namespace : argocd labels : app.kubernetes.io/name : argocd-secret app.kubernetes.io/part-of : argocd type : Opaque data : ... # Store client secret like below. # Ensure the secret is base64 encoded oidc.auth0.clientSecret : <client-secret-base64-encoded> ... argocd-cm : apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : ... oidc.config : | name: Auth0 clientID: aabbccddeeff00112233 # Reference key in argocd-secret clientSecret: $oidc.auth0.clientSecret ...","title":"Overview"},{"location":"operator-manual/user-management/#overview","text":"Once installed Argo CD has one built-in admin user that has full access to the system. It is recommended to use admin user only for initial configuration and then switch to local users or configure SSO integration.","title":"Overview"},{"location":"operator-manual/user-management/#local-usersaccounts-v15","text":"The local users/accounts feature serves two main use-cases: Auth tokens for Argo CD management automation. It is possible to configure an API account with limited permissions and generate an authentication token. Such token can be used to automatically create applications, projects etc. Additional users for a very small team where use of SSO integration might be considered an overkill. The local users don't provide advanced features such as groups, login history etc. So if you need such features it is strongly recommended to use SSO. Note When you create local users, each of those users will need additional RBAC rules set up, otherwise they will fall back to the default policy specified by policy.default field of the argocd-rbac-cm ConfigMap. The maximum length of a local account's username is 32.","title":"Local users/accounts (v1.5)"},{"location":"operator-manual/user-management/#create-new-user","text":"New users should be defined in argocd-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : # add an additional local user with apiKey and login capabilities # apiKey - allows generating API keys # login - allows to login using UI accounts.alice : apiKey, login # disables user. User is enabled by default accounts.alice.enabled : \"false\" Each user might have two capabilities: apiKey - allows generating authentication tokens for API access login - allows to login using UI","title":"Create new user"},{"location":"operator-manual/user-management/#disable-admin-user","text":"As soon as additional users are created it is recommended to disable admin user: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : admin.enabled : \"false\"","title":"Disable admin user"},{"location":"operator-manual/user-management/#manage-users","text":"The Argo CD CLI provides set of commands to set user password and generate tokens. Get full users list argocd account list Get specific user details argocd account get <username> Set user password argocd account update-password \\ --account <name> \\ --current-password <current-admin> \\ --new-password <new-user-password> Generate auth token # if flag --account is omitted then Argo CD generates token for current user argocd account generate-token --account <username>","title":"Manage users"},{"location":"operator-manual/user-management/#failed-logins-rate-limiting","text":"Argo CD rejects login attempts after too many failed in order to prevent password brute-forcing. The following environments variables are available to control throttling settings: ARGOCD_SESSION_MAX_FAIL_COUNT : Maximum number of failed logins before Argo CD starts rejecting login attempts. Default: 5. ARGOCD_SESSION_FAILURE_WINDOW_SECONDS : Number of seconds for the failure window. Default: 300 (5 minutes). If this is set to 0, the failure window is disabled and the login attempts gets rejected after 10 consecutive logon failures, regardless of the time frame they happened. ARGOCD_SESSION_MAX_CACHE_SIZE : Maximum number of entries allowed in the cache. Default: 1000 ARGOCD_MAX_CONCURRENT_LOGIN_REQUESTS_COUNT : Limits max number of concurrent login requests. If set to 0 then limit is disabled. Default: 50.","title":"Failed logins rate limiting"},{"location":"operator-manual/user-management/#sso","text":"There are two ways that SSO can be configured: Bundled Dex OIDC provider - use this option if your current provider does not support OIDC (e.g. SAML, LDAP) or if you wish to leverage any of Dex's connector features (e.g. the ability to map GitHub organizations and teams to OIDC groups claims). Existing OIDC provider - use this if you already have an OIDC provider which you are using (e.g. Okta , OneLogin , Auth0 , Microsoft , Keycloak , Google (G Suite) ), where you manage your users, groups, and memberships.","title":"SSO"},{"location":"operator-manual/user-management/#dex","text":"Argo CD embeds and bundles Dex as part of its installation, for the purpose of delegating authentication to an external identity provider. Multiple types of identity providers are supported (OIDC, SAML, LDAP, GitHub, etc...). SSO configuration of Argo CD requires editing the argocd-cm ConfigMap with Dex connector settings. This document describes how to configure Argo CD SSO using GitHub (OAuth2) as an example, but the steps should be similar for other identity providers.","title":"Dex"},{"location":"operator-manual/user-management/#1-register-the-application-in-the-identity-provider","text":"In GitHub, register a new application. The callback address should be the /api/dex/callback endpoint of your Argo CD URL (e.g. https://argocd.example.com/api/dex/callback ). After registering the app, you will receive an OAuth2 client ID and secret. These values will be inputted into the Argo CD configmap.","title":"1. Register the application in the identity provider"},{"location":"operator-manual/user-management/#2-configure-argo-cd-for-sso","text":"Edit the argocd-cm configmap: kubectl edit configmap argocd-cm -n argocd In the url key, input the base URL of Argo CD. In this example, it is https://argocd.example.com In the dex.config key, add the github connector to the connectors sub field. See Dex's GitHub connector documentation for explanation of the fields. A minimal config should populate the clientID, clientSecret generated in Step 1. You will very likely want to restrict logins to one or more GitHub organization. In the connectors.config.orgs list, add one or more GitHub organizations. Any member of the org will then be able to login to Argo CD to perform management tasks. data : url : https://argocd.example.com dex.config : | connectors: # GitHub example - type: github id: github name: GitHub config: clientID: aabbccddeeff00112233 clientSecret: $dex.github.clientSecret orgs: - name: your-github-org # GitHub enterprise example - type: github id: acme-github name: Acme GitHub config: hostName: github.acme.com clientID: abcdefghijklmnopqrst clientSecret: $dex.acme.clientSecret orgs: - name: your-github-org After saving, the changes should take affect automatically. NOTES: There is no need to set redirectURI in the connectors.config as shown in the dex documentation. Argo CD will automatically use the correct redirectURI for any OAuth2 connectors, to match the correct external callback URL (e.g. https://argocd.example.com/api/dex/callback )","title":"2. Configure Argo CD for SSO"},{"location":"operator-manual/user-management/#existing-oidc-provider","text":"To configure Argo CD to delegate authenticate to your existing OIDC provider, add the OAuth2 configuration to the argocd-cm ConfigMap under the oidc.config key: data : url : https://argocd.example.com oidc.config : | name: Okta issuer: https://dev-123456.oktapreview.com clientID: aaaabbbbccccddddeee clientSecret: $oidc.okta.clientSecret # Optional set of OIDC scopes to request. If omitted, defaults to: [\"openid\", \"profile\", \"email\", \"groups\"] requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"] # Optional set of OIDC claims to request on the ID token. requestedIDTokenClaims: {\"groups\": {\"essential\": true}} # Some OIDC providers require a separate clientID for different callback URLs. # For example, if configuring Argo CD with self-hosted Dex, you will need a separate client ID # for the 'localhost' (CLI) client to Dex. This field is optional. If omitted, the CLI will # use the same clientID as the Argo CD server cliClientID: vvvvwwwwxxxxyyyyzzzz Note The callback address should be the /auth/callback endpoint of your Argo CD URL (e.g. https://argocd.example.com/auth/callback).","title":"Existing OIDC Provider"},{"location":"operator-manual/user-management/#requesting-additional-id-token-claims","text":"Not all OIDC providers support a special groups scope. E.g. Okta, OneLogin and Microsoft do support a special groups scope and will return group membership with the default requestedScopes . Other OIDC providers might be able to return a claim with group membership if explicitly requested to do so. Individual claims can be requested with requestedIDTokenClaims , see OpenID Connect Claims Parameter for details. The Argo CD configuration for claims is as follows: oidc.config : | requestedIDTokenClaims: email: essential: true groups: essential: true value: org:myorg acr: essential: true values: - urn:mace:incommon:iap:silver - urn:mace:incommon:iap:bronze For a simple case this can be: oidc.config : | requestedIDTokenClaims: {\"groups\": {\"essential\": true}}","title":"Requesting additional ID token claims"},{"location":"operator-manual/user-management/#configuring-a-custom-logout-url-for-your-oidc-provider","text":"Optionally, if your OIDC provider exposes a logout API and you wish to configure a custom logout URL for the purposes of invalidating any active session post logout, you can do so by specifying it as follows: oidc.config : | name: example-OIDC-provider issuer: https://example-OIDC-provider.com clientID: xxxxxxxxx clientSecret: xxxxxxxxx requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"] requestedIDTokenClaims: {\"groups\": {\"essential\": true}} logoutURL: https://example-OIDC-provider.com/logout?id_token_hint={{token}} By default, this would take the user to their OIDC provider's login page after logout. If you also wish to redirect the user back to Argo CD after logout, you can specify the logout URL as follows: ... logoutURL : https://example-OIDC-provider.com/logout?id_token_hint={{token}}&post_logout_redirect_uri={{logoutRedirectURL}} You are not required to specify a logoutRedirectURL as this is automatically generated by ArgoCD as your base ArgoCD url + Rootpath Note The post logout redirect URI may need to be whitelisted against your OIDC provider's client settings for ArgoCD.","title":"Configuring a custom logout URL for your OIDC provider"},{"location":"operator-manual/user-management/#sso-further-reading","text":"","title":"SSO Further Reading"},{"location":"operator-manual/user-management/#sensitive-data-and-sso-client-secrets","text":"You can use the argocd-secret to store any sensitive data. ArgoCD knows to check the keys under data in the argocd-secret secret for a corresponding key whenever a value in a configmap starts with $ . This can be used to store things such as your clientSecret . Data should be base64 encoded before it is added to argocd-secret . You can do so by running printf RAW_SECRET_STRING | base64 .","title":"Sensitive Data and SSO Client Secrets"},{"location":"operator-manual/user-management/#example","text":"argocd-secret : apiVersion : v1 kind : Secret metadata : name : argocd-secret namespace : argocd labels : app.kubernetes.io/name : argocd-secret app.kubernetes.io/part-of : argocd type : Opaque data : ... # Store client secret like below. # Ensure the secret is base64 encoded oidc.auth0.clientSecret : <client-secret-base64-encoded> ... argocd-cm : apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : ... oidc.config : | name: Auth0 clientID: aabbccddeeff00112233 # Reference key in argocd-secret clientSecret: $oidc.auth0.clientSecret ...","title":"Example"},{"location":"operator-manual/user-management/auth0/","text":"Auth0 \u00b6 User-definitions \u00b6 User-definitions in Auth0 is out of scope for this guide. Add them directly in Auth0 database, use an enterprise registry, or \"social login\". Note : all users have access to all Auth0 defined apps unless you restrict access via configuration - keep this in mind if argo is exposed on the internet or else anyone can login. Registering the app with Auth0 \u00b6 Follow the register app instructions to create the argocd app in Auth0. In the app definition: Take note of the clientId and clientSecret values. Register login url as https://your.argoingress.address/login Set allowed callback url to https://your.argoingress.address/auth/callback Under connections, select the user-registries you want to use with argo Any other settings are non-essential for the authentication to work. Adding authorization rules to Auth0 \u00b6 Follow Auth0 authorization guide to setup authorization. The important part to note here is that group-membership is a non-standard claim, and hence is required to be put under a FQDN claim name, for instance http://your.domain/groups . Configuring argo \u00b6 Configure OIDC for ArgoCD \u00b6 kubectl edit configmap argocd-cm ... data: application.instanceLabelKey: argocd.argoproj.io/instance url: https://your.argoingress.address oidc.config: | name: Auth0 issuer: https://<yourtenant>.<eu|us>.auth0.com/ clientID: <theClientId> clientSecret: <theClientSecret> requestedScopes: - openid - profile - email # not strictly necessary - but good practice: - 'http://your.domain/groups' ... Configure RBAC for ArgoCD \u00b6 kubectl edit configmap argocd-rbac-cm (or use helm values). ... data : policy . csv : | # let members with group someProjectGroup handle apps in someProject # this can also be defined in the UI in the group - definition to avoid doing it there in the configmap p , someProjectGroup , applications , * , someProject /*, allow # let the group membership argocd-admins from OIDC become role:admin - needs to go into the configmap g, argocd-global-admins, role:admin policy.default: role:readonly # essential to get argo to use groups for RBAC: scopes: '[http://your.domain/groups, email]' ... Storing Client Secrets Details on storing your clientSecret securely and correctly can be found on the User Management Overview page .","title":"Auth0"},{"location":"operator-manual/user-management/auth0/#auth0","text":"","title":"Auth0"},{"location":"operator-manual/user-management/auth0/#user-definitions","text":"User-definitions in Auth0 is out of scope for this guide. Add them directly in Auth0 database, use an enterprise registry, or \"social login\". Note : all users have access to all Auth0 defined apps unless you restrict access via configuration - keep this in mind if argo is exposed on the internet or else anyone can login.","title":"User-definitions"},{"location":"operator-manual/user-management/auth0/#registering-the-app-with-auth0","text":"Follow the register app instructions to create the argocd app in Auth0. In the app definition: Take note of the clientId and clientSecret values. Register login url as https://your.argoingress.address/login Set allowed callback url to https://your.argoingress.address/auth/callback Under connections, select the user-registries you want to use with argo Any other settings are non-essential for the authentication to work.","title":"Registering the app with Auth0"},{"location":"operator-manual/user-management/auth0/#adding-authorization-rules-to-auth0","text":"Follow Auth0 authorization guide to setup authorization. The important part to note here is that group-membership is a non-standard claim, and hence is required to be put under a FQDN claim name, for instance http://your.domain/groups .","title":"Adding authorization rules to Auth0"},{"location":"operator-manual/user-management/auth0/#configuring-argo","text":"","title":"Configuring argo"},{"location":"operator-manual/user-management/auth0/#configure-oidc-for-argocd","text":"kubectl edit configmap argocd-cm ... data: application.instanceLabelKey: argocd.argoproj.io/instance url: https://your.argoingress.address oidc.config: | name: Auth0 issuer: https://<yourtenant>.<eu|us>.auth0.com/ clientID: <theClientId> clientSecret: <theClientSecret> requestedScopes: - openid - profile - email # not strictly necessary - but good practice: - 'http://your.domain/groups' ...","title":"Configure OIDC for ArgoCD"},{"location":"operator-manual/user-management/auth0/#configure-rbac-for-argocd","text":"kubectl edit configmap argocd-rbac-cm (or use helm values). ... data : policy . csv : | # let members with group someProjectGroup handle apps in someProject # this can also be defined in the UI in the group - definition to avoid doing it there in the configmap p , someProjectGroup , applications , * , someProject /*, allow # let the group membership argocd-admins from OIDC become role:admin - needs to go into the configmap g, argocd-global-admins, role:admin policy.default: role:readonly # essential to get argo to use groups for RBAC: scopes: '[http://your.domain/groups, email]' ... Storing Client Secrets Details on storing your clientSecret securely and correctly can be found on the User Management Overview page .","title":"Configure RBAC for ArgoCD"},{"location":"operator-manual/user-management/google/","text":"Google \u00b6 G Suite SAML App Auth using Dex Once you've set up one of the above integrations, be sure to edit argo-rbac-cm to configure permissions (as in the example below). See RBAC Configurations for more detailed scenarios. apiVersion : v1 kind : ConfigMap metadata : name : argocd-rbac-cm namespace : argocd data : policy.default : role:readonly G Suite SAML App Auth using Dex \u00b6 Configure a new SAML App \u00b6 In the Google admin console , open the left-side menu and select Apps > SAML Apps Under Add App select Add custom SAML app Enter a Name for the application (eg. Argo CD ), then choose Continue Download the metadata or copy the SSO URL , Certificate , and optionally Entity ID from the identity provider details for use in the next section. Choose continue . Base64 encode the contents of the certificate file, for example: $ cat ArgoCD.cer | base64 Keep a copy of the encoded output to be used in the next section. For both the ACS URL and Entity ID , use your Argo Dex Callback URL, for example: https://argocd.example.com/api/dex/callback Add SAML Attribute Mapping, Map Primary email to name and Primary Email to email . and click ADD MAPPING button. Finish creating the application. Configure Argo to use the new Google SAML App \u00b6 Edit argo-cm and add the following dex.config to the data section, replacing the caData , argocd.example.com , sso-url , and optionally google-entity-id with your values from the Google SAML App: data : url : https://argocd.example.com dex.config : | connectors: - type: saml id: saml name: saml config: ssoURL: https://sso-url (eg. https://accounts.google.com/o/saml2/idp?idpid=Abcde0) entityIssuer: https://argocd.example.com/api/dex/callback caData: | BASE64-ENCODED-CERTIFICATE-DATA redirectURI: https://argocd.example.com/api/dex/callback usernameAttr: name emailAttr: email # optional ssoIssuer: https://google-entity-id (e.g. https://accounts.google.com/o/saml2?idpid=Abcde0) References \u00b6 Dex SAML connector docs Google's SAML error messages","title":"Google"},{"location":"operator-manual/user-management/google/#google","text":"G Suite SAML App Auth using Dex Once you've set up one of the above integrations, be sure to edit argo-rbac-cm to configure permissions (as in the example below). See RBAC Configurations for more detailed scenarios. apiVersion : v1 kind : ConfigMap metadata : name : argocd-rbac-cm namespace : argocd data : policy.default : role:readonly","title":"Google"},{"location":"operator-manual/user-management/google/#g-suite-saml-app-auth-using-dex","text":"","title":"G Suite SAML App Auth using Dex"},{"location":"operator-manual/user-management/google/#configure-a-new-saml-app","text":"In the Google admin console , open the left-side menu and select Apps > SAML Apps Under Add App select Add custom SAML app Enter a Name for the application (eg. Argo CD ), then choose Continue Download the metadata or copy the SSO URL , Certificate , and optionally Entity ID from the identity provider details for use in the next section. Choose continue . Base64 encode the contents of the certificate file, for example: $ cat ArgoCD.cer | base64 Keep a copy of the encoded output to be used in the next section. For both the ACS URL and Entity ID , use your Argo Dex Callback URL, for example: https://argocd.example.com/api/dex/callback Add SAML Attribute Mapping, Map Primary email to name and Primary Email to email . and click ADD MAPPING button. Finish creating the application.","title":"Configure a new SAML App"},{"location":"operator-manual/user-management/google/#configure-argo-to-use-the-new-google-saml-app","text":"Edit argo-cm and add the following dex.config to the data section, replacing the caData , argocd.example.com , sso-url , and optionally google-entity-id with your values from the Google SAML App: data : url : https://argocd.example.com dex.config : | connectors: - type: saml id: saml name: saml config: ssoURL: https://sso-url (eg. https://accounts.google.com/o/saml2/idp?idpid=Abcde0) entityIssuer: https://argocd.example.com/api/dex/callback caData: | BASE64-ENCODED-CERTIFICATE-DATA redirectURI: https://argocd.example.com/api/dex/callback usernameAttr: name emailAttr: email # optional ssoIssuer: https://google-entity-id (e.g. https://accounts.google.com/o/saml2?idpid=Abcde0)","title":"Configure Argo to use the new Google SAML App"},{"location":"operator-manual/user-management/google/#references","text":"Dex SAML connector docs Google's SAML error messages","title":"References"},{"location":"operator-manual/user-management/keycloak/","text":"Keycloak \u00b6 Integrating Keycloak and ArgoCD \u00b6 These instructions will take you through the entire process of getting your ArgoCD application authenticating with Keycloak. You will create a client within Keycloak and configure ArgoCD to use Keycloak for authentication, using groups set in Keycloak to determine privileges in Argo. Creating a new client in Keycloak \u00b6 First we need to setup a new client. Start by logging into your keycloak server, select the realm you want to use ( master by default) and then go to Clients and click the create button top right. Configure the client by setting the Access Type to confidential and set the Valid Redirect URIs to the callback url for your ArgoCD hostname. It should be https://{hostname}/auth/callback (you can also leave the default less secure https://{hostname}/* ). You can also set the Base URL to /applications . Make sure to click Save . You should now have a new tab called Credentials . You can copy the Secret that we'll use in our ArgoCD configuration. Configuring the groups claim \u00b6 In order for ArgoCD to provide the groups the user is in we need to configure a groups claim that can be included in the authentication token. To do this we'll start by creating a new Client Scope called groups . Once you've created the client scope you can now add a Token Mapper which will add the groups claim to the token when the client requests the groups scope. Make sure to set the Name as well as the Token Claim Name to groups . We can now configure the client to provide the groups scope. You can now assign the groups scope either to the Assigned Default Client Scopes or to the Assigned Optional Client Scopes . If you put it in the Optional category you will need to make sure that ArgoCD requests the scope in it's OIDC configuration. Since we will always want group information, I recommend using the Default category. Make sure you click Add selected and that the groups claim is in the correct list on the right . Create a group called ArgoCDAdmins and have your current user join the group. Configuring ArgoCD OIDC \u00b6 Let's start by storing the client secret you generated earlier in the argocd secret argocd-secret . First you'll need to encode the client secret in base64: $ echo -n '83083958-8ec6-47b0-a411-a8c55381fbd2' | base64 Then you can edit the secret and add the base64 value to a new key called oidc.keycloak.clientSecret using $ kubectl edit secret argocd-secret . Your Secret should look something like this: yaml apiVersion: v1 kind: Secret metadata: name: argocd-secret data: ... oidc.keycloak.clientSecret: ODMwODM5NTgtOGVjNi00N2IwLWE0MTEtYThjNTUzODFmYmQy ... Now we can configure the config map and add the oidc configuration to enable our keycloak authentication. You can use $ kubectl edit configmap argocd-cm . Your ConfigMap should look like this: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm data : url : https://argocd.example.com oidc.config : | name: Keycloak issuer: https://keycloak.example.com/auth/realms/master clientID: argocd clientSecret: $oidc.keycloak.clientSecret requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"] Make sure that: - issuer ends with the correct realm (in this example master ) - clientID is set to the Client ID you configured in Keycloak - clientSecret points to the right key you created in the argocd-secret Secret - requestedScopes contains the groups claim if you didn't add it to the Default scopes Configuring ArgoCD Policy \u00b6 Now that we have an authentication that provides groups we want to apply a policy to these groups. We can modify the argocd-rbac-cm ConfigMap using $ kubectl edit configmap argocd-rbac-cm . apiVersion : v1 kind : ConfigMap metadata : name : argocd-rbac-cm data : policy.csv : | g, ArgoCDAdmins, role:admin In this example we give the role role:admin to all users in the group ArgoCDAdmins . Login \u00b6 You can now login using our new Keycloak OIDC authentication:","title":"Keycloak"},{"location":"operator-manual/user-management/keycloak/#keycloak","text":"","title":"Keycloak"},{"location":"operator-manual/user-management/keycloak/#integrating-keycloak-and-argocd","text":"These instructions will take you through the entire process of getting your ArgoCD application authenticating with Keycloak. You will create a client within Keycloak and configure ArgoCD to use Keycloak for authentication, using groups set in Keycloak to determine privileges in Argo.","title":"Integrating Keycloak and ArgoCD"},{"location":"operator-manual/user-management/keycloak/#creating-a-new-client-in-keycloak","text":"First we need to setup a new client. Start by logging into your keycloak server, select the realm you want to use ( master by default) and then go to Clients and click the create button top right. Configure the client by setting the Access Type to confidential and set the Valid Redirect URIs to the callback url for your ArgoCD hostname. It should be https://{hostname}/auth/callback (you can also leave the default less secure https://{hostname}/* ). You can also set the Base URL to /applications . Make sure to click Save . You should now have a new tab called Credentials . You can copy the Secret that we'll use in our ArgoCD configuration.","title":"Creating a new client in Keycloak"},{"location":"operator-manual/user-management/keycloak/#configuring-the-groups-claim","text":"In order for ArgoCD to provide the groups the user is in we need to configure a groups claim that can be included in the authentication token. To do this we'll start by creating a new Client Scope called groups . Once you've created the client scope you can now add a Token Mapper which will add the groups claim to the token when the client requests the groups scope. Make sure to set the Name as well as the Token Claim Name to groups . We can now configure the client to provide the groups scope. You can now assign the groups scope either to the Assigned Default Client Scopes or to the Assigned Optional Client Scopes . If you put it in the Optional category you will need to make sure that ArgoCD requests the scope in it's OIDC configuration. Since we will always want group information, I recommend using the Default category. Make sure you click Add selected and that the groups claim is in the correct list on the right . Create a group called ArgoCDAdmins and have your current user join the group.","title":"Configuring the groups claim"},{"location":"operator-manual/user-management/keycloak/#configuring-argocd-oidc","text":"Let's start by storing the client secret you generated earlier in the argocd secret argocd-secret . First you'll need to encode the client secret in base64: $ echo -n '83083958-8ec6-47b0-a411-a8c55381fbd2' | base64 Then you can edit the secret and add the base64 value to a new key called oidc.keycloak.clientSecret using $ kubectl edit secret argocd-secret . Your Secret should look something like this: yaml apiVersion: v1 kind: Secret metadata: name: argocd-secret data: ... oidc.keycloak.clientSecret: ODMwODM5NTgtOGVjNi00N2IwLWE0MTEtYThjNTUzODFmYmQy ... Now we can configure the config map and add the oidc configuration to enable our keycloak authentication. You can use $ kubectl edit configmap argocd-cm . Your ConfigMap should look like this: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm data : url : https://argocd.example.com oidc.config : | name: Keycloak issuer: https://keycloak.example.com/auth/realms/master clientID: argocd clientSecret: $oidc.keycloak.clientSecret requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"] Make sure that: - issuer ends with the correct realm (in this example master ) - clientID is set to the Client ID you configured in Keycloak - clientSecret points to the right key you created in the argocd-secret Secret - requestedScopes contains the groups claim if you didn't add it to the Default scopes","title":"Configuring ArgoCD OIDC"},{"location":"operator-manual/user-management/keycloak/#configuring-argocd-policy","text":"Now that we have an authentication that provides groups we want to apply a policy to these groups. We can modify the argocd-rbac-cm ConfigMap using $ kubectl edit configmap argocd-rbac-cm . apiVersion : v1 kind : ConfigMap metadata : name : argocd-rbac-cm data : policy.csv : | g, ArgoCDAdmins, role:admin In this example we give the role role:admin to all users in the group ArgoCDAdmins .","title":"Configuring ArgoCD Policy"},{"location":"operator-manual/user-management/keycloak/#login","text":"You can now login using our new Keycloak OIDC authentication:","title":"Login"},{"location":"operator-manual/user-management/microsoft/","text":"Microsoft \u00b6 Azure AD SAML Enterprise App Auth using Dex Azure AD App Registration Auth using OIDC Azure AD App Registration Auth using Dex Azure AD SAML Enterprise App Auth using Dex \u00b6 Configure a new Azure AD Enterprise App \u00b6 From the Azure Active Directory > Enterprise applications menu, choose + New application Select Non-gallery application Enter a Name for the application (eg. Argo CD ), then choose Add Once the application is created, open it from the Enterprise applications menu. From the Users and groups menu of the app, add any users or groups requiring access to the service. From the Single sign-on menu, edit the Basic SAML Configuration section as follows (replacing my-argo-cd-url with your Argo URL): Identifier (Entity ID): https:// <my-argo-cd-url> /api/dex/callback Reply URL (Assertion Consumer Service URL): https:// <my-argo-cd-url> /api/dex/callback Sign on URL: https:// <my-argo-cd-url> /auth/login Relay State: <empty> Logout Url: <empty> From the Single sign-on menu, edit the User Attributes & Claims section to create the following claims: + Add new claim | Name: email | Source: Attribute | Source attribute: user.mail + Add group claim | Which groups: All groups | Source attribute: Group ID | Customize: True | Name: Group | Namespace: <empty> | Emit groups as role claims: False Note: The Unique User Identifier required claim can be left as the default user.userprincipalname From the Single sign-on menu, download the SAML Signing Certificate (Base64) Base64 encode the contents of the downloaded certificate file, for example: $ cat ArgoCD.cer | base64 Keep a copy of the encoded output to be used in the next section. From the Single sign-on menu, copy the Login URL parameter, to be used in the next section. Configure Argo to use the new Azure AD Enterprise App \u00b6 Edit argocd-cm and add the following dex.config to the data section, replacing the caData , my-argo-cd-url and my-login-url your values from the Azure AD App: data : url : https :// my - argo - cd - url dex . config : | logger : level : debug format : json connectors : - type : saml id : saml name : saml config : entityIssuer : https :// my - argo - cd - url /api/dex/ callback ssoURL : https :// my - login - url ( eg . https :// login . microsoftonline . com /xxxxx/a/s aml2 ) caData : | MY - BASE64 - ENCODED - CERTIFICATE - DATA redirectURI : https :// my - argo - cd - url /api/dex/ callback usernameAttr : email emailAttr : email groupsAttr : Group Edit argocd-rbac-cm to configure permissions, similar to example below. Use Azure AD Group IDs for assigning roles. See RBAC Configurations for more detailed scenarios. # example policy policy . default : role: readonly policy . csv: | p , role: org - admin , applications , * , */* , allow p , role: org - admin , clusters , get , * , allow p , role: org - admin , repositories , get , * , allow p , role: org - admin , repositories , create , * , allow p , role: org - admin , repositories , update , * , allow p , role: org - admin , repositories , delete , * , allow g , \"84ce98d1-e359-4f3b-85af-985b458de3c6\" , role: org - admin # ( azure group assigned to role ) Azure AD App Registration Auth using OIDC \u00b6 Register a new Azure AD Application Quickstart: Register an application App Registrations Inputs Redirect URI: https://argocd.example.com/auth/callback Outputs Application (client) ID: aaaaaaaa-1111-bbbb-2222-cccccccccccc Directory (tenant) ID: 33333333-dddd-4444-eeee-555555555555 Secret: some_secret Setup permissions for Azure AD Application On \"API permissions\" page find User.Read permission (under Microsoft Graph ) and grant it to the created application: Also, on \"Token Configuration\" page add groups claim for the groups assigned to the application: Edit argocd-cm and configure the data.oidc.config section: ConfigMap -> argocd - cm data : url : https :// argocd . example . com / oidc . config : | name : Azure issuer : https :// login . microsoftonline . com / { directory_tenant_id } / v2 .0 clientID : { azure_ad_application_client_id } clientSecret : $ oidc . azure . clientSecret requestedIDTokenClaims : groups : essential : true requestedScopes : - openid - profile - email Edit argocd-secret and configure the data.oidc.azure.clientSecret section: Secret -> argocd - secret data : oidc . azure . clientSecret : { client_secret | base64_encoded } Edit argocd-rbac-cm to configure permissions. Use group ID from Azure for assigning roles RBAC Configurations ConfigMap -> argocd - rbac - cm policy . default : role : readonly policy . csv : | p , role : org - admin , applications , * , */* , allow p , role : org - admin , clusters , get , * , allow p , role : org - admin , repositories , get , * , allow p , role : org - admin , repositories , create , * , allow p , role : org - admin , repositories , update , * , allow p , role : org - admin , repositories , delete , * , allow g , \"84ce98d1-e359-4f3b-85af-985b458de3c6\" , role : org - admin Mapping role from jwt token to argo If you want to map the roles from the jwt token to match the default roles (readonly and admin) then you must change the scope variable in the rbac-configmap. scopes: '[roles, email]' Azure AD App Registration Auth using Dex \u00b6 Configure a new AD App Registration, as above. Then, add the dex.config to argocd-cm : ConfigMap -> argocd-cm data : dex.config : | connectors: - type: microsoft id: microsoft name: Your Company GmbH config: clientID: $MICROSOFT_APPLICATION_ID clientSecret: $MICROSOFT_CLIENT_SECRET redirectURI: http://localhost:8080/api/dex/callback tenant: ffffffff-ffff-ffff-ffff-ffffffffffff groups: - DevOps","title":"Microsoft"},{"location":"operator-manual/user-management/microsoft/#microsoft","text":"Azure AD SAML Enterprise App Auth using Dex Azure AD App Registration Auth using OIDC Azure AD App Registration Auth using Dex","title":"Microsoft"},{"location":"operator-manual/user-management/microsoft/#azure-ad-saml-enterprise-app-auth-using-dex","text":"","title":"Azure AD SAML Enterprise App Auth using Dex"},{"location":"operator-manual/user-management/microsoft/#configure-a-new-azure-ad-enterprise-app","text":"From the Azure Active Directory > Enterprise applications menu, choose + New application Select Non-gallery application Enter a Name for the application (eg. Argo CD ), then choose Add Once the application is created, open it from the Enterprise applications menu. From the Users and groups menu of the app, add any users or groups requiring access to the service. From the Single sign-on menu, edit the Basic SAML Configuration section as follows (replacing my-argo-cd-url with your Argo URL): Identifier (Entity ID): https:// <my-argo-cd-url> /api/dex/callback Reply URL (Assertion Consumer Service URL): https:// <my-argo-cd-url> /api/dex/callback Sign on URL: https:// <my-argo-cd-url> /auth/login Relay State: <empty> Logout Url: <empty> From the Single sign-on menu, edit the User Attributes & Claims section to create the following claims: + Add new claim | Name: email | Source: Attribute | Source attribute: user.mail + Add group claim | Which groups: All groups | Source attribute: Group ID | Customize: True | Name: Group | Namespace: <empty> | Emit groups as role claims: False Note: The Unique User Identifier required claim can be left as the default user.userprincipalname From the Single sign-on menu, download the SAML Signing Certificate (Base64) Base64 encode the contents of the downloaded certificate file, for example: $ cat ArgoCD.cer | base64 Keep a copy of the encoded output to be used in the next section. From the Single sign-on menu, copy the Login URL parameter, to be used in the next section.","title":"Configure a new Azure AD Enterprise App"},{"location":"operator-manual/user-management/microsoft/#configure-argo-to-use-the-new-azure-ad-enterprise-app","text":"Edit argocd-cm and add the following dex.config to the data section, replacing the caData , my-argo-cd-url and my-login-url your values from the Azure AD App: data : url : https :// my - argo - cd - url dex . config : | logger : level : debug format : json connectors : - type : saml id : saml name : saml config : entityIssuer : https :// my - argo - cd - url /api/dex/ callback ssoURL : https :// my - login - url ( eg . https :// login . microsoftonline . com /xxxxx/a/s aml2 ) caData : | MY - BASE64 - ENCODED - CERTIFICATE - DATA redirectURI : https :// my - argo - cd - url /api/dex/ callback usernameAttr : email emailAttr : email groupsAttr : Group Edit argocd-rbac-cm to configure permissions, similar to example below. Use Azure AD Group IDs for assigning roles. See RBAC Configurations for more detailed scenarios. # example policy policy . default : role: readonly policy . csv: | p , role: org - admin , applications , * , */* , allow p , role: org - admin , clusters , get , * , allow p , role: org - admin , repositories , get , * , allow p , role: org - admin , repositories , create , * , allow p , role: org - admin , repositories , update , * , allow p , role: org - admin , repositories , delete , * , allow g , \"84ce98d1-e359-4f3b-85af-985b458de3c6\" , role: org - admin # ( azure group assigned to role )","title":"Configure Argo to use the new Azure AD Enterprise App"},{"location":"operator-manual/user-management/microsoft/#azure-ad-app-registration-auth-using-oidc","text":"Register a new Azure AD Application Quickstart: Register an application App Registrations Inputs Redirect URI: https://argocd.example.com/auth/callback Outputs Application (client) ID: aaaaaaaa-1111-bbbb-2222-cccccccccccc Directory (tenant) ID: 33333333-dddd-4444-eeee-555555555555 Secret: some_secret Setup permissions for Azure AD Application On \"API permissions\" page find User.Read permission (under Microsoft Graph ) and grant it to the created application: Also, on \"Token Configuration\" page add groups claim for the groups assigned to the application: Edit argocd-cm and configure the data.oidc.config section: ConfigMap -> argocd - cm data : url : https :// argocd . example . com / oidc . config : | name : Azure issuer : https :// login . microsoftonline . com / { directory_tenant_id } / v2 .0 clientID : { azure_ad_application_client_id } clientSecret : $ oidc . azure . clientSecret requestedIDTokenClaims : groups : essential : true requestedScopes : - openid - profile - email Edit argocd-secret and configure the data.oidc.azure.clientSecret section: Secret -> argocd - secret data : oidc . azure . clientSecret : { client_secret | base64_encoded } Edit argocd-rbac-cm to configure permissions. Use group ID from Azure for assigning roles RBAC Configurations ConfigMap -> argocd - rbac - cm policy . default : role : readonly policy . csv : | p , role : org - admin , applications , * , */* , allow p , role : org - admin , clusters , get , * , allow p , role : org - admin , repositories , get , * , allow p , role : org - admin , repositories , create , * , allow p , role : org - admin , repositories , update , * , allow p , role : org - admin , repositories , delete , * , allow g , \"84ce98d1-e359-4f3b-85af-985b458de3c6\" , role : org - admin Mapping role from jwt token to argo If you want to map the roles from the jwt token to match the default roles (readonly and admin) then you must change the scope variable in the rbac-configmap. scopes: '[roles, email]'","title":"Azure AD App Registration Auth using OIDC"},{"location":"operator-manual/user-management/microsoft/#azure-ad-app-registration-auth-using-dex","text":"Configure a new AD App Registration, as above. Then, add the dex.config to argocd-cm : ConfigMap -> argocd-cm data : dex.config : | connectors: - type: microsoft id: microsoft name: Your Company GmbH config: clientID: $MICROSOFT_APPLICATION_ID clientSecret: $MICROSOFT_CLIENT_SECRET redirectURI: http://localhost:8080/api/dex/callback tenant: ffffffff-ffff-ffff-ffff-ffffffffffff groups: - DevOps","title":"Azure AD App Registration Auth using Dex"},{"location":"operator-manual/user-management/okta/","text":"Okta \u00b6 Are you using this? Please contribute! If you're using this IdP please consider contributing to this document. A working Single Sign-On configuration using Okta via at least two methods was achieved using: SAML (with Dex) OIDC (without Dex) SAML (with Dex) \u00b6 Okta app group assignment The Okta app's Group Attribute Statements regex will be used later to map Okta groups to Argo CD RBAC roles. Create a new SAML application in Okta UI. I've disabled App Visibility because Dex doesn't support Provider-initiated login flows. Click View setup instructions after creating the application in Okta. Copy the SSO URL to the argocd-cm in the data.oicd Download the CA certificate to use in the argocd-cm configuration. If you are using this in the caData field, you will need to pass the entire certificate (including -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- stanzas) through base64 encoding, for example, base64 my_cert.pem . If you are using the ca field and storing the CA certificate separately as a secret, you will need to mount the secret to the dex container in the argocd-dex-server Deployment. Edit the argocd-cm and configure the data.dex.config section: dex.config : | logger: level: debug format: json connectors: - type: saml id: okta name: Okta config: ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml # You need `caData` _OR_ `ca`, but not both. caData: | <CA cert passed through base64 encoding> # You need `caData` _OR_ `ca`, but not both. # Path to mount the secret to the dex container ca: /path/to/ca.pem redirectURI: https://ui.argocd.yourorganization.net/api/dex/callback usernameAttr: email emailAttr: email groupsAttr: group Private deployment \u00b6 It is possible to setup Okta SSO with a private Argo CD installation, where the Okta callback URL is the only publicly exposed endpoint. The settings are largely the same with a few changes in the Okta app configuration and the data.dex.config section of the argocd-cm ConfigMap. Using this deployment model, the user connects to the private Argo CD UI and the Okta authentication flow seamlessly redirects back to the private UI URL. Often this public endpoint is exposed through an Ingress object . Update the URLs in the Okta app's General settings The Single sign on URL field points to the public exposed endpoint, and all other URL fields point to the internal endpoint. Update the data.dex.config section of the argocd-cm ConfigMap with the external endpoint reference. dex.config : | logger: level: debug connectors: - type: saml id: okta name: Okta config: ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml # You need `caData` _OR_ `ca`, but not both. caData: | <CA cert passed through base64 encoding> # You need `caData` _OR_ `ca`, but not both. # Path to mount the secret to the dex container ca: /path/to/ca.pem redirectURI: https://external.path.to.argocd.io/api/dex/callback usernameAttr: email emailAttr: email groupsAttr: group Connect Okta Groups to Argo CD Roles \u00b6 Argo CD is aware of user memberships of Okta groups that match the Group Attribute Statements regex. The example above uses the argocd-* regex, so Argo CD would be aware of a group named argocd-admins . Modify the argocd-rbac-cm ConfigMap to connect the argocd-admins Okta group to the builtin Argo CD admin role. apiVersion : v1 kind : ConfigMap metadata : name : argocd-rbac-cm data : policy.csv : | g, argocd-admins, role:admin scopes : '[email,groups]' OIDC (without Dex) \u00b6 Do you want groups for RBAC later? If you want groups scope returned from Okta you need to unfortunately contact support to enable API Access Management with Okta or just use SAML above! Next you may need the API Access Management feature, which the support team can enable for your OktaPreview domain for testing, to enable \"custom scopes\" and a separate endpoint to use instead of the \"public\" /oauth2/v1/authorize API Access Management endpoint. This might be a paid feature if you want OIDC unfortunately. The free alternative I found was SAML. On the Okta Admin page, navigate to the Okta API Management at Security > API . Choose your default authorization server. Click Scopes > Add Scope Add a scope called groups . Click Claims > Add Claim. Add a claim called groups Choose the matching options you need, one example is: e.g. to match groups starting with argocd- you'd return an ID Token using your scope name from step 3 (e.g. groups ) where the groups name matches the regex argocd-.* Edit the argocd-cm and configure the data.oidc.config section: oidc.config : | name: Okta issuer: https://yourorganization.oktapreview.com clientID: 0oaltaqg3oAIf2NOa0h3 clientSecret: ZXF_CfUc-rtwNfzFecGquzdeJ_MxM4sGc8pDT2Tg6t requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"] requestedIDTokenClaims: {\"groups\": {\"essential\": true}}","title":"Okta"},{"location":"operator-manual/user-management/okta/#okta","text":"Are you using this? Please contribute! If you're using this IdP please consider contributing to this document. A working Single Sign-On configuration using Okta via at least two methods was achieved using: SAML (with Dex) OIDC (without Dex)","title":"Okta"},{"location":"operator-manual/user-management/okta/#saml-with-dex","text":"Okta app group assignment The Okta app's Group Attribute Statements regex will be used later to map Okta groups to Argo CD RBAC roles. Create a new SAML application in Okta UI. I've disabled App Visibility because Dex doesn't support Provider-initiated login flows. Click View setup instructions after creating the application in Okta. Copy the SSO URL to the argocd-cm in the data.oicd Download the CA certificate to use in the argocd-cm configuration. If you are using this in the caData field, you will need to pass the entire certificate (including -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- stanzas) through base64 encoding, for example, base64 my_cert.pem . If you are using the ca field and storing the CA certificate separately as a secret, you will need to mount the secret to the dex container in the argocd-dex-server Deployment. Edit the argocd-cm and configure the data.dex.config section: dex.config : | logger: level: debug format: json connectors: - type: saml id: okta name: Okta config: ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml # You need `caData` _OR_ `ca`, but not both. caData: | <CA cert passed through base64 encoding> # You need `caData` _OR_ `ca`, but not both. # Path to mount the secret to the dex container ca: /path/to/ca.pem redirectURI: https://ui.argocd.yourorganization.net/api/dex/callback usernameAttr: email emailAttr: email groupsAttr: group","title":"SAML (with Dex)"},{"location":"operator-manual/user-management/okta/#private-deployment","text":"It is possible to setup Okta SSO with a private Argo CD installation, where the Okta callback URL is the only publicly exposed endpoint. The settings are largely the same with a few changes in the Okta app configuration and the data.dex.config section of the argocd-cm ConfigMap. Using this deployment model, the user connects to the private Argo CD UI and the Okta authentication flow seamlessly redirects back to the private UI URL. Often this public endpoint is exposed through an Ingress object . Update the URLs in the Okta app's General settings The Single sign on URL field points to the public exposed endpoint, and all other URL fields point to the internal endpoint. Update the data.dex.config section of the argocd-cm ConfigMap with the external endpoint reference. dex.config : | logger: level: debug connectors: - type: saml id: okta name: Okta config: ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml # You need `caData` _OR_ `ca`, but not both. caData: | <CA cert passed through base64 encoding> # You need `caData` _OR_ `ca`, but not both. # Path to mount the secret to the dex container ca: /path/to/ca.pem redirectURI: https://external.path.to.argocd.io/api/dex/callback usernameAttr: email emailAttr: email groupsAttr: group","title":"Private deployment"},{"location":"operator-manual/user-management/okta/#connect-okta-groups-to-argo-cd-roles","text":"Argo CD is aware of user memberships of Okta groups that match the Group Attribute Statements regex. The example above uses the argocd-* regex, so Argo CD would be aware of a group named argocd-admins . Modify the argocd-rbac-cm ConfigMap to connect the argocd-admins Okta group to the builtin Argo CD admin role. apiVersion : v1 kind : ConfigMap metadata : name : argocd-rbac-cm data : policy.csv : | g, argocd-admins, role:admin scopes : '[email,groups]'","title":"Connect Okta Groups to Argo CD Roles"},{"location":"operator-manual/user-management/okta/#oidc-without-dex","text":"Do you want groups for RBAC later? If you want groups scope returned from Okta you need to unfortunately contact support to enable API Access Management with Okta or just use SAML above! Next you may need the API Access Management feature, which the support team can enable for your OktaPreview domain for testing, to enable \"custom scopes\" and a separate endpoint to use instead of the \"public\" /oauth2/v1/authorize API Access Management endpoint. This might be a paid feature if you want OIDC unfortunately. The free alternative I found was SAML. On the Okta Admin page, navigate to the Okta API Management at Security > API . Choose your default authorization server. Click Scopes > Add Scope Add a scope called groups . Click Claims > Add Claim. Add a claim called groups Choose the matching options you need, one example is: e.g. to match groups starting with argocd- you'd return an ID Token using your scope name from step 3 (e.g. groups ) where the groups name matches the regex argocd-.* Edit the argocd-cm and configure the data.oidc.config section: oidc.config : | name: Okta issuer: https://yourorganization.oktapreview.com clientID: 0oaltaqg3oAIf2NOa0h3 clientSecret: ZXF_CfUc-rtwNfzFecGquzdeJ_MxM4sGc8pDT2Tg6t requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"] requestedIDTokenClaims: {\"groups\": {\"essential\": true}}","title":"OIDC (without Dex)"},{"location":"operator-manual/user-management/onelogin/","text":"OneLogin \u00b6 Are you using this? Please contribute! If you're using this IdP please consider contributing to this document. Integrating OneLogin and ArgoCD \u00b6 These instructions will take you through the entire process of getting your ArgoCD application authenticating with OneLogin. You will create a custom OIDC application within OneLogin and configure ArgoCD to use OneLogin for authentication, using UserRoles set in OneLogin to determine privileges in Argo. Creating and Configuring OneLogin App \u00b6 For your ArgoCD application to communicate with OneLogin, you will first need to create and configure the OIDC application on the OneLogin side. Create OIDC Application \u00b6 To create the application, do the following: Navigate to your OneLogin portal, then Administration > Applications. Click \"Add App\". Search for \"OpenID Connect\" in the search field. Select the \"OpenId Connect (OIDC)\" app to create. Update the \"Display Name\" field (could be something like \"ArgoCD (Production)\". Click \"Save\". Configuring OIDC Application Settings \u00b6 Now that the application is created, you can configure the settings of the app. Configuration Tab \u00b6 Update the \"Configuration\" settings as follows: Select the \"Configuration\" tab on the left. Set the \"Login Url\" field to https://argocd.myproject.com/auth/login, replacing the hostname with your own. Set the \"Redirect Url\" field to https://argocd.myproject.com/auth/callback, replacing the hostname with your own. Click \"Save\". OneLogin may not let you save any other fields until the above fields are set. Info Tab \u00b6 You can update the \"Display Name\", \"Description\", \"Notes\", or the display images that appear in the OneLogin portal here. Parameters Tab \u00b6 This tab controls what information is sent to Argo in the token. By default it will contain a Groups field and \"Credentials are\" is set to \"Configured by admin\". Leave \"Credentials are\" as the default. How the Value of the Groups field is configured will vary based on your needs, but to use OneLogin User roles for ArgoCD privileges, configure the Value of the Groups field with the following: Click \"Groups\". A modal appears. Set the \"Default if no value selected\" field to \"User Roles\". Set the transform field (below it) to \"Semicolon Delimited Input\". Click \"Save\". When a user attempts to login to Argo with OneLogin, the User roles in OneLogin, say, Manager, ProductTeam, and TestEngineering, will be included in the Groups field in the token. These are the values needed for Argo to assign permissions. The groups field in the token will look similar to the following: \"groups\": [ \"Manager\", \"ProductTeam\", \"TestEngineering\", ], Rules Tab \u00b6 To get up and running, you do not need to make modifications to any settings here. SSO Tab \u00b6 This tab contains much of the information needed to be placed into your ArgoCD configuration file (API endpoints, client ID, client secret). Confirm \"Application Type\" is set to \"Web\". Confirm \"Token Endpoint\" is set to \"Basic\". Access Tab \u00b6 This tab controls who can see this application in the OneLogin portal. Select the roles you wish to have access to this application and click \"Save\". Users Tab \u00b6 This tab shows you the individual users that have access to this application (usually the ones that have roles specified in the Access Tab). To get up and running, you do not need to make modifications to any settings here. Privileges Tab \u00b6 This tab shows which OneLogin users can configure this app. To get up and running, you do not need to make modifications to any settings here. Updating OIDC configuration in ArgoCD \u00b6 Now that the OIDC application is configured in OneLogin, you can update Argo configuration to communicate with OneLogin, as well as control permissions for those users that authenticate via OneLogin. Tell Argo where OneLogin is \u00b6 Argo needs to have its config map (argocd-cm) updated in order to communicate with OneLogin. Consider the following yaml: apiVersion : v1 kind : ConfigMap metadata : name : argocd - cm data : url : https ://< argocd . myproject . com > oidc . config : | name : OneLogin issuer : https :// openid - connect . onelogin . com / oidc clientID : aaaaaaaa - aaaa - aaaa - aaaa - aaaaaaaaaaaaaaaaaa clientSecret : abcdef123456 # Optional set of OIDC scopes to request . If omitted , defaults to : [ \"openid\" , \"profile\" , \"email\" , \"groups\" ] requestedScopes : [ \"openid\" , \"profile\" , \"email\" , \"groups\" ] The \"url\" key should have a value of the hostname of your Argo project. The \"clientID\" is taken from the SSO tab of the OneLogin application. The \u201cissuer\u201d is taken from the SSO tab of the OneLogin application. It is one of the issuer api endpoints. The \"clientSecret\" value is a client secret located in the SSO tab of the OneLogin application. If you get an invalid_client error when trying the authenticate with OneLogin, there is a possibility that your client secret is not proper. Keep in mind that in previous versions clientSecret value had to be base64 encrypted, but it is not required anymore. Configure Permissions for OneLogin Auth'd Users \u00b6 Permissions in ArgoCD can be configured by using the OneLogin role names that are passed in the Groups field in the token. Consider the following yaml in argocd-rbac-cm.yaml: apiVersion : v1 kind : ConfigMap metadata : name : argocd - rbac - cm namespace : argocd data : policy . default : role : readonly policy . csv : | p , role : org - admin , applications , *, */*, allow p , role : org - admin , clusters , get , *, allow p , role : org - admin , repositories , get , *, allow p , role : org - admin , repositories , create , *, allow p , role : org - admin , repositories , update , *, allow p , role : org - admin , repositories , delete , *, allow g , TestEngineering , role : org - admin In OneLogin, a user with user role \"TestEngineering\" will receive ArgoCD admin privileges when they log in to Argo via OneLogin. All other users will receive the readonly role. The key takeaway here is that \"TestEngineering\" is passed via the Group field in the token (which is specified in the Parameters tab in OneLogin).","title":"OneLogin"},{"location":"operator-manual/user-management/onelogin/#onelogin","text":"Are you using this? Please contribute! If you're using this IdP please consider contributing to this document.","title":"OneLogin"},{"location":"operator-manual/user-management/onelogin/#integrating-onelogin-and-argocd","text":"These instructions will take you through the entire process of getting your ArgoCD application authenticating with OneLogin. You will create a custom OIDC application within OneLogin and configure ArgoCD to use OneLogin for authentication, using UserRoles set in OneLogin to determine privileges in Argo.","title":"Integrating OneLogin and ArgoCD"},{"location":"operator-manual/user-management/onelogin/#creating-and-configuring-onelogin-app","text":"For your ArgoCD application to communicate with OneLogin, you will first need to create and configure the OIDC application on the OneLogin side.","title":"Creating and Configuring OneLogin App"},{"location":"operator-manual/user-management/onelogin/#create-oidc-application","text":"To create the application, do the following: Navigate to your OneLogin portal, then Administration > Applications. Click \"Add App\". Search for \"OpenID Connect\" in the search field. Select the \"OpenId Connect (OIDC)\" app to create. Update the \"Display Name\" field (could be something like \"ArgoCD (Production)\". Click \"Save\".","title":"Create OIDC Application"},{"location":"operator-manual/user-management/onelogin/#configuring-oidc-application-settings","text":"Now that the application is created, you can configure the settings of the app.","title":"Configuring OIDC Application Settings"},{"location":"operator-manual/user-management/onelogin/#configuration-tab","text":"Update the \"Configuration\" settings as follows: Select the \"Configuration\" tab on the left. Set the \"Login Url\" field to https://argocd.myproject.com/auth/login, replacing the hostname with your own. Set the \"Redirect Url\" field to https://argocd.myproject.com/auth/callback, replacing the hostname with your own. Click \"Save\". OneLogin may not let you save any other fields until the above fields are set.","title":"Configuration Tab"},{"location":"operator-manual/user-management/onelogin/#info-tab","text":"You can update the \"Display Name\", \"Description\", \"Notes\", or the display images that appear in the OneLogin portal here.","title":"Info Tab"},{"location":"operator-manual/user-management/onelogin/#parameters-tab","text":"This tab controls what information is sent to Argo in the token. By default it will contain a Groups field and \"Credentials are\" is set to \"Configured by admin\". Leave \"Credentials are\" as the default. How the Value of the Groups field is configured will vary based on your needs, but to use OneLogin User roles for ArgoCD privileges, configure the Value of the Groups field with the following: Click \"Groups\". A modal appears. Set the \"Default if no value selected\" field to \"User Roles\". Set the transform field (below it) to \"Semicolon Delimited Input\". Click \"Save\". When a user attempts to login to Argo with OneLogin, the User roles in OneLogin, say, Manager, ProductTeam, and TestEngineering, will be included in the Groups field in the token. These are the values needed for Argo to assign permissions. The groups field in the token will look similar to the following: \"groups\": [ \"Manager\", \"ProductTeam\", \"TestEngineering\", ],","title":"Parameters Tab"},{"location":"operator-manual/user-management/onelogin/#rules-tab","text":"To get up and running, you do not need to make modifications to any settings here.","title":"Rules Tab"},{"location":"operator-manual/user-management/onelogin/#sso-tab","text":"This tab contains much of the information needed to be placed into your ArgoCD configuration file (API endpoints, client ID, client secret). Confirm \"Application Type\" is set to \"Web\". Confirm \"Token Endpoint\" is set to \"Basic\".","title":"SSO Tab"},{"location":"operator-manual/user-management/onelogin/#access-tab","text":"This tab controls who can see this application in the OneLogin portal. Select the roles you wish to have access to this application and click \"Save\".","title":"Access Tab"},{"location":"operator-manual/user-management/onelogin/#users-tab","text":"This tab shows you the individual users that have access to this application (usually the ones that have roles specified in the Access Tab). To get up and running, you do not need to make modifications to any settings here.","title":"Users Tab"},{"location":"operator-manual/user-management/onelogin/#privileges-tab","text":"This tab shows which OneLogin users can configure this app. To get up and running, you do not need to make modifications to any settings here.","title":"Privileges Tab"},{"location":"operator-manual/user-management/onelogin/#updating-oidc-configuration-in-argocd","text":"Now that the OIDC application is configured in OneLogin, you can update Argo configuration to communicate with OneLogin, as well as control permissions for those users that authenticate via OneLogin.","title":"Updating OIDC configuration in ArgoCD"},{"location":"operator-manual/user-management/onelogin/#tell-argo-where-onelogin-is","text":"Argo needs to have its config map (argocd-cm) updated in order to communicate with OneLogin. Consider the following yaml: apiVersion : v1 kind : ConfigMap metadata : name : argocd - cm data : url : https ://< argocd . myproject . com > oidc . config : | name : OneLogin issuer : https :// openid - connect . onelogin . com / oidc clientID : aaaaaaaa - aaaa - aaaa - aaaa - aaaaaaaaaaaaaaaaaa clientSecret : abcdef123456 # Optional set of OIDC scopes to request . If omitted , defaults to : [ \"openid\" , \"profile\" , \"email\" , \"groups\" ] requestedScopes : [ \"openid\" , \"profile\" , \"email\" , \"groups\" ] The \"url\" key should have a value of the hostname of your Argo project. The \"clientID\" is taken from the SSO tab of the OneLogin application. The \u201cissuer\u201d is taken from the SSO tab of the OneLogin application. It is one of the issuer api endpoints. The \"clientSecret\" value is a client secret located in the SSO tab of the OneLogin application. If you get an invalid_client error when trying the authenticate with OneLogin, there is a possibility that your client secret is not proper. Keep in mind that in previous versions clientSecret value had to be base64 encrypted, but it is not required anymore.","title":"Tell Argo where OneLogin is"},{"location":"operator-manual/user-management/onelogin/#configure-permissions-for-onelogin-authd-users","text":"Permissions in ArgoCD can be configured by using the OneLogin role names that are passed in the Groups field in the token. Consider the following yaml in argocd-rbac-cm.yaml: apiVersion : v1 kind : ConfigMap metadata : name : argocd - rbac - cm namespace : argocd data : policy . default : role : readonly policy . csv : | p , role : org - admin , applications , *, */*, allow p , role : org - admin , clusters , get , *, allow p , role : org - admin , repositories , get , *, allow p , role : org - admin , repositories , create , *, allow p , role : org - admin , repositories , update , *, allow p , role : org - admin , repositories , delete , *, allow g , TestEngineering , role : org - admin In OneLogin, a user with user role \"TestEngineering\" will receive ArgoCD admin privileges when they log in to Argo via OneLogin. All other users will receive the readonly role. The key takeaway here is that \"TestEngineering\" is passed via the Group field in the token (which is specified in the Parameters tab in OneLogin).","title":"Configure Permissions for OneLogin Auth'd Users"},{"location":"operator-manual/user-management/openunison/","text":"OpenUnison \u00b6 Integrating OpenUnison and ArgoCD \u00b6 These instructions will take your through the steps of integrating OpenUnison and ArgoCD to support single sign-on and add a \"badge\" to your OpenUnison portal to create a single access point for both Kubernetes and ArgoCD. These instructions assume you'll be using both ArgoCD's web interface and command line interface. These instructions assume you are running OpenUnison 1.0.20+ . Create an OpenUnison Trust \u00b6 Update the below Trust object and add it to the openunison namespace. The only change you need to make is to replace argocd.apps.domain.com with the host name of your ArgoCD URL. The localhost URL is needed for the cli to work. There is no client secret used for ArgoCD since the cli will not work with it. apiVersion : openunison . tremolo . io / v1 kind : Trust metadata : name : argocd namespace : openunison spec : accessTokenSkewMillis : 120000 accessTokenTimeToLive : 1200000 authChainName : LoginService clientId : argocd codeLastMileKeyName : lastmile - oidc codeTokenSkewMilis : 60000 publicEndpoint : true redirectURI : - https :// argocd . apps . domain . com /auth/ callback - http :// localhost : 8085 /auth/ callback signedUserInfo : true verifyRedirect : true Create a \"Badge\" in OpenUnison \u00b6 Download the yaml for a PortalUrl object and update the url to point to your ArgoCD instance. Add the updated PortalUrl to the openunison namespace of your cluster. Configure SSO in ArgoCD \u00b6 Next, update the argocd-cm ConfigMap in the argocd namespace. Add the url and oidc.config sections as seen below. Update issuer with the host for OpenUnison. apiVersion : v1 kind : ConfigMap metadata : name : argocd - cm data : url : https :// argocd . apps . domain . com oidc . config : |- name : OpenUnison issuer : https :// k8sou . apps . 192 - 168 - 2 - 144 . nip . io /auth/idp/ k8sIdp clientID : argocd requestedScopes : [ \"openid\" , \"profile\" , \"email\" , \"groups\" ] If everything went correctly, login to your OpenUnison instance and there should be a badge for ArgoCD. Clicking on that badge opens ArgoCD in a new window, already logged in! Additionally, launching the argocd cli tool will launch a browser to login to OpenUnison. Configure ArgoCD Policy \u00b6 OpenUnison places groups in the groups claim. These claims will show up when you click on the user-info section of the ArgoCD portal. If you're using LDAP, Active Directory, or Active Directory Federation Services the groups will provided to ArgoCD as full Distinguished Names (DN). Since a DN containers commas ( , ) you'll need to quote the group name in your policy. For instance to assign CN=k8s_login_cluster_admins,CN=Users,DC=ent2k12,DC=domain,DC=com as an administrator would look like: apiVersion : v1 kind : ConfigMap metadata : name : argocd - rbac - cm namespace : argocd data : policy . csv : | g , \"CN=k8s_login_cluster_admins,CN=Users,DC=ent2k12,DC=domain,DC=com\" , role : admin","title":"OpenUnison"},{"location":"operator-manual/user-management/openunison/#openunison","text":"","title":"OpenUnison"},{"location":"operator-manual/user-management/openunison/#integrating-openunison-and-argocd","text":"These instructions will take your through the steps of integrating OpenUnison and ArgoCD to support single sign-on and add a \"badge\" to your OpenUnison portal to create a single access point for both Kubernetes and ArgoCD. These instructions assume you'll be using both ArgoCD's web interface and command line interface. These instructions assume you are running OpenUnison 1.0.20+ .","title":"Integrating OpenUnison and ArgoCD"},{"location":"operator-manual/user-management/openunison/#create-an-openunison-trust","text":"Update the below Trust object and add it to the openunison namespace. The only change you need to make is to replace argocd.apps.domain.com with the host name of your ArgoCD URL. The localhost URL is needed for the cli to work. There is no client secret used for ArgoCD since the cli will not work with it. apiVersion : openunison . tremolo . io / v1 kind : Trust metadata : name : argocd namespace : openunison spec : accessTokenSkewMillis : 120000 accessTokenTimeToLive : 1200000 authChainName : LoginService clientId : argocd codeLastMileKeyName : lastmile - oidc codeTokenSkewMilis : 60000 publicEndpoint : true redirectURI : - https :// argocd . apps . domain . com /auth/ callback - http :// localhost : 8085 /auth/ callback signedUserInfo : true verifyRedirect : true","title":"Create an OpenUnison Trust"},{"location":"operator-manual/user-management/openunison/#create-a-badge-in-openunison","text":"Download the yaml for a PortalUrl object and update the url to point to your ArgoCD instance. Add the updated PortalUrl to the openunison namespace of your cluster.","title":"Create a \"Badge\" in OpenUnison"},{"location":"operator-manual/user-management/openunison/#configure-sso-in-argocd","text":"Next, update the argocd-cm ConfigMap in the argocd namespace. Add the url and oidc.config sections as seen below. Update issuer with the host for OpenUnison. apiVersion : v1 kind : ConfigMap metadata : name : argocd - cm data : url : https :// argocd . apps . domain . com oidc . config : |- name : OpenUnison issuer : https :// k8sou . apps . 192 - 168 - 2 - 144 . nip . io /auth/idp/ k8sIdp clientID : argocd requestedScopes : [ \"openid\" , \"profile\" , \"email\" , \"groups\" ] If everything went correctly, login to your OpenUnison instance and there should be a badge for ArgoCD. Clicking on that badge opens ArgoCD in a new window, already logged in! Additionally, launching the argocd cli tool will launch a browser to login to OpenUnison.","title":"Configure SSO in ArgoCD"},{"location":"operator-manual/user-management/openunison/#configure-argocd-policy","text":"OpenUnison places groups in the groups claim. These claims will show up when you click on the user-info section of the ArgoCD portal. If you're using LDAP, Active Directory, or Active Directory Federation Services the groups will provided to ArgoCD as full Distinguished Names (DN). Since a DN containers commas ( , ) you'll need to quote the group name in your policy. For instance to assign CN=k8s_login_cluster_admins,CN=Users,DC=ent2k12,DC=domain,DC=com as an administrator would look like: apiVersion : v1 kind : ConfigMap metadata : name : argocd - rbac - cm namespace : argocd data : policy . csv : | g , \"CN=k8s_login_cluster_admins,CN=Users,DC=ent2k12,DC=domain,DC=com\" , role : admin","title":"Configure ArgoCD Policy"},{"location":"user-guide/","text":"Overview \u00b6 This guide is for developers who have Argo CD installed for them and are managing applications. Note Please make sure you've completed the getting started guide .","title":"Overview"},{"location":"user-guide/#overview","text":"This guide is for developers who have Argo CD installed for them and are managing applications. Note Please make sure you've completed the getting started guide .","title":"Overview"},{"location":"user-guide/app_deletion/","text":"App Deletion \u00b6 Apps can be deleted with or without a cascade option. A cascade delete , deletes both the app and its resources, rather than only the app. Deletion Using argocd \u00b6 To perform a non-cascade delete: argocd app delete APPNAME --cascade = false To perform a cascade delete: argocd app delete APPNAME --cascade or argocd app delete APPNAME Deletion Using kubectl \u00b6 To perform a non-cascade delete: kubectl delete app APPNAME To perform a cascade delete set the finalizer, e.g. using kubctl patch : kubectl patch app APPNAME -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge kubectl delete app APPNAME About The Deletion Finalizer \u00b6 For the technical amongst you, the Argo CD application controller watches for this finalizer: metadata : finalizers : - resources-finalizer.argocd.argoproj.io Argo CD's app controller watches for this and will then delete both the app and its resources. When you invoke argocd app delete with --cascade , the finalizer is added automatically.","title":"App Deletion"},{"location":"user-guide/app_deletion/#app-deletion","text":"Apps can be deleted with or without a cascade option. A cascade delete , deletes both the app and its resources, rather than only the app.","title":"App Deletion"},{"location":"user-guide/app_deletion/#deletion-using-argocd","text":"To perform a non-cascade delete: argocd app delete APPNAME --cascade = false To perform a cascade delete: argocd app delete APPNAME --cascade or argocd app delete APPNAME","title":"Deletion Using argocd"},{"location":"user-guide/app_deletion/#deletion-using-kubectl","text":"To perform a non-cascade delete: kubectl delete app APPNAME To perform a cascade delete set the finalizer, e.g. using kubctl patch : kubectl patch app APPNAME -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge kubectl delete app APPNAME","title":"Deletion Using kubectl"},{"location":"user-guide/app_deletion/#about-the-deletion-finalizer","text":"For the technical amongst you, the Argo CD application controller watches for this finalizer: metadata : finalizers : - resources-finalizer.argocd.argoproj.io Argo CD's app controller watches for this and will then delete both the app and its resources. When you invoke argocd app delete with --cascade , the finalizer is added automatically.","title":"About The Deletion Finalizer"},{"location":"user-guide/application_sources/","text":"Tools \u00b6 Production \u00b6 Argo CD supports several different ways in which Kubernetes manifests can be defined: Kustomize applications Helm charts Ksonnet applications A directory of YAML/JSON/Jsonnet manifests, including Jsonnet . Any custom config management tool configured as a config management plugin Development \u00b6 Argo CD also supports uploading local manifests directly. Since this is an anti-pattern of the GitOps paradigm, this should only be done for development purposes. A user with an override permission is required to upload manifests locally (typically an admin). All of the different Kubernetes deployment tools above are supported. To upload a local application: $ argocd app sync APPNAME --local /path/to/dir/","title":"Tools"},{"location":"user-guide/application_sources/#tools","text":"","title":"Tools"},{"location":"user-guide/application_sources/#production","text":"Argo CD supports several different ways in which Kubernetes manifests can be defined: Kustomize applications Helm charts Ksonnet applications A directory of YAML/JSON/Jsonnet manifests, including Jsonnet . Any custom config management tool configured as a config management plugin","title":"Production"},{"location":"user-guide/application_sources/#development","text":"Argo CD also supports uploading local manifests directly. Since this is an anti-pattern of the GitOps paradigm, this should only be done for development purposes. A user with an override permission is required to upload manifests locally (typically an admin). All of the different Kubernetes deployment tools above are supported. To upload a local application: $ argocd app sync APPNAME --local /path/to/dir/","title":"Development"},{"location":"user-guide/auto_sync/","text":"Automated Sync Policy \u00b6 Argo CD has the ability to automatically sync an application when it detects differences between the desired manifests in Git, and the live state in the cluster. A benefit of automatic sync is that CI/CD pipelines no longer need direct access to the Argo CD API server to perform the deployment. Instead, the pipeline makes a commit and push to the Git repository with the changes to the manifests in the tracking Git repo. To configure automated sync run: argocd app set <APPNAME> --sync-policy automated Alternatively, if creating the application an application manifest, specify a syncPolicy with an automated policy. spec : syncPolicy : automated : {} Automatic Pruning \u00b6 By default (and as a safety mechanism), automated sync will not delete resources when Argo CD detects the resource is no longer defined in Git. To prune the resources, a manual sync can always be performed (with pruning checked). Pruning can also be enabled to happen automatically as part of the automated sync by running: argocd app set <APPNAME> --auto-prune Or by setting the prune option to true in the automated sync policy: spec : syncPolicy : automated : prune : true Automatic Pruning with Allow-Empty (v1.8) \u00b6 By default (and as a safety mechanism), automated sync with prune have a protection from any automation/human errors when there are no target resources. It prevents application from having empty resources. To allow applications have empty resources, run: argocd app set <APPNAME> --allow-empty Or by setting the allow empty option to true in the automated sync policy: spec : syncPolicy : automated : prune : true allowEmpty : true Automatic Self-Healing \u00b6 By default, changes that are made to the live cluster will not trigger automated sync. To enable automatic sync when the live cluster's state deviates from the state defined in Git, run: argocd app set <APPNAME> --self-heal Or by setting the self heal option to true in the automated sync policy: spec : syncPolicy : automated : selfHeal : true Automated Sync Semantics \u00b6 An automated sync will only be performed if the application is OutOfSync. Applications in a Synced or error state will not attempt automated sync. Automated sync will only attempt one synchronization per unique combination of commit SHA1 and application parameters. If the most recent successful sync in the history was already performed against the same commit-SHA and parameters, a second sync will not be attempted, unless selfHeal flag is set to true. If selfHeal flag is set to true then sync will be attempted again after self heal timeout (5 seconds by default) which is controlled by --self-heal-timeout-seconds flag of argocd-application-controller deployment. Automatic sync will not reattempt a sync if the previous sync attempt against the same commit-SHA and parameters had failed. Rollback cannot be performed against an application with automated sync enabled.","title":"Automated Sync Policy"},{"location":"user-guide/auto_sync/#automated-sync-policy","text":"Argo CD has the ability to automatically sync an application when it detects differences between the desired manifests in Git, and the live state in the cluster. A benefit of automatic sync is that CI/CD pipelines no longer need direct access to the Argo CD API server to perform the deployment. Instead, the pipeline makes a commit and push to the Git repository with the changes to the manifests in the tracking Git repo. To configure automated sync run: argocd app set <APPNAME> --sync-policy automated Alternatively, if creating the application an application manifest, specify a syncPolicy with an automated policy. spec : syncPolicy : automated : {}","title":"Automated Sync Policy"},{"location":"user-guide/auto_sync/#automatic-pruning","text":"By default (and as a safety mechanism), automated sync will not delete resources when Argo CD detects the resource is no longer defined in Git. To prune the resources, a manual sync can always be performed (with pruning checked). Pruning can also be enabled to happen automatically as part of the automated sync by running: argocd app set <APPNAME> --auto-prune Or by setting the prune option to true in the automated sync policy: spec : syncPolicy : automated : prune : true","title":"Automatic Pruning"},{"location":"user-guide/auto_sync/#automatic-pruning-with-allow-empty-v18","text":"By default (and as a safety mechanism), automated sync with prune have a protection from any automation/human errors when there are no target resources. It prevents application from having empty resources. To allow applications have empty resources, run: argocd app set <APPNAME> --allow-empty Or by setting the allow empty option to true in the automated sync policy: spec : syncPolicy : automated : prune : true allowEmpty : true","title":"Automatic Pruning with Allow-Empty (v1.8)"},{"location":"user-guide/auto_sync/#automatic-self-healing","text":"By default, changes that are made to the live cluster will not trigger automated sync. To enable automatic sync when the live cluster's state deviates from the state defined in Git, run: argocd app set <APPNAME> --self-heal Or by setting the self heal option to true in the automated sync policy: spec : syncPolicy : automated : selfHeal : true","title":"Automatic Self-Healing"},{"location":"user-guide/auto_sync/#automated-sync-semantics","text":"An automated sync will only be performed if the application is OutOfSync. Applications in a Synced or error state will not attempt automated sync. Automated sync will only attempt one synchronization per unique combination of commit SHA1 and application parameters. If the most recent successful sync in the history was already performed against the same commit-SHA and parameters, a second sync will not be attempted, unless selfHeal flag is set to true. If selfHeal flag is set to true then sync will be attempted again after self heal timeout (5 seconds by default) which is controlled by --self-heal-timeout-seconds flag of argocd-application-controller deployment. Automatic sync will not reattempt a sync if the previous sync attempt against the same commit-SHA and parameters had failed. Rollback cannot be performed against an application with automated sync enabled.","title":"Automated Sync Semantics"},{"location":"user-guide/best_practices/","text":"Best Practices \u00b6 Separating Config Vs. Source Code Repositories \u00b6 Using a separate Git repository to hold your kubernetes manifests, keeping the config separate from your application source code, is highly recommended for the following reasons: It provides a clean separation of application code vs. application config. There will be times when you wish to modify just the manifests without triggering an entire CI build. For example, you likely do not want to trigger a build if you simply wish to bump the number of replicas in a Deployment spec. Cleaner audit log. For auditing purposes, a repo which only holds configuration will have a much cleaner Git history of what changes were made, without the noise coming from check-ins due to normal development activity. Your application may be comprised of services built from multiple Git repositories, but is deployed as a single unit. Oftentimes, microservices applications are comprised of services with different versioning schemes, and release cycles (e.g. ELK, Kafka + Zookeeper). It may not make sense to store the manifests in one of the source code repositories of a single component. Separation of access. The developers who are developing the application, may not necessarily be the same people who can/should push to production environments, either intentionally or unintentionally. By having separate repos, commit access can be given to the source code repo, and not the application config repo. If you are automating your CI pipeline, pushing manifest changes to the same Git repository can trigger an infinite loop of build jobs and Git commit triggers. Having a separate repo to push config changes to, prevents this from happening. Leaving Room For Imperativeness \u00b6 It may be desired to leave room for some imperativeness/automation, and not have everything defined in your Git manifests. For example, if you want the number of your deployment's replicas to be managed by Horizontal Pod Autoscaler , then you would not want to track replicas in Git. apiVersion : apps/v1 kind : Deployment metadata : name : nginx-deployment spec : # do not include replicas in the manifests if you want replicas to be controlled by HPA # replicas: 1 template : spec : containers : - image : nginx:1.7.9 name : nginx ports : - containerPort : 80 ... Ensuring Manifests At Git Revisions Are Truly Immutable \u00b6 When using templating tools like helm or kustomize , it is possible for manifests to change their meaning from one day to the next. This is typically caused by changes made to an upstream helm repository or kustomize base. For example, consider the following kustomization.yaml bases : - github.com/argoproj/argo-cd//manifests/cluster-install The above kustomization has a remote base to the HEAD revision of the argo-cd repo. Since this is not a stable target, the manifests for this kustomize application can suddenly change meaning, even without any changes to your own Git repository. A better version would be to use a Git tag or commit SHA. For example: bases : - github.com/argoproj/argo-cd//manifests/cluster-install?ref=v0.11.1","title":"Best Practices"},{"location":"user-guide/best_practices/#best-practices","text":"","title":"Best Practices"},{"location":"user-guide/best_practices/#separating-config-vs-source-code-repositories","text":"Using a separate Git repository to hold your kubernetes manifests, keeping the config separate from your application source code, is highly recommended for the following reasons: It provides a clean separation of application code vs. application config. There will be times when you wish to modify just the manifests without triggering an entire CI build. For example, you likely do not want to trigger a build if you simply wish to bump the number of replicas in a Deployment spec. Cleaner audit log. For auditing purposes, a repo which only holds configuration will have a much cleaner Git history of what changes were made, without the noise coming from check-ins due to normal development activity. Your application may be comprised of services built from multiple Git repositories, but is deployed as a single unit. Oftentimes, microservices applications are comprised of services with different versioning schemes, and release cycles (e.g. ELK, Kafka + Zookeeper). It may not make sense to store the manifests in one of the source code repositories of a single component. Separation of access. The developers who are developing the application, may not necessarily be the same people who can/should push to production environments, either intentionally or unintentionally. By having separate repos, commit access can be given to the source code repo, and not the application config repo. If you are automating your CI pipeline, pushing manifest changes to the same Git repository can trigger an infinite loop of build jobs and Git commit triggers. Having a separate repo to push config changes to, prevents this from happening.","title":"Separating Config Vs. Source Code Repositories"},{"location":"user-guide/best_practices/#leaving-room-for-imperativeness","text":"It may be desired to leave room for some imperativeness/automation, and not have everything defined in your Git manifests. For example, if you want the number of your deployment's replicas to be managed by Horizontal Pod Autoscaler , then you would not want to track replicas in Git. apiVersion : apps/v1 kind : Deployment metadata : name : nginx-deployment spec : # do not include replicas in the manifests if you want replicas to be controlled by HPA # replicas: 1 template : spec : containers : - image : nginx:1.7.9 name : nginx ports : - containerPort : 80 ...","title":"Leaving Room For Imperativeness"},{"location":"user-guide/best_practices/#ensuring-manifests-at-git-revisions-are-truly-immutable","text":"When using templating tools like helm or kustomize , it is possible for manifests to change their meaning from one day to the next. This is typically caused by changes made to an upstream helm repository or kustomize base. For example, consider the following kustomization.yaml bases : - github.com/argoproj/argo-cd//manifests/cluster-install The above kustomization has a remote base to the HEAD revision of the argo-cd repo. Since this is not a stable target, the manifests for this kustomize application can suddenly change meaning, even without any changes to your own Git repository. A better version would be to use a Git tag or commit SHA. For example: bases : - github.com/argoproj/argo-cd//manifests/cluster-install?ref=v0.11.1","title":"Ensuring Manifests At Git Revisions Are Truly Immutable"},{"location":"user-guide/build-environment/","text":"Build Environment \u00b6 v1.4 Custom tools , Helm , and Jsonnet support the following build env vars: ARGOCD_APP_NAME - name of application ARGOCD_APP_NAMESPACE - destination application namespace. ARGOCD_APP_REVISION - the resolved revision, e.g. f913b6cbf58aa5ae5ca1f8a2b149477aebcbd9d8 ARGOCD_APP_SOURCE_PATH - the path of the app within the repo ARGOCD_APP_SOURCE_REPO_URL the repo's URL ARGOCD_APP_SOURCE_TARGET_REVISION - the target revision from the spec, e.g. master . KUBE_VERSION - the version of kubernetes KUBE_API_VERSIONS = the version of kubernetes API","title":"Build Environment"},{"location":"user-guide/build-environment/#build-environment","text":"v1.4 Custom tools , Helm , and Jsonnet support the following build env vars: ARGOCD_APP_NAME - name of application ARGOCD_APP_NAMESPACE - destination application namespace. ARGOCD_APP_REVISION - the resolved revision, e.g. f913b6cbf58aa5ae5ca1f8a2b149477aebcbd9d8 ARGOCD_APP_SOURCE_PATH - the path of the app within the repo ARGOCD_APP_SOURCE_REPO_URL the repo's URL ARGOCD_APP_SOURCE_TARGET_REVISION - the target revision from the spec, e.g. master . KUBE_VERSION - the version of kubernetes KUBE_API_VERSIONS = the version of kubernetes API","title":"Build Environment"},{"location":"user-guide/ci_automation/","text":"Automation from CI Pipelines \u00b6 Argo CD follows the GitOps model of deployment, where desired configuration changes are first pushed to Git, and the cluster state then syncs to the desired state in git. This is a departure from imperative pipelines which do not traditionally use Git repositories to hold application config. To push new container images into to a cluster managed by Argo CD, the following workflow (or variations), might be used: Build And Publish A New Container Image \u00b6 docker build -t mycompany/guestbook:v2.0 . docker push mycompany/guestbook:v2.0 Update The Local Manifests Using Your Preferred Templating Tool, And Push The Changes To Git \u00b6 Tip The use of a different Git repository to hold your kubernetes manifests (separate from your application source code), is highly recommended. See best practices for further rationale. git clone https://github.com/mycompany/guestbook-config.git cd guestbook-config # kustomize kustomize edit set image mycompany/guestbook:v2.0 # ksonnet ks param set guestbook image mycompany/guestbook:v2.0 # plain yaml kubectl patch --local -f config-deployment.yaml -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"guestbook\",\"image\":\"mycompany/guestbook:v2.0\"}]}}}}' -o yaml git add . -m \"Update guestbook to v2.0\" git push Synchronize The App (Optional) \u00b6 For convenience, the argocd CLI can be downloaded directly from the API server. This is useful so that the CLI used in the CI pipeline is always kept in-sync and uses argocd binary that is always compatible with the Argo CD API server. export ARGOCD_SERVER = argocd.mycompany.com export ARGOCD_AUTH_TOKEN = <JWT token generated from project> curl -sSL -o /usr/local/bin/argocd https:// ${ ARGOCD_SERVER } /download/argocd-linux-amd64 argocd app sync guestbook argocd app wait guestbook If automated synchronization is configured for the application, this step is unnecessary. The controller will automatically detect the new config (fast tracked using a webhook , or polled every 3 minutes), and automatically sync the new manifests.","title":"Automation from CI Pipelines"},{"location":"user-guide/ci_automation/#automation-from-ci-pipelines","text":"Argo CD follows the GitOps model of deployment, where desired configuration changes are first pushed to Git, and the cluster state then syncs to the desired state in git. This is a departure from imperative pipelines which do not traditionally use Git repositories to hold application config. To push new container images into to a cluster managed by Argo CD, the following workflow (or variations), might be used:","title":"Automation from CI Pipelines"},{"location":"user-guide/ci_automation/#build-and-publish-a-new-container-image","text":"docker build -t mycompany/guestbook:v2.0 . docker push mycompany/guestbook:v2.0","title":"Build And Publish A New Container Image"},{"location":"user-guide/ci_automation/#update-the-local-manifests-using-your-preferred-templating-tool-and-push-the-changes-to-git","text":"Tip The use of a different Git repository to hold your kubernetes manifests (separate from your application source code), is highly recommended. See best practices for further rationale. git clone https://github.com/mycompany/guestbook-config.git cd guestbook-config # kustomize kustomize edit set image mycompany/guestbook:v2.0 # ksonnet ks param set guestbook image mycompany/guestbook:v2.0 # plain yaml kubectl patch --local -f config-deployment.yaml -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"guestbook\",\"image\":\"mycompany/guestbook:v2.0\"}]}}}}' -o yaml git add . -m \"Update guestbook to v2.0\" git push","title":"Update The Local Manifests Using Your Preferred Templating Tool, And Push The Changes To Git"},{"location":"user-guide/ci_automation/#synchronize-the-app-optional","text":"For convenience, the argocd CLI can be downloaded directly from the API server. This is useful so that the CLI used in the CI pipeline is always kept in-sync and uses argocd binary that is always compatible with the Argo CD API server. export ARGOCD_SERVER = argocd.mycompany.com export ARGOCD_AUTH_TOKEN = <JWT token generated from project> curl -sSL -o /usr/local/bin/argocd https:// ${ ARGOCD_SERVER } /download/argocd-linux-amd64 argocd app sync guestbook argocd app wait guestbook If automated synchronization is configured for the application, this step is unnecessary. The controller will automatically detect the new config (fast tracked using a webhook , or polled every 3 minutes), and automatically sync the new manifests.","title":"Synchronize The App (Optional)"},{"location":"user-guide/compare-options/","text":"Compare Options \u00b6 Ignoring Resources That Are Extraneous \u00b6 v1.1 You may wish to exclude resources from the app's overall sync status under certain circumstances. E.g. if they are generated by a tool. This can be done by adding this annotation on the resource you wish to exclude: metadata : annotations : argocd.argoproj.io/compare-options : IgnoreExtraneous Note This only affects the sync status. If the resource's health is degraded, then the app will also be degraded. Kustomize has a feature that allows you to generate config maps ( read more \u29c9 ). You can set generatorOptions to add this annotation so that your app remains in sync: configMapGenerator : - name : my-map literals : - foo=bar generatorOptions : annotations : argocd.argoproj.io/compare-options : IgnoreExtraneous kind : Kustomization Note generatorOptions adds annotations to both config maps and secrets ( read more \u29c9 ). You may wish to combine this with the Prune=false sync option .","title":"Compare Options"},{"location":"user-guide/compare-options/#compare-options","text":"","title":"Compare Options"},{"location":"user-guide/compare-options/#ignoring-resources-that-are-extraneous","text":"v1.1 You may wish to exclude resources from the app's overall sync status under certain circumstances. E.g. if they are generated by a tool. This can be done by adding this annotation on the resource you wish to exclude: metadata : annotations : argocd.argoproj.io/compare-options : IgnoreExtraneous Note This only affects the sync status. If the resource's health is degraded, then the app will also be degraded. Kustomize has a feature that allows you to generate config maps ( read more \u29c9 ). You can set generatorOptions to add this annotation so that your app remains in sync: configMapGenerator : - name : my-map literals : - foo=bar generatorOptions : annotations : argocd.argoproj.io/compare-options : IgnoreExtraneous kind : Kustomization Note generatorOptions adds annotations to both config maps and secrets ( read more \u29c9 ). You may wish to combine this with the Prune=false sync option .","title":"Ignoring Resources That Are Extraneous"},{"location":"user-guide/config-management-plugins/","text":"Plugins \u00b6 Argo CD allows integrating more config management tools using config management plugins. Following changes are required to configure new plugin: Make sure required binaries are available in argocd-repo-server pod. The binaries can be added via volume mounts or using custom image (see custom_tools ). Register a new plugin in argocd-cm ConfigMap: data : configManagementPlugins : | - name: pluginName init: # Optional command to initialize application source directory command: [\"sample command\"] args: [\"sample args\"] generate: # Command to generate manifests YAML command: [\"sample command\"] args: [\"sample args\"] The generate command must print a valid YAML stream to stdout. Both init and generate commands are executed inside the application source directory. Create an application and specify required config management plugin name. argocd app create <appName> --config-management-plugin <pluginName> More config management plugin examples are available in argocd-example-apps . Environment \u00b6 Commands have access to The system environment variables Standard build environment Variables in the application spec: v1.2 spec : source : plugin : env : - name : FOO value : bar","title":"Plugins"},{"location":"user-guide/config-management-plugins/#plugins","text":"Argo CD allows integrating more config management tools using config management plugins. Following changes are required to configure new plugin: Make sure required binaries are available in argocd-repo-server pod. The binaries can be added via volume mounts or using custom image (see custom_tools ). Register a new plugin in argocd-cm ConfigMap: data : configManagementPlugins : | - name: pluginName init: # Optional command to initialize application source directory command: [\"sample command\"] args: [\"sample args\"] generate: # Command to generate manifests YAML command: [\"sample command\"] args: [\"sample args\"] The generate command must print a valid YAML stream to stdout. Both init and generate commands are executed inside the application source directory. Create an application and specify required config management plugin name. argocd app create <appName> --config-management-plugin <pluginName> More config management plugin examples are available in argocd-example-apps .","title":"Plugins"},{"location":"user-guide/config-management-plugins/#environment","text":"Commands have access to The system environment variables Standard build environment Variables in the application spec: v1.2 spec : source : plugin : env : - name : FOO value : bar","title":"Environment"},{"location":"user-guide/diffing/","text":"Diffing Customization \u00b6 It is possible for an application to be OutOfSync even immediately after a successful Sync operation. Some reasons for this might be: There is a bug in the manifest, where it contains extra/unknown fields from the actual K8s spec. These extra fields would get dropped when querying Kubernetes for the live state, resulting in an OutOfSync status indicating a missing field was detected. The sync was performed (with pruning disabled), and there are resources which need to be deleted. A controller or mutating webhook is altering the object after it was submitted to Kubernetes in a manner which contradicts Git. A Helm chart is using a template function such as randAlphaNum , which generates different data every time helm template is invoked. For Horizontal Pod Autoscaling (HPA) objects, the HPA controller is known to reorder spec.metrics in a specific order. See kubernetes issue #74099 . To work around this, you can order spec.metrics in Git in the same order that the controller prefers. In case it is impossible to fix the upstream issue, Argo CD allows you to optionally ignore differences of problematic resources. The diffing customization can be configured for single or multiple application resources or at a system level. Application Level Configuration \u00b6 Argo CD allows ignoring differences at a specific JSON path, using RFC6902 JSON patches . The following sample application is configured to ignore differences in spec.replicas for all deployments: spec : ignoreDifferences : - group : apps kind : Deployment jsonPointers : - /spec/replicas The above customization could be narrowed to a resource with the specified name and optional namespace: spec : ignoreDifferences : - group : apps kind : Deployment name : guestbook namespace : default jsonPointers : - /spec/replicas System-Level Configuration \u00b6 The comparison of resources with well-known issues can be customized at a system level. Ignored differences can be configured for a specified group and kind in resource.customizations key of argocd-cm ConfigMap. Following is an example of a customization which ignores the caBundle field of a MutatingWebhookConfiguration webhooks: data : resource.customizations : | admissionregistration.k8s.io/MutatingWebhookConfiguration: ignoreDifferences: | jsonPointers: - /webhooks/0/clientConfig/caBundle The status field of CustomResourceDefinitions is often stored in Git/Helm manifest and should be ignored during diffing. The ignoreResourceStatusField setting simplifies handling that edge case: data : resource.compareoptions : | # disables status field diffing in specified resource types # 'crd' - CustomResourceDefinition-s (default) # 'all' - all resources # 'none' - disabled ignoreResourceStatusField: crd By default status field is ignored during diffing for CustomResourceDefinition resource. The behavior can be extended to all resources using all value or disabled using none . Known Kubernetes types in CRDs (Resource limits, Volume mounts etc) \u00b6 Some CRDs are re-using data structures defined in the Kubernetes source base and therefore inheriting custom JSON/YAML marshaling. Custom marshalers might serialize CRDs in a slightly different format that causes false positives during drift detection. A typical example is the argoproj.io/Rollout CRD that re-using core/v1/PodSpec data structure. Pod resource requests might be reformatted by the custom marshaller of IntOrString data type: from: resources : requests : cpu : 100m to: resources : requests : cpu : 0.1 The solution is to specify which CRDs fields are using built-in Kubernetes types in the resource.customizations section of argocd-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : resource.customizations : | argoproj.io/Rollout: knownTypeFields: - field: spec.template.spec type: core/v1/PodSpec The list of supported Kubernetes types is available in diffing_known_types.txt","title":"Diffing Customization"},{"location":"user-guide/diffing/#diffing-customization","text":"It is possible for an application to be OutOfSync even immediately after a successful Sync operation. Some reasons for this might be: There is a bug in the manifest, where it contains extra/unknown fields from the actual K8s spec. These extra fields would get dropped when querying Kubernetes for the live state, resulting in an OutOfSync status indicating a missing field was detected. The sync was performed (with pruning disabled), and there are resources which need to be deleted. A controller or mutating webhook is altering the object after it was submitted to Kubernetes in a manner which contradicts Git. A Helm chart is using a template function such as randAlphaNum , which generates different data every time helm template is invoked. For Horizontal Pod Autoscaling (HPA) objects, the HPA controller is known to reorder spec.metrics in a specific order. See kubernetes issue #74099 . To work around this, you can order spec.metrics in Git in the same order that the controller prefers. In case it is impossible to fix the upstream issue, Argo CD allows you to optionally ignore differences of problematic resources. The diffing customization can be configured for single or multiple application resources or at a system level.","title":"Diffing Customization"},{"location":"user-guide/diffing/#application-level-configuration","text":"Argo CD allows ignoring differences at a specific JSON path, using RFC6902 JSON patches . The following sample application is configured to ignore differences in spec.replicas for all deployments: spec : ignoreDifferences : - group : apps kind : Deployment jsonPointers : - /spec/replicas The above customization could be narrowed to a resource with the specified name and optional namespace: spec : ignoreDifferences : - group : apps kind : Deployment name : guestbook namespace : default jsonPointers : - /spec/replicas","title":"Application Level Configuration"},{"location":"user-guide/diffing/#system-level-configuration","text":"The comparison of resources with well-known issues can be customized at a system level. Ignored differences can be configured for a specified group and kind in resource.customizations key of argocd-cm ConfigMap. Following is an example of a customization which ignores the caBundle field of a MutatingWebhookConfiguration webhooks: data : resource.customizations : | admissionregistration.k8s.io/MutatingWebhookConfiguration: ignoreDifferences: | jsonPointers: - /webhooks/0/clientConfig/caBundle The status field of CustomResourceDefinitions is often stored in Git/Helm manifest and should be ignored during diffing. The ignoreResourceStatusField setting simplifies handling that edge case: data : resource.compareoptions : | # disables status field diffing in specified resource types # 'crd' - CustomResourceDefinition-s (default) # 'all' - all resources # 'none' - disabled ignoreResourceStatusField: crd By default status field is ignored during diffing for CustomResourceDefinition resource. The behavior can be extended to all resources using all value or disabled using none .","title":"System-Level Configuration"},{"location":"user-guide/diffing/#known-kubernetes-types-in-crds-resource-limits-volume-mounts-etc","text":"Some CRDs are re-using data structures defined in the Kubernetes source base and therefore inheriting custom JSON/YAML marshaling. Custom marshalers might serialize CRDs in a slightly different format that causes false positives during drift detection. A typical example is the argoproj.io/Rollout CRD that re-using core/v1/PodSpec data structure. Pod resource requests might be reformatted by the custom marshaller of IntOrString data type: from: resources : requests : cpu : 100m to: resources : requests : cpu : 0.1 The solution is to specify which CRDs fields are using built-in Kubernetes types in the resource.customizations section of argocd-cm ConfigMap: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : resource.customizations : | argoproj.io/Rollout: knownTypeFields: - field: spec.template.spec type: core/v1/PodSpec The list of supported Kubernetes types is available in diffing_known_types.txt","title":"Known Kubernetes types in CRDs (Resource limits, Volume mounts etc)"},{"location":"user-guide/gpg-verification/","text":"GnuPG signature verification \u00b6 Overview \u00b6 As of v1.7 it is possible to configure ArgoCD to only sync against commits that are signed in Git using GnuPG. Signature verification is configured on project level. If a project is configured to enforce signature verification, all applications associated with this project must have the commits in the source repositories signed with a GnuPG public key known to ArgoCD. ArgoCD will refuse to sync to any revision that does not have a valid signature made by one of the configured keys. The controller will emit a ResourceComparison error if it tries to sync to a revision that is either not signed, or is signed by an unknown or not allowed public key. By default, signature verification is enabled but not enforced. If you wish to completely disable the GnuPG functionality in ArgoCD, you have to set the environment variable ARGOCD_GPG_ENABLED to \"false\" in the pod templates of the argocd-server , argocd-repo-server and argocd-application-controller deployment manifests. Verification of GnuPG signatures is only supported with Git repositories. It is not possible using Helm repositories. A few words about trust ArgoCD uses a very simple trust model for the keys you import: Once the key is imported, ArgoCD will trust it. ArgoCD does not support more complex trust models, and it is not necessary (nor possible) to sign the public keys you are going to import into ArgoCD. Signature verification targets \u00b6 If signature verification is enforced, ArgoCD will verify the signature using following strategy: If target revision is a pointer to a commit object (i.e. a branch name, the name of a reference such as HEAD or a commit SHA), ArgoCD will perform the signature verification on the commit object the name points to, i.e. a commit. If target revision resolves to a tag and the tag is a lightweight tag, the behaviour is same as if target revision would be a pointer to a commit object. However, if the tag is annotated, the target revision will point to a tag object and thus, the signature verification is performed on the tag object, i.e. the tag itself must be signed (using git tag -s ). Enforcing signature verification \u00b6 To configure enforcing of signature verification, the following steps must be performed: Import the GnuPG public key(s) used for signing commits in ArgoCD Configure a project to enforce signature verification for given keys Once you have configured one or more keys to be required for verification for a given project, enforcement is active for all applications associated with this project. Warning If signature verification is enforced, you will not be able to sync from local sources (i.e. argocd app sync --local ) anymore. Importing GnuPG public keys \u00b6 You can configure the GnuPG public keys that ArgoCD will use for verification of commit signatures using either the CLI, the web UI or configuring it using declarative setup. Note After you have imported a GnuPG key, it may take a while until the key is propagated within the cluster, even if listed as configured. If you still cannot sync to commits signed by the already imported key, please see the troubleshooting section below. Users wanting to manage the GnuPG public key configuration require the RBAC permissions for gpgkeys resources. Manage public keys using the CLI \u00b6 To configure GnuPG public keys using the CLI, use the argocd gpg command. Listing all configured keys \u00b6 To list all configured keys known to ArgoCD, use the argocd gpg list sub-command: argocd gpg list Show information about a certain key \u00b6 To get information about a specific key, use the argocd gpg get sub-command: argocd gpg get <key-id> Importing a key \u00b6 To import a new key to ArgoCD, use the argocd gpg add sub-command: argocd gpg add --from <path-to-key> The key to be imported can be either in binary or ASCII-armored format. Removing a key from configuration \u00b6 To remove a previously configured key from the configuration, use the argocd gpg rm sub-command: argocd gpg rm <key-id> Manage public keys using the Web UI \u00b6 Basic key management functionality for listing, importing and removing GnuPG public keys is implemented in the Web UI. You can find the configuration module from the Settings page in the GnuPG keys module. Please note that when you configure keys using the Web UI, the key must be imported in ASCII armored format for now. Manage public keys in declarative setup \u00b6 ArgoCD stores public keys internally in the argocd-gpg-keys-cm ConfigMap resource, with the public GnuPG key's ID as its name and the ASCII armored key data as string value, i.e. the entry for the GitHub's web-flow signing key would look like follows: 4AEE18F83AFDEB23 : | -----BEGIN PGP PUBLIC KEY BLOCK----- mQENBFmUaEEBCACzXTDt6ZnyaVtueZASBzgnAmK13q9Urgch+sKYeIhdymjuMQta x15OklctmrZtqre5kwPUosG3/B2/ikuPYElcHgGPL4uL5Em6S5C/oozfkYzhwRrT SQzvYjsE4I34To4UdE9KA97wrQjGoz2Bx72WDLyWwctD3DKQtYeHXswXXtXwKfjQ 7Fy4+Bf5IPh76dA8NJ6UtjjLIDlKqdxLW4atHe6xWFaJ+XdLUtsAroZcXBeWDCPa buXCDscJcLJRKZVc62gOZXXtPfoHqvUPp3nuLA4YjH9bphbrMWMf810Wxz9JTd3v yWgGqNY0zbBqeZoGv+TuExlRHT8ASGFS9SVDABEBAAG0NUdpdEh1YiAod2ViLWZs b3cgY29tbWl0IHNpZ25pbmcpIDxub3JlcGx5QGdpdGh1Yi5jb20+iQEiBBMBCAAW BQJZlGhBCRBK7hj4Ov3rIwIbAwIZAQAAmQEH/iATWFmi2oxlBh3wAsySNCNV4IPf DDMeh6j80WT7cgoX7V7xqJOxrfrqPEthQ3hgHIm7b5MPQlUr2q+UPL22t/I+ESF6 9b0QWLFSMJbMSk+BXkvSjH9q8jAO0986/pShPV5DU2sMxnx4LfLfHNhTzjXKokws +8ptJ8uhMNIDXfXuzkZHIxoXk3rNcjDN5c5X+sK8UBRH092BIJWCOfaQt7v7wig5 4Ra28pM9GbHKXVNxmdLpCFyzvyMuCmINYYADsC848QQFFwnd4EQnupo6QvhEVx1O j7wDwvuH5dCrLuLwtwXaQh0onG4583p0LGms2Mf5F+Ick6o/4peOlBoZz48= =Bvzs -----END PGP PUBLIC KEY BLOCK----- Configuring a project to enforce signature verification \u00b6 Once you have imported the GnuPG keys to ArgoCD, you must now configure the project to enforce the verification of commit signatures with the imported keys. Configuring using the CLI \u00b6 Adding a key ID to list of allowed keys \u00b6 To add a key ID to the list of allowed GnuPG keys for a project, you can use the argocd proj add-signature-key command, i.e. the following command would add the key ID 4AEE18F83AFDEB23 to the project named myproj : argocd proj add-signature-key myproj 4AEE18F83AFDEB23 Removing a key ID from the list of allowed keys \u00b6 Similarily, you can remove a key ID from the list of allowed GnuPG keys for a project using the argocd proj remove-signature-key command, i.e. to remove the key added above from project myproj , use the command: argocd proj remove-signature-key myproj 4AEE18F83AFDEB23 Showing allowed key IDs for a project \u00b6 To see which key IDs are allowed for a given project, you can inspect the output of the argocd proj get command, i.e for a project named gpg : $ argocd proj get gpg Name: gpg Description: GnuPG verification Destinations: *,* Repositories: * Allowed Cluster Resources: */* Denied Namespaced Resources: <none> Signature keys: 4AEE18F83AFDEB23, 07E34825A909B250 Orphaned Resources: disabled Override list of key IDs \u00b6 You can also explicitly set the currently allowed keys with one or more new keys using the argocd proj set command in combination with the --signature-keys flag, which you can use to specify a comma separated list of allowed key IDs: argocd proj set myproj --signature-keys 4AEE18F83AFDEB23,07E34825A909B250 The --signature-keys flag can also be used on project creation, i.e. the argocd proj create command. Configure using the Web UI \u00b6 You can configure the GnuPG key IDs required for signature verification using the web UI, in the Project configuration. Navigate to the Settings page and select the Projects module, then click on the project you want to configure. From the project's details page, click Edit and find the Required signature keys section, where you can add or remove the key IDs for signature verification. After you have modified your project, click Update to save the changes. Configure using declarative setup \u00b6 You can specify the key IDs required for signature verification in the project manifest within the signatureKeys section, i.e: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : gpg namespace : argocd spec : clusterResourceWhitelist : - group : '*' kind : '*' description : GnuPG verification destinations : - namespace : '*' server : '*' namespaceResourceWhitelist : - group : '*' kind : '*' signatureKeys : - keyID : 4AEE18F83AFDEB23 sourceRepos : - '*' signatureKeys is an array of SignatureKey objects, whose only property is keyID at the moment. Troubleshooting \u00b6 Disabling the feature \u00b6 The GnuPG feature can be completely disabled if desired. In order to disable it, set the environment variable ARGOCD_GPG_ENABLED to false for the pod templates of the argocd-server , argocd-repo-server and argocd-application-controller deployments. After the pods have been restarted, the GnuPG feature is disabled. GnuPG key ring \u00b6 The GnuPG key ring used for signature verification is maintained within the pods of argocd-repo-server . The keys in the keyring are synchronized to the configuration stored in the argocd-gpg-keys-cm ConfigMap resource, which is volume-mounted to the argocd-repo-server pods. Note The GnuPG key ring in the pods is transient and gets recreated from the configuration on each restart of the pods. You should never add or remove keys manually to the key ring, because your changes will be lost. Also, any of the private keys found in the key ring are transient and will be regenerated upon each restart. The private key is only used to build the trust DB for the running pod. To check whether the keys are actually in sync, you can kubectl exec into the repository server's pods and inspect the key ring, which is located at path /app/config/gpg/keys $ kubectl exec -it argocd-repo-server-7d6bdfdf6d-hzqkg bash argocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$ GNUPGHOME = /app/config/gpg/keys gpg --list-keys /app/config/gpg/keys/pubring.kbx -------------------------------- pub rsa2048 2020 -06-15 [ SC ] [ expires: 2020 -12-12 ] D48F075D818A813C436914BC9324F0D2144753B1 uid [ ultimate ] Anon Ymous ( ArgoCD key signing key ) <noreply@argoproj.io> pub rsa2048 2017 -08-16 [ SC ] 5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23 uid [ ultimate ] GitHub ( web-flow commit signing ) <noreply@github.com> argocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$ If the key ring stays out of sync with your configuration after you have added or removed keys for a longer period of time, you might want to restart your argocd-repo-server pods. If such a problem persists, please consider raising a bug report.","title":"GnuPG verification"},{"location":"user-guide/gpg-verification/#gnupg-signature-verification","text":"","title":"GnuPG signature verification"},{"location":"user-guide/gpg-verification/#overview","text":"As of v1.7 it is possible to configure ArgoCD to only sync against commits that are signed in Git using GnuPG. Signature verification is configured on project level. If a project is configured to enforce signature verification, all applications associated with this project must have the commits in the source repositories signed with a GnuPG public key known to ArgoCD. ArgoCD will refuse to sync to any revision that does not have a valid signature made by one of the configured keys. The controller will emit a ResourceComparison error if it tries to sync to a revision that is either not signed, or is signed by an unknown or not allowed public key. By default, signature verification is enabled but not enforced. If you wish to completely disable the GnuPG functionality in ArgoCD, you have to set the environment variable ARGOCD_GPG_ENABLED to \"false\" in the pod templates of the argocd-server , argocd-repo-server and argocd-application-controller deployment manifests. Verification of GnuPG signatures is only supported with Git repositories. It is not possible using Helm repositories. A few words about trust ArgoCD uses a very simple trust model for the keys you import: Once the key is imported, ArgoCD will trust it. ArgoCD does not support more complex trust models, and it is not necessary (nor possible) to sign the public keys you are going to import into ArgoCD.","title":"Overview"},{"location":"user-guide/gpg-verification/#signature-verification-targets","text":"If signature verification is enforced, ArgoCD will verify the signature using following strategy: If target revision is a pointer to a commit object (i.e. a branch name, the name of a reference such as HEAD or a commit SHA), ArgoCD will perform the signature verification on the commit object the name points to, i.e. a commit. If target revision resolves to a tag and the tag is a lightweight tag, the behaviour is same as if target revision would be a pointer to a commit object. However, if the tag is annotated, the target revision will point to a tag object and thus, the signature verification is performed on the tag object, i.e. the tag itself must be signed (using git tag -s ).","title":"Signature verification targets"},{"location":"user-guide/gpg-verification/#enforcing-signature-verification","text":"To configure enforcing of signature verification, the following steps must be performed: Import the GnuPG public key(s) used for signing commits in ArgoCD Configure a project to enforce signature verification for given keys Once you have configured one or more keys to be required for verification for a given project, enforcement is active for all applications associated with this project. Warning If signature verification is enforced, you will not be able to sync from local sources (i.e. argocd app sync --local ) anymore.","title":"Enforcing signature verification"},{"location":"user-guide/gpg-verification/#importing-gnupg-public-keys","text":"You can configure the GnuPG public keys that ArgoCD will use for verification of commit signatures using either the CLI, the web UI or configuring it using declarative setup. Note After you have imported a GnuPG key, it may take a while until the key is propagated within the cluster, even if listed as configured. If you still cannot sync to commits signed by the already imported key, please see the troubleshooting section below. Users wanting to manage the GnuPG public key configuration require the RBAC permissions for gpgkeys resources.","title":"Importing GnuPG public keys"},{"location":"user-guide/gpg-verification/#manage-public-keys-using-the-cli","text":"To configure GnuPG public keys using the CLI, use the argocd gpg command.","title":"Manage public keys using the CLI"},{"location":"user-guide/gpg-verification/#listing-all-configured-keys","text":"To list all configured keys known to ArgoCD, use the argocd gpg list sub-command: argocd gpg list","title":"Listing all configured keys"},{"location":"user-guide/gpg-verification/#show-information-about-a-certain-key","text":"To get information about a specific key, use the argocd gpg get sub-command: argocd gpg get <key-id>","title":"Show information about a certain key"},{"location":"user-guide/gpg-verification/#importing-a-key","text":"To import a new key to ArgoCD, use the argocd gpg add sub-command: argocd gpg add --from <path-to-key> The key to be imported can be either in binary or ASCII-armored format.","title":"Importing a key"},{"location":"user-guide/gpg-verification/#removing-a-key-from-configuration","text":"To remove a previously configured key from the configuration, use the argocd gpg rm sub-command: argocd gpg rm <key-id>","title":"Removing a key from configuration"},{"location":"user-guide/gpg-verification/#manage-public-keys-using-the-web-ui","text":"Basic key management functionality for listing, importing and removing GnuPG public keys is implemented in the Web UI. You can find the configuration module from the Settings page in the GnuPG keys module. Please note that when you configure keys using the Web UI, the key must be imported in ASCII armored format for now.","title":"Manage public keys using the Web UI"},{"location":"user-guide/gpg-verification/#manage-public-keys-in-declarative-setup","text":"ArgoCD stores public keys internally in the argocd-gpg-keys-cm ConfigMap resource, with the public GnuPG key's ID as its name and the ASCII armored key data as string value, i.e. the entry for the GitHub's web-flow signing key would look like follows: 4AEE18F83AFDEB23 : | -----BEGIN PGP PUBLIC KEY BLOCK----- mQENBFmUaEEBCACzXTDt6ZnyaVtueZASBzgnAmK13q9Urgch+sKYeIhdymjuMQta x15OklctmrZtqre5kwPUosG3/B2/ikuPYElcHgGPL4uL5Em6S5C/oozfkYzhwRrT SQzvYjsE4I34To4UdE9KA97wrQjGoz2Bx72WDLyWwctD3DKQtYeHXswXXtXwKfjQ 7Fy4+Bf5IPh76dA8NJ6UtjjLIDlKqdxLW4atHe6xWFaJ+XdLUtsAroZcXBeWDCPa buXCDscJcLJRKZVc62gOZXXtPfoHqvUPp3nuLA4YjH9bphbrMWMf810Wxz9JTd3v yWgGqNY0zbBqeZoGv+TuExlRHT8ASGFS9SVDABEBAAG0NUdpdEh1YiAod2ViLWZs b3cgY29tbWl0IHNpZ25pbmcpIDxub3JlcGx5QGdpdGh1Yi5jb20+iQEiBBMBCAAW BQJZlGhBCRBK7hj4Ov3rIwIbAwIZAQAAmQEH/iATWFmi2oxlBh3wAsySNCNV4IPf DDMeh6j80WT7cgoX7V7xqJOxrfrqPEthQ3hgHIm7b5MPQlUr2q+UPL22t/I+ESF6 9b0QWLFSMJbMSk+BXkvSjH9q8jAO0986/pShPV5DU2sMxnx4LfLfHNhTzjXKokws +8ptJ8uhMNIDXfXuzkZHIxoXk3rNcjDN5c5X+sK8UBRH092BIJWCOfaQt7v7wig5 4Ra28pM9GbHKXVNxmdLpCFyzvyMuCmINYYADsC848QQFFwnd4EQnupo6QvhEVx1O j7wDwvuH5dCrLuLwtwXaQh0onG4583p0LGms2Mf5F+Ick6o/4peOlBoZz48= =Bvzs -----END PGP PUBLIC KEY BLOCK-----","title":"Manage public keys in declarative setup"},{"location":"user-guide/gpg-verification/#configuring-a-project-to-enforce-signature-verification","text":"Once you have imported the GnuPG keys to ArgoCD, you must now configure the project to enforce the verification of commit signatures with the imported keys.","title":"Configuring a project to enforce signature verification"},{"location":"user-guide/gpg-verification/#configuring-using-the-cli","text":"","title":"Configuring using the CLI"},{"location":"user-guide/gpg-verification/#adding-a-key-id-to-list-of-allowed-keys","text":"To add a key ID to the list of allowed GnuPG keys for a project, you can use the argocd proj add-signature-key command, i.e. the following command would add the key ID 4AEE18F83AFDEB23 to the project named myproj : argocd proj add-signature-key myproj 4AEE18F83AFDEB23","title":"Adding a key ID to list of allowed keys"},{"location":"user-guide/gpg-verification/#removing-a-key-id-from-the-list-of-allowed-keys","text":"Similarily, you can remove a key ID from the list of allowed GnuPG keys for a project using the argocd proj remove-signature-key command, i.e. to remove the key added above from project myproj , use the command: argocd proj remove-signature-key myproj 4AEE18F83AFDEB23","title":"Removing a key ID from the list of allowed keys"},{"location":"user-guide/gpg-verification/#showing-allowed-key-ids-for-a-project","text":"To see which key IDs are allowed for a given project, you can inspect the output of the argocd proj get command, i.e for a project named gpg : $ argocd proj get gpg Name: gpg Description: GnuPG verification Destinations: *,* Repositories: * Allowed Cluster Resources: */* Denied Namespaced Resources: <none> Signature keys: 4AEE18F83AFDEB23, 07E34825A909B250 Orphaned Resources: disabled","title":"Showing allowed key IDs for a project"},{"location":"user-guide/gpg-verification/#override-list-of-key-ids","text":"You can also explicitly set the currently allowed keys with one or more new keys using the argocd proj set command in combination with the --signature-keys flag, which you can use to specify a comma separated list of allowed key IDs: argocd proj set myproj --signature-keys 4AEE18F83AFDEB23,07E34825A909B250 The --signature-keys flag can also be used on project creation, i.e. the argocd proj create command.","title":"Override list of key IDs"},{"location":"user-guide/gpg-verification/#configure-using-the-web-ui","text":"You can configure the GnuPG key IDs required for signature verification using the web UI, in the Project configuration. Navigate to the Settings page and select the Projects module, then click on the project you want to configure. From the project's details page, click Edit and find the Required signature keys section, where you can add or remove the key IDs for signature verification. After you have modified your project, click Update to save the changes.","title":"Configure using the Web UI"},{"location":"user-guide/gpg-verification/#configure-using-declarative-setup","text":"You can specify the key IDs required for signature verification in the project manifest within the signatureKeys section, i.e: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : gpg namespace : argocd spec : clusterResourceWhitelist : - group : '*' kind : '*' description : GnuPG verification destinations : - namespace : '*' server : '*' namespaceResourceWhitelist : - group : '*' kind : '*' signatureKeys : - keyID : 4AEE18F83AFDEB23 sourceRepos : - '*' signatureKeys is an array of SignatureKey objects, whose only property is keyID at the moment.","title":"Configure using declarative setup"},{"location":"user-guide/gpg-verification/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"user-guide/gpg-verification/#disabling-the-feature","text":"The GnuPG feature can be completely disabled if desired. In order to disable it, set the environment variable ARGOCD_GPG_ENABLED to false for the pod templates of the argocd-server , argocd-repo-server and argocd-application-controller deployments. After the pods have been restarted, the GnuPG feature is disabled.","title":"Disabling the feature"},{"location":"user-guide/gpg-verification/#gnupg-key-ring","text":"The GnuPG key ring used for signature verification is maintained within the pods of argocd-repo-server . The keys in the keyring are synchronized to the configuration stored in the argocd-gpg-keys-cm ConfigMap resource, which is volume-mounted to the argocd-repo-server pods. Note The GnuPG key ring in the pods is transient and gets recreated from the configuration on each restart of the pods. You should never add or remove keys manually to the key ring, because your changes will be lost. Also, any of the private keys found in the key ring are transient and will be regenerated upon each restart. The private key is only used to build the trust DB for the running pod. To check whether the keys are actually in sync, you can kubectl exec into the repository server's pods and inspect the key ring, which is located at path /app/config/gpg/keys $ kubectl exec -it argocd-repo-server-7d6bdfdf6d-hzqkg bash argocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$ GNUPGHOME = /app/config/gpg/keys gpg --list-keys /app/config/gpg/keys/pubring.kbx -------------------------------- pub rsa2048 2020 -06-15 [ SC ] [ expires: 2020 -12-12 ] D48F075D818A813C436914BC9324F0D2144753B1 uid [ ultimate ] Anon Ymous ( ArgoCD key signing key ) <noreply@argoproj.io> pub rsa2048 2017 -08-16 [ SC ] 5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23 uid [ ultimate ] GitHub ( web-flow commit signing ) <noreply@github.com> argocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$ If the key ring stays out of sync with your configuration after you have added or removed keys for a longer period of time, you might want to restart your argocd-repo-server pods. If such a problem persists, please consider raising a bug report.","title":"GnuPG key ring"},{"location":"user-guide/helm/","text":"Helm \u00b6 Values Files \u00b6 Helm has the ability to use a different, or even multiple \"values.yaml\" files to derive its parameters from. Alternate or multiple values file(s), can be specified using the --values flag. The flag can be repeated to support multiple values files: argocd app set helm-guestbook --values values-production.yaml Note Values files must be in the same git repository as the Helm chart. The files can be in a different location in which case it can be accessed using a relative path relative to the root directory of the Helm chart. Helm Parameters \u00b6 Helm has the ability to set parameter values, which override any values in a values.yaml . For example, service.type is a common parameter which is exposed in a Helm chart: helm template . --set service.type = LoadBalancer Similarly, Argo CD can override values in the values.yaml parameters using argo app set command, in the form of -p PARAM=VALUE . For example: argocd app set helm-guestbook -p service.type = LoadBalancer Helm Release Name \u00b6 By default, the Helm release name is equal to the Application name to which it belongs. Sometimes, especially on a centralised ArgoCD, you may want to override that name, and it is possible with the release-name flag on the cli: argocd app set helm-guestbook --release-name myRelease or using the releaseName for yaml: source : helm : releaseName : myRelease Important notice on overriding the release name Please note that overriding the Helm release name might cause problems when the chart you are deploying is using the app.kubernetes.io/instance label. ArgoCD injects this label with the value of the Application name for tracking purposes. So when overriding the release name, the Application name will stop being equal to the release name. Because ArgoCD will overwrite the label with the Application name it might cause some selectors on the resources to stop working. In order to avoid this we can configure ArgoCD to use another label for tracking in the ArgoCD configmap argocd-cm.yaml - check the lines describing application.instanceLabelKey . Helm Hooks \u00b6 v1.3 or later Helm hooks are similar to Argo CD hooks . In Helm, a hook is any normal Kubernetes resource annotated with the helm.sh/hook annotation. Argo CD supports many (most?) Helm hooks by mapping the Helm annotations onto Argo CD's own hook annotations: Helm Annotation Notes helm.sh/hook: crd-install Supported as equivalent to argocd.argoproj.io/hook: PreSync . helm.sh/hook: pre-delete Not supported. In Helm stable there are 3 cases used to clean up CRDs and 3 to clean-up jobs. helm.sh/hook: pre-rollback Not supported. Never used in Helm stable. helm.sh/hook: pre-install Supported as equivalent to argocd.argoproj.io/hook: PreSync . helm.sh/hook: pre-upgrade Supported as equivalent to argocd.argoproj.io/hook: PreSync . helm.sh/hook: post-upgrade Supported as equivalent to argocd.argoproj.io/hook: PostSync . helm.sh/hook: post-install Supported as equivalent to argocd.argoproj.io/hook: PostSync . helm.sh/hook: post-delete Not supported. Never used in Helm stable. helm.sh/hook: post-rollback Not supported. Never used in Helm stable. helm.sh/hook: test-success Not supported. No equivalent in Argo CD. helm.sh/hook: test-failure Not supported. No equivalent in Argo CD. helm.sh/hook-delete-policy Supported. See also argocd.argoproj.io/hook-delete-policy ). helm.sh/hook-delete-timeout No supported. Never used in Helm stable helm.sh/hook-weight Supported as equivalent to argocd.argoproj.io/sync-wave . Unsupported hooks are ignored. In Argo CD, hooks are created by using kubectl apply , rather than kubectl create . This means that if the hook is named and already exists, it will not change unless you have annotated it with before-hook-creation . 'install' vs 'upgrade' vs 'sync' Argo CD cannot know if it is running a first-time \"install\" or an \"upgrade\" - every operation is a \"sync'. This means that, by default, apps that have pre-install and pre-upgrade will have those hooks run at the same time. Hook Tips \u00b6 Make your hook idempotent. Annotate crd-install with hook-weight: \"-2\" to make sure it runs to success before any install or upgrade hooks. Annotate pre-install and post-install with hook-weight: \"-1\" . This will make sure it runs to success before any upgrade hooks. Annotate pre-upgrade and post-upgrade with hook-delete-policy: before-hook-creation to make sure it runs on every sync. Read more about Argo hooks and Helm hooks . Random Data \u00b6 Helm templating has the ability to generate random data during chart rendering via the randAlphaNum function. Many helm charts from the charts repository make use of this feature. For example, the following is the secret for the redis helm chart : data : {{ - if .Values.password }} redis-password : {{ .Values.password | b64enc | quote }} {{ - else }} redis-password : {{ randAlphaNum 10 | b64enc | quote }} {{ - end }} The Argo CD application controller periodically compares Git state against the live state, running the helm template <CHART> command to generate the helm manifests. Because the random value is regenerated every time the comparison is made, any application which makes use of the randAlphaNum function will always be in an OutOfSync state. This can be mitigated by explicitly setting a value, in the values.yaml such that the value is stable between each comparison. For example: argocd app set redis -p password = abc123 Build Environment \u00b6 v1.4 Helm apps have access to the standard build environment via substitution as parameters. E.g. via the CLI: argocd app create APPNAME \\ --helm-set-string 'app=${ARGOCD_APP_NAME}' Or via declarative syntax: spec : source : helm : parameters : - name : app value : $ARGOCD_APP_NAME Helm plugins \u00b6 v1.5 Argo CD is un-opinionated on what cloud provider you use and what kind of Helm plugins you are using, that's why there are no plugins delivered with the ArgoCD image. But sometimes it happens you would like to use a custom plugin. One of the cases is that you would like to use Google Cloud Storage or Amazon S3 storage to save the Helm charts, for example: https://github.com/hayorov/helm-gcs where you can use gs:// protocol for Helm chart repository access. In order to do that you have to prepare your own ArgoCD image with installed plugins. Example Dockerfile : FROM argoproj / argocd : v1 . 5.7 USER root RUN apt - get update && \\ apt - get install - y \\ curl && \\ apt - get clean && \\ rm - rf / var / lib / apt / lists /* / tmp /* / var / tmp /* USER argocd ARG GCS_PLUGIN_VERSION = \"0.3.5\" ARG GCS_PLUGIN_REPO = \"https://github.com/hayorov/helm-gcs.git\" RUN helm plugin install $ { GCS_PLUGIN_REPO } -- version $ { GCS_PLUGIN_VERSION } ENV HELM_PLUGINS = \"/home/argocd/.local/share/helm/plugins/\" You have to remember about HELM_PLUGINS environment property - this is required for plugins to work correctly. After that you have to use your custom image for ArgoCD installation. Helm Version \u00b6 ArgoCD normally detects which version of Helm to use by looking at the apiVersion in Chart.yaml. If needed, it is possible to specifically set the Helm version to template with by setting the helm-version flag on the cli (either v2 or v3): argocd app set helm-guestbook --helm-version v2 Or using declarative syntax: spec : source : helm : version : v2","title":"Helm"},{"location":"user-guide/helm/#helm","text":"","title":"Helm"},{"location":"user-guide/helm/#values-files","text":"Helm has the ability to use a different, or even multiple \"values.yaml\" files to derive its parameters from. Alternate or multiple values file(s), can be specified using the --values flag. The flag can be repeated to support multiple values files: argocd app set helm-guestbook --values values-production.yaml Note Values files must be in the same git repository as the Helm chart. The files can be in a different location in which case it can be accessed using a relative path relative to the root directory of the Helm chart.","title":"Values Files"},{"location":"user-guide/helm/#helm-parameters","text":"Helm has the ability to set parameter values, which override any values in a values.yaml . For example, service.type is a common parameter which is exposed in a Helm chart: helm template . --set service.type = LoadBalancer Similarly, Argo CD can override values in the values.yaml parameters using argo app set command, in the form of -p PARAM=VALUE . For example: argocd app set helm-guestbook -p service.type = LoadBalancer","title":"Helm Parameters"},{"location":"user-guide/helm/#helm-release-name","text":"By default, the Helm release name is equal to the Application name to which it belongs. Sometimes, especially on a centralised ArgoCD, you may want to override that name, and it is possible with the release-name flag on the cli: argocd app set helm-guestbook --release-name myRelease or using the releaseName for yaml: source : helm : releaseName : myRelease Important notice on overriding the release name Please note that overriding the Helm release name might cause problems when the chart you are deploying is using the app.kubernetes.io/instance label. ArgoCD injects this label with the value of the Application name for tracking purposes. So when overriding the release name, the Application name will stop being equal to the release name. Because ArgoCD will overwrite the label with the Application name it might cause some selectors on the resources to stop working. In order to avoid this we can configure ArgoCD to use another label for tracking in the ArgoCD configmap argocd-cm.yaml - check the lines describing application.instanceLabelKey .","title":"Helm Release Name"},{"location":"user-guide/helm/#helm-hooks","text":"v1.3 or later Helm hooks are similar to Argo CD hooks . In Helm, a hook is any normal Kubernetes resource annotated with the helm.sh/hook annotation. Argo CD supports many (most?) Helm hooks by mapping the Helm annotations onto Argo CD's own hook annotations: Helm Annotation Notes helm.sh/hook: crd-install Supported as equivalent to argocd.argoproj.io/hook: PreSync . helm.sh/hook: pre-delete Not supported. In Helm stable there are 3 cases used to clean up CRDs and 3 to clean-up jobs. helm.sh/hook: pre-rollback Not supported. Never used in Helm stable. helm.sh/hook: pre-install Supported as equivalent to argocd.argoproj.io/hook: PreSync . helm.sh/hook: pre-upgrade Supported as equivalent to argocd.argoproj.io/hook: PreSync . helm.sh/hook: post-upgrade Supported as equivalent to argocd.argoproj.io/hook: PostSync . helm.sh/hook: post-install Supported as equivalent to argocd.argoproj.io/hook: PostSync . helm.sh/hook: post-delete Not supported. Never used in Helm stable. helm.sh/hook: post-rollback Not supported. Never used in Helm stable. helm.sh/hook: test-success Not supported. No equivalent in Argo CD. helm.sh/hook: test-failure Not supported. No equivalent in Argo CD. helm.sh/hook-delete-policy Supported. See also argocd.argoproj.io/hook-delete-policy ). helm.sh/hook-delete-timeout No supported. Never used in Helm stable helm.sh/hook-weight Supported as equivalent to argocd.argoproj.io/sync-wave . Unsupported hooks are ignored. In Argo CD, hooks are created by using kubectl apply , rather than kubectl create . This means that if the hook is named and already exists, it will not change unless you have annotated it with before-hook-creation . 'install' vs 'upgrade' vs 'sync' Argo CD cannot know if it is running a first-time \"install\" or an \"upgrade\" - every operation is a \"sync'. This means that, by default, apps that have pre-install and pre-upgrade will have those hooks run at the same time.","title":"Helm Hooks"},{"location":"user-guide/helm/#hook-tips","text":"Make your hook idempotent. Annotate crd-install with hook-weight: \"-2\" to make sure it runs to success before any install or upgrade hooks. Annotate pre-install and post-install with hook-weight: \"-1\" . This will make sure it runs to success before any upgrade hooks. Annotate pre-upgrade and post-upgrade with hook-delete-policy: before-hook-creation to make sure it runs on every sync. Read more about Argo hooks and Helm hooks .","title":"Hook Tips"},{"location":"user-guide/helm/#random-data","text":"Helm templating has the ability to generate random data during chart rendering via the randAlphaNum function. Many helm charts from the charts repository make use of this feature. For example, the following is the secret for the redis helm chart : data : {{ - if .Values.password }} redis-password : {{ .Values.password | b64enc | quote }} {{ - else }} redis-password : {{ randAlphaNum 10 | b64enc | quote }} {{ - end }} The Argo CD application controller periodically compares Git state against the live state, running the helm template <CHART> command to generate the helm manifests. Because the random value is regenerated every time the comparison is made, any application which makes use of the randAlphaNum function will always be in an OutOfSync state. This can be mitigated by explicitly setting a value, in the values.yaml such that the value is stable between each comparison. For example: argocd app set redis -p password = abc123","title":"Random Data"},{"location":"user-guide/helm/#build-environment","text":"v1.4 Helm apps have access to the standard build environment via substitution as parameters. E.g. via the CLI: argocd app create APPNAME \\ --helm-set-string 'app=${ARGOCD_APP_NAME}' Or via declarative syntax: spec : source : helm : parameters : - name : app value : $ARGOCD_APP_NAME","title":"Build Environment"},{"location":"user-guide/helm/#helm-plugins","text":"v1.5 Argo CD is un-opinionated on what cloud provider you use and what kind of Helm plugins you are using, that's why there are no plugins delivered with the ArgoCD image. But sometimes it happens you would like to use a custom plugin. One of the cases is that you would like to use Google Cloud Storage or Amazon S3 storage to save the Helm charts, for example: https://github.com/hayorov/helm-gcs where you can use gs:// protocol for Helm chart repository access. In order to do that you have to prepare your own ArgoCD image with installed plugins. Example Dockerfile : FROM argoproj / argocd : v1 . 5.7 USER root RUN apt - get update && \\ apt - get install - y \\ curl && \\ apt - get clean && \\ rm - rf / var / lib / apt / lists /* / tmp /* / var / tmp /* USER argocd ARG GCS_PLUGIN_VERSION = \"0.3.5\" ARG GCS_PLUGIN_REPO = \"https://github.com/hayorov/helm-gcs.git\" RUN helm plugin install $ { GCS_PLUGIN_REPO } -- version $ { GCS_PLUGIN_VERSION } ENV HELM_PLUGINS = \"/home/argocd/.local/share/helm/plugins/\" You have to remember about HELM_PLUGINS environment property - this is required for plugins to work correctly. After that you have to use your custom image for ArgoCD installation.","title":"Helm plugins"},{"location":"user-guide/helm/#helm-version","text":"ArgoCD normally detects which version of Helm to use by looking at the apiVersion in Chart.yaml. If needed, it is possible to specifically set the Helm version to template with by setting the helm-version flag on the cli (either v2 or v3): argocd app set helm-guestbook --helm-version v2 Or using declarative syntax: spec : source : helm : version : v2","title":"Helm Version"},{"location":"user-guide/jsonnet/","text":"Jsonnet \u00b6 Any file matching *.jsonnet in a directory app is treated as a Jsonnet file. ArgoCD evaluates the Jsonnet and is able to parse a generated object or array. Build Environment \u00b6 v1.4 Jsonnet apps have access to the standard build environment via substitution into TLAs and external variables . It is also possible to add a shared library (e.g. vendor folder) relative to the repository root. E.g. via the CLI: argocd app create APPNAME \\ --jsonnet-ext-str 'app=${ARGOCD_APP_NAME}' \\ --jsonnet-tla-str 'ns=${ARGOCD_APP_NAMESPACE}' \\ --jsonnet-libs 'vendor' Or by declarative syntax: directory : jsonnet : extVars : - name : app value : $ARGOCD_APP_NAME tlas : - name : ns value : $ARGOCD_APP_NAMESPACE libs : - vendor","title":"Jsonnet"},{"location":"user-guide/jsonnet/#jsonnet","text":"Any file matching *.jsonnet in a directory app is treated as a Jsonnet file. ArgoCD evaluates the Jsonnet and is able to parse a generated object or array.","title":"Jsonnet"},{"location":"user-guide/jsonnet/#build-environment","text":"v1.4 Jsonnet apps have access to the standard build environment via substitution into TLAs and external variables . It is also possible to add a shared library (e.g. vendor folder) relative to the repository root. E.g. via the CLI: argocd app create APPNAME \\ --jsonnet-ext-str 'app=${ARGOCD_APP_NAME}' \\ --jsonnet-tla-str 'ns=${ARGOCD_APP_NAMESPACE}' \\ --jsonnet-libs 'vendor' Or by declarative syntax: directory : jsonnet : extVars : - name : app value : $ARGOCD_APP_NAME tlas : - name : ns value : $ARGOCD_APP_NAMESPACE libs : - vendor","title":"Build Environment"},{"location":"user-guide/ksonnet/","text":"Ksonnet \u00b6 Ksonnet is defunct and no longer supported. Environments \u00b6 Ksonnet has a first class concept of an \"environment.\" To create an application from a ksonnet app directory, an environment must be specified. For example, the following command creates the \"guestbook-default\" app, which points to the default environment: argocd app create guestbook-default --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --env default Parameters \u00b6 Ksonnet parameters all belong to a component. For example, the following are the parameters available in the guestbook app, all of which belong to the guestbook-ui component: $ ks param list COMPONENT PARAM VALUE ========= ===== ===== guestbook-ui containerPort 80 guestbook-ui image \"gcr.io/heptio-images/ks-guestbook-demo:0.1\" guestbook-ui name \"guestbook-ui\" guestbook-ui replicas 1 guestbook-ui servicePort 80 guestbook-ui type \"LoadBalancer\" When overriding ksonnet parameters in Argo CD, the component name should also be specified in the argocd app set command, in the form of -p COMPONENT=PARAM=VALUE . For example: argocd app set guestbook-default -p guestbook-ui = image = gcr.io/heptio-images/ks-guestbook-demo:0.1 Build Environment \u00b6 We do not support the standard build environment for Ksonnet.","title":"Ksonnet"},{"location":"user-guide/ksonnet/#ksonnet","text":"Ksonnet is defunct and no longer supported.","title":"Ksonnet"},{"location":"user-guide/ksonnet/#environments","text":"Ksonnet has a first class concept of an \"environment.\" To create an application from a ksonnet app directory, an environment must be specified. For example, the following command creates the \"guestbook-default\" app, which points to the default environment: argocd app create guestbook-default --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --env default","title":"Environments"},{"location":"user-guide/ksonnet/#parameters","text":"Ksonnet parameters all belong to a component. For example, the following are the parameters available in the guestbook app, all of which belong to the guestbook-ui component: $ ks param list COMPONENT PARAM VALUE ========= ===== ===== guestbook-ui containerPort 80 guestbook-ui image \"gcr.io/heptio-images/ks-guestbook-demo:0.1\" guestbook-ui name \"guestbook-ui\" guestbook-ui replicas 1 guestbook-ui servicePort 80 guestbook-ui type \"LoadBalancer\" When overriding ksonnet parameters in Argo CD, the component name should also be specified in the argocd app set command, in the form of -p COMPONENT=PARAM=VALUE . For example: argocd app set guestbook-default -p guestbook-ui = image = gcr.io/heptio-images/ks-guestbook-demo:0.1","title":"Parameters"},{"location":"user-guide/ksonnet/#build-environment","text":"We do not support the standard build environment for Ksonnet.","title":"Build Environment"},{"location":"user-guide/kustomize/","text":"Kustomize \u00b6 The following configuration options are available for Kustomize: namePrefix is a prefix appended to resources for Kustomize apps nameSuffix is a suffix appended to resources for Kustomize apps images is a list of Kustomize image overrides commonLabels is a string map of an additional labels commonAnnotations is a string map of an additional annotations To use Kustomize with an overlay, point your path to the overlay. Tip If you're generating resources, you should read up how to ignore those generated resources using the IgnoreExtraneous compare option . Private Remote Bases \u00b6 If you have remote bases that are either (a) HTTPS and need username/password (b) SSH and need SSH private key, then they'll inherit that from the app's repo. This will work if the remote bases uses the same credentials/private key. It will not work if they use different ones. For security reasons your app only ever knows about its own repo (not other team's or users repos), and so you won't be able to access other private repo, even if Argo CD knows about them. Read more about private repos . kustomize build Options/Parameters \u00b6 To provide build options to kustomize build add a property to the ArgoCD CM under data: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : kustomize.buildOptions : --load_restrictor none Custom Kustomize versions \u00b6 Argo CD supports using multiple kustomize versions simultaneously and specify required version per application. To add additional versions make sure required versions are bundled and then use kustomize.version.<version> fields of argocd-cm ConfigMap to register bundled additional versions. apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : kustomize.version.v3.5.1 : /custom-tools/kustomize_3_5_1 kustomize.version.v3.5.4 : /custom-tools/kustomize_3_5_4 Once new version is configured you can reference it in Application spec as following: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook spec : source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : guestbook-kustomize kustomize : version : v3.5.4 Additionally application kustomize version can be configured using Parameters tab of Application Details page or using following CLI command: argocd app set <appyName> --kustomize-version v3.5.4 Build Environment \u00b6 Kustomize does not support parameters and therefore cannot support the standard build environment .","title":"Kustomize"},{"location":"user-guide/kustomize/#kustomize","text":"The following configuration options are available for Kustomize: namePrefix is a prefix appended to resources for Kustomize apps nameSuffix is a suffix appended to resources for Kustomize apps images is a list of Kustomize image overrides commonLabels is a string map of an additional labels commonAnnotations is a string map of an additional annotations To use Kustomize with an overlay, point your path to the overlay. Tip If you're generating resources, you should read up how to ignore those generated resources using the IgnoreExtraneous compare option .","title":"Kustomize"},{"location":"user-guide/kustomize/#private-remote-bases","text":"If you have remote bases that are either (a) HTTPS and need username/password (b) SSH and need SSH private key, then they'll inherit that from the app's repo. This will work if the remote bases uses the same credentials/private key. It will not work if they use different ones. For security reasons your app only ever knows about its own repo (not other team's or users repos), and so you won't be able to access other private repo, even if Argo CD knows about them. Read more about private repos .","title":"Private Remote Bases"},{"location":"user-guide/kustomize/#kustomize-build-optionsparameters","text":"To provide build options to kustomize build add a property to the ArgoCD CM under data: apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : kustomize.buildOptions : --load_restrictor none","title":"kustomize build Options/Parameters"},{"location":"user-guide/kustomize/#custom-kustomize-versions","text":"Argo CD supports using multiple kustomize versions simultaneously and specify required version per application. To add additional versions make sure required versions are bundled and then use kustomize.version.<version> fields of argocd-cm ConfigMap to register bundled additional versions. apiVersion : v1 kind : ConfigMap metadata : name : argocd-cm namespace : argocd labels : app.kubernetes.io/name : argocd-cm app.kubernetes.io/part-of : argocd data : kustomize.version.v3.5.1 : /custom-tools/kustomize_3_5_1 kustomize.version.v3.5.4 : /custom-tools/kustomize_3_5_4 Once new version is configured you can reference it in Application spec as following: apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : guestbook spec : source : repoURL : https://github.com/argoproj/argocd-example-apps.git targetRevision : HEAD path : guestbook-kustomize kustomize : version : v3.5.4 Additionally application kustomize version can be configured using Parameters tab of Application Details page or using following CLI command: argocd app set <appyName> --kustomize-version v3.5.4","title":"Custom Kustomize versions"},{"location":"user-guide/kustomize/#build-environment","text":"Kustomize does not support parameters and therefore cannot support the standard build environment .","title":"Build Environment"},{"location":"user-guide/orphaned-resources/","text":"Orphaned Resources Monitoring \u00b6 Orphaned Kubernetes resource is a top-level namespaced resource which does not belong to any Argo CD Application. The Orphaned Resources Monitoring feature allows detecting orphaned resources, generate a warning and inspect/remove resources using Argo CD UI. The Orphaned Resources monitoring is enabled in Project settings. Once the feature is enabled each project application which target namespace has orphaned resource will get a warning condition. The orphaned resources can be located using the application details page: Before enabling feature you might consider disabling warning. In this case application users are going to see orphaned resources in the UI but application is won't get a warning condition. Exceptions \u00b6 Not every resource in the Kubernetes cluster is controlled by the end user. Following resources are never considered as orphaned: Namespaced resources denied in the project. Usually, such resources are managed by cluster administrators and not supposed to be modified by namespace user. ServiceAccount with name default ( and corresponding auto-generated ServiceAccountToken ). Service with name kubernetes in the default namespace.","title":"Orphaned Resources Monitoring"},{"location":"user-guide/orphaned-resources/#orphaned-resources-monitoring","text":"Orphaned Kubernetes resource is a top-level namespaced resource which does not belong to any Argo CD Application. The Orphaned Resources Monitoring feature allows detecting orphaned resources, generate a warning and inspect/remove resources using Argo CD UI. The Orphaned Resources monitoring is enabled in Project settings. Once the feature is enabled each project application which target namespace has orphaned resource will get a warning condition. The orphaned resources can be located using the application details page: Before enabling feature you might consider disabling warning. In this case application users are going to see orphaned resources in the UI but application is won't get a warning condition.","title":"Orphaned Resources Monitoring"},{"location":"user-guide/orphaned-resources/#exceptions","text":"Not every resource in the Kubernetes cluster is controlled by the end user. Following resources are never considered as orphaned: Namespaced resources denied in the project. Usually, such resources are managed by cluster administrators and not supposed to be modified by namespace user. ServiceAccount with name default ( and corresponding auto-generated ServiceAccountToken ). Service with name kubernetes in the default namespace.","title":"Exceptions"},{"location":"user-guide/parameters/","text":"Parameter Overrides \u00b6 Argo CD provides a mechanism to override the parameters of Argo CD applications that leverages config management tools. This provides flexibility in having most of the application manifests defined in Git, while leaving room for some parts of the k8s manifests determined dynamically, or outside of Git. It also serves as an alternative way of redeploying an application by changing application parameters via Argo CD, instead of making the changes to the manifests in Git. Tip Many consider this mode of operation as an anti-pattern to GitOps, since the source of truth becomes a union of the Git repository, and the application overrides. The Argo CD parameter overrides feature is provided mainly as a convenience to developers and is intended to be used in dev/test environments, vs. production environments. To use parameter overrides, run the argocd app set -p (COMPONENT=)PARAM=VALUE command: argocd app set guestbook -p image = example/guestbook:abcd123 argocd app sync guestbook The PARAM is expected to be a normal YAML path argocd app set guestbook -p ingress.enabled = true argocd app set guestbook -p ingress.hosts [ 0 ]= guestbook.myclusterurl The argocd app set command supports more tool-specific flags such as --kustomize-image , --jsonnet-ext-var-str etc flags. You can also specify overrides directly in the source field on application spec. Read more about supported options in corresponded tool documentation . When To Use Overrides? \u00b6 The following are situations where parameter overrides would be useful: A team maintains a \"dev\" environment, which needs to be continually updated with the latest version of their guestbook application after every build in the tip of master. To address this use case, the application would expose a parameter named image , whose value used in the dev environment contains a placeholder value (e.g. example/guestbook:replaceme ). The placeholder value would be determined externally (outside of Git) such as a build system. Then, as part of the build pipeline, the parameter value of the image would be continually updated to the freshly built image (e.g. argocd app set guestbook -p image=example/guestbook:abcd123 ). A sync operation would result in the application being redeployed with the new image. A repository of Helm manifests is already publicly available (e.g. https://github.com/helm/charts). Since commit access to the repository is unavailable, it is useful to be able to install charts from the public repository and customize the deployment with different parameters, without resorting to forking the repository to make the changes. For example, to install Redis from the Helm chart repository and customize the the database password, you would run: argocd app create redis --repo https://github.com/helm/charts.git --path stable/redis --dest-server https://kubernetes.default.svc --dest-namespace default -p password = abc123 Store Overrides In Git \u00b6 The following is available from v1.8 or later The config management tool specific overrides can be specified in .argocd-source.yaml file stored in the source application directory in the Git repository. Warn The .argocd-source is a beta feature and subject to change. The .argocd-source.yaml file is used during manifest generation and overrides application source fields, such as kustomize , helm etc. Example: kustomize : images : - gcr.io/heptio-images/ks-guestbook-demo:0.2 The .argocd-source is trying to solve two following main use cases: Provide the unifed way to \"override\" application parameters in Git and enable the \"write back\" feature for projects like argocd-image-updater . Support \"discovering\" applications in the Git repository by projects like applicationset (see git files generator ) The following is available from v1.9 or later You can also store parameter overrides in an application specific file, if you are sourcing multiple applications from a single path in your repository. The application specific file must be named .argocd-source-<appname>.yaml , where <appname> is the name of the application the overrides are valid for. If there exists an non-application specific .argocd-source.yaml , parameters included in that file will be merged first, and then the application specific parameters are merged, which can also contain overrides to the parameters stored in the non-application specific file.","title":"Parameter Overrides"},{"location":"user-guide/parameters/#parameter-overrides","text":"Argo CD provides a mechanism to override the parameters of Argo CD applications that leverages config management tools. This provides flexibility in having most of the application manifests defined in Git, while leaving room for some parts of the k8s manifests determined dynamically, or outside of Git. It also serves as an alternative way of redeploying an application by changing application parameters via Argo CD, instead of making the changes to the manifests in Git. Tip Many consider this mode of operation as an anti-pattern to GitOps, since the source of truth becomes a union of the Git repository, and the application overrides. The Argo CD parameter overrides feature is provided mainly as a convenience to developers and is intended to be used in dev/test environments, vs. production environments. To use parameter overrides, run the argocd app set -p (COMPONENT=)PARAM=VALUE command: argocd app set guestbook -p image = example/guestbook:abcd123 argocd app sync guestbook The PARAM is expected to be a normal YAML path argocd app set guestbook -p ingress.enabled = true argocd app set guestbook -p ingress.hosts [ 0 ]= guestbook.myclusterurl The argocd app set command supports more tool-specific flags such as --kustomize-image , --jsonnet-ext-var-str etc flags. You can also specify overrides directly in the source field on application spec. Read more about supported options in corresponded tool documentation .","title":"Parameter Overrides"},{"location":"user-guide/parameters/#when-to-use-overrides","text":"The following are situations where parameter overrides would be useful: A team maintains a \"dev\" environment, which needs to be continually updated with the latest version of their guestbook application after every build in the tip of master. To address this use case, the application would expose a parameter named image , whose value used in the dev environment contains a placeholder value (e.g. example/guestbook:replaceme ). The placeholder value would be determined externally (outside of Git) such as a build system. Then, as part of the build pipeline, the parameter value of the image would be continually updated to the freshly built image (e.g. argocd app set guestbook -p image=example/guestbook:abcd123 ). A sync operation would result in the application being redeployed with the new image. A repository of Helm manifests is already publicly available (e.g. https://github.com/helm/charts). Since commit access to the repository is unavailable, it is useful to be able to install charts from the public repository and customize the deployment with different parameters, without resorting to forking the repository to make the changes. For example, to install Redis from the Helm chart repository and customize the the database password, you would run: argocd app create redis --repo https://github.com/helm/charts.git --path stable/redis --dest-server https://kubernetes.default.svc --dest-namespace default -p password = abc123","title":"When To Use Overrides?"},{"location":"user-guide/parameters/#store-overrides-in-git","text":"The following is available from v1.8 or later The config management tool specific overrides can be specified in .argocd-source.yaml file stored in the source application directory in the Git repository. Warn The .argocd-source is a beta feature and subject to change. The .argocd-source.yaml file is used during manifest generation and overrides application source fields, such as kustomize , helm etc. Example: kustomize : images : - gcr.io/heptio-images/ks-guestbook-demo:0.2 The .argocd-source is trying to solve two following main use cases: Provide the unifed way to \"override\" application parameters in Git and enable the \"write back\" feature for projects like argocd-image-updater . Support \"discovering\" applications in the Git repository by projects like applicationset (see git files generator ) The following is available from v1.9 or later You can also store parameter overrides in an application specific file, if you are sourcing multiple applications from a single path in your repository. The application specific file must be named .argocd-source-<appname>.yaml , where <appname> is the name of the application the overrides are valid for. If there exists an non-application specific .argocd-source.yaml , parameters included in that file will be merged first, and then the application specific parameters are merged, which can also contain overrides to the parameters stored in the non-application specific file.","title":"Store Overrides In Git"},{"location":"user-guide/private-repositories/","text":"Private Repositories \u00b6 Note Some Git hosters - notably GitLab and possibly on-premise GitLab instances as well - require you to specify the .git suffix in the repository URL, otherwise they will send a HTTP 301 redirect to the repository URL suffixed with .git . ArgoCD will not follow these redirects, so you have to adapt your repository URL to be suffixed with .git . Credentials \u00b6 If application manifests are located in private repository then repository credentials have to be configured. Argo CD supports both HTTP and SSH Git credentials. HTTPS Username And Password Credential \u00b6 Private repositories that require a username and password typically have a URL that start with https:// rather than git@ or ssh:// . Credentials can be configured using Argo CD CLI: argocd repo add https://github.com/argoproj/argocd-example-apps --username <username> --password <password> or UI: v1.2 or later Navigate to Settings/Repositories Click Connect Repo using HTTPS button and enter credentials Note: username in screenshot is for illustration purposes only , we have no relationship to this GitHub account should it exist. Click Connect to test the connection and have the repository added earlier than v1.2 Navigate to Settings/Repositories Click Connect Repo button and enter HTTP credentials Access Token \u00b6 Instead of using username and password you might use access token. Following instructions of your Git hosting service to generate the token: Github Gitlab Bitbucket Then, connect the repository using any non-empty string as username and the access token value as a password. Note For some services, you might have to specify your account name as the username instead of any string. TLS Client Certificates for HTTPS repositories \u00b6 v1.2 and later If your repository server requires you to use TLS client certificates for authentication, you can configure ArgoCD repositories to make use of them. For this purpose, --tls-client-cert-path and --tls-client-cert-key-path switches to the argocd repo add command can be used to specify the files on your local system containing client certificate and the corresponding key, respectively: argocd repo add https://repo.example.com/repo.git --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key Of course, you can also use this in combination with the --username and --password switches, if your repository server should require this. The options --tls-client-cert-path and --tls-client-cert-key-path must always be specified together. Your TLS client certificate and corresponding key can also be configured using the UI, see instructions for adding Git repos using HTTPS. Note Your client certificate and key data must be in PEM format, other formats (such as PKCS12) are not understood. Also make sure that your certificate's key is not password protected, otherwise it cannot be used by ArgoCD. Note When pasting TLS client certificate and key in the text areas in the web UI, make sure they contain no unintended line breaks or additional characters. SSH Private Key Credential \u00b6 Private repositories that require an SSH private key have a URL that typically start with git@ or ssh:// rather than https:// . v1.2 or later You can configure your Git repository using HTTPS either using the CLI or the UI. Using the CLI: argocd repo add git @github . com : argoproj / argocd - example - apps . git --ssh-private-key-path ~/.ssh/id_rsa Using the UI: Navigate to Settings/Repositories Click Connect Repo using SSH button, enter the URL and paste the SSH private key Click Connect to test the connection and have the repository added Note When pasting SSH private key in the UI, make sure there are no unintended line breaks or additional characters in the text area Note When your SSH repository is served from a non-standard port, you have to use ssh:// -style URLs to specify your repository. The scp-style git@yourgit.com:yourrepo URLs do not support port specification, and will treat any port number as part of the repository's path. earlier than v1.2 The Argo CD UI don't support configuring SSH credentials. The SSH credentials can only be configured using the Argo CD CLI: argocd repo add git @github . com : argoproj / argocd - example - apps . git --ssh-private-key-path ~/.ssh/id_rsa Credential templates \u00b6 previous to v1.4 Credential templates are available only via declarative setup, see Repository credentials in Operator Manual. v1.4 and later You can also set up credentials to serve as templates for connecting repositories, without having to repeat credential configuration. For example, if you setup credential templates for the URL prefix https://github.com/argoproj , these credentials will be used for all repositories with this URL as prefix (e.g. https://github.com/argoproj/argocd-example-apps ) that do not have their own credentials configured. To set up a credential template using the Web UI, simply fill in all relevant credential information in the Connect repo using SSH or Connect repo using HTTPS dialogues (as described above), but select Save as credential template instead of Connect to save the credential template. Be sure to only enter the prefix URL (i.e. https://github.com/argoproj ) instead of the complete repository URL (i.e. https://github.com/argoproj/argocd-example-apps ) in the field Repository URL To manage credential templates using the CLI, use the repocreds sub-command, for example argocd repocreds add https://github.com/argoproj --username youruser --password yourpass would setup a credential template for the URL prefix https://github.com/argoproj using the specified username/password combination. Similar to the repo sub-command, you can also list and remove repository credentials using the argocd repocreds list and argocd repocreds rm commands, respectively. In order for ArgoCD to use a credential template for any given repository, the following conditions must be met: The repository must either not be configured at all, or if configured, must not contain any credential information The URL configured for a credential template (e.g. https://github.com/argoproj ) must match as prefix for the repository URL (e.g. https://github.com/argoproj/argocd-example-apps ). Note Repositories that require authentication can be added using CLI or Web UI without specifying credentials only after a matching repository credential has been set up Note Matching credential template URL prefixes is done on a best match effort, so the longest (best) match will take precedence. The order of definition is not important, as opposed to pre v1.4 configuration. The following is an example CLI session, depicting repository credential set-up: # Try to add a private repository without specifying credentials, will fail $ argocd repo add https://docker-build/repos/argocd-example-apps FATA [ 0000 ] rpc error: code = Unknown desc = authentication required # Setup a credential template for all repos under https://docker-build/repos $ argocd repocreds add https://docker-build/repos --username test --password test repository credentials for 'https://docker-build/repos' added # Repeat first step, add repo without specifying credentials # URL for template matches, will succeed $ argocd repo add https://docker-build/repos/argocd-example-apps repository 'https://docker-build/repos/argocd-example-apps' added # Add another repo under https://docker-build/repos, specifying invalid creds # Will fail, because it will not use the template (has own creds) $ argocd repo add https://docker-build/repos/example-apps-part-two --username test --password invalid FATA [ 0000 ] rpc error: code = Unknown desc = authentication required Self-signed & Untrusted TLS Certificates \u00b6 v1.2 or later If you are connecting a repository on a HTTPS server using a self-signed certificate, or a certificate signed by a custom Certificate Authority (CA) which are not known to ArgoCD, the repository will not be added due to security reasons. This is indicated by an error message such as x509: certificate signed by unknown authority . You can let ArgoCD connect the repository in an insecure way, without verifying the server's certificate at all. This can be accomplished by using the --insecure-skip-server-verification flag when adding the repository with the argocd CLI utility. However, this should be done only for non-production setups, as it imposes a serious security issue through possible man-in-the-middle attacks. You can configure ArgoCD to use a custom certificate for the verification of the server's certificate using the cert add-tls command of the argocd CLI utility. This is the recommended method and suitable for production use. In order to do so, you will need the server's certificate, or the certificate of the CA used to sign the server's certificate, in PEM format. Note For invalid server certificates, such as those without matching server name, or those that are expired, adding a CA certificate will not help. In this case, your only option will be to use the --insecure-skip-server-verification flag to connect the repository. You are strongly urged to use a valid certificate on the repository server, or to urge the server's administrator to replace the faulty certificate with a valid one. Note TLS certificates are configured on a per-server, not on a per-repository basis. If you connect multiple repositories from the same server, you only have to configure the certificates once for this server. Note It can take up to a couple of minutes until the changes performed by the argocd cert command are propagated across your cluster, depending on your Kubernetes setup. Managing TLS certificates using the CLI \u00b6 You can list all configured TLS certificates by using the argocd cert list command using the --cert-type https modifier: $ argocd cert list --cert-type https HOSTNAME TYPE SUBTYPE FINGERPRINT/SUBJECT docker-build https rsa CN = ArgoCD Test CA localhost https rsa CN = localhost Example for adding a HTTPS repository to ArgoCD without verifying the server's certificate ( Caution: This is not recommended for production use): argocd repo add --insecure-skip-server-verification https://git.example.com/test-repo Example for adding a CA certificate contained in file ~/myca-cert.pem to properly verify the repository server: argocd cert add-tls git.example.com --from ~/myca-cert.pem argocd repo add https://git.example.com/test-repo You can also add more than one PEM for a server by concatenating them into the input stream. This might be useful if the repository server is about to replace the server certificate, possibly with one signed by a different CA. This way, you can have the old (current) as well as the new (future) certificate co-existing. If you already have the old certificate configured, use the --upsert flag and add the old and the new one in a single run: cat cert1.pem cert2.pem | argocd cert add-tls git.example.com --upsert Note To replace an existing certificate for a server, use the --upsert flag to the cert add-tls CLI command. Finally, TLS certificates can be removed using the argocd cert rm command with the --cert-type https modifier: argocd cert rm --cert-type https localhost Managing TLS certificates using the ArgoCD web UI \u00b6 It is possible to add and remove TLS certificates using the ArgoCD web UI: In the navigation pane to the left, click on \"Settings\" and choose \"Certificates\" from the settings menu The following page lists all currently configured certificates and provides you with the option to add either a new TLS certificate or SSH known entries: Click on \"Add TLS certificate\", fill in relevant data and click on \"Create\". Take care to specify only the FQDN of your repository server (not the URL) and that you C&P the complete PEM of your TLS certificate into the text area field, including the ----BEGIN CERTIFICATE---- and ----END CERTIFICATE---- lines: To remove a certificate, click on the small three-dotted button next to the certificate entry, select \"Remove\" from the pop-up menu and confirm the removal in the following dialogue. Managing TLS certificates using declarative configuration \u00b6 You can also manage TLS certificates in a declarative, self-managed ArgoCD setup. All TLS certificates are stored in the ConfigMap object argocd-tls-cert-cm . Please refer to the Operator Manual for more information. Before v1.2 We do not currently have first-class support for this. See #1513 . As a work-around, you can customize your Argo CD image. See #1344 Unknown SSH Hosts \u00b6 If you are using a privately hosted Git service over SSH, then you have the following options: v1.2 or later You can let ArgoCD connect the repository in an insecure way, without verifying the server's SSH host key at all. This can be accomplished by using the --insecure-skip-server-verification flag when adding the repository with the argocd CLI utility. However, this should be done only for non-production setups, as it imposes a serious security issue through possible man-in-the-middle attacks. You can make the server's SSH public key known to ArgoCD by using the cert add-ssh command of the argocd CLI utility. This is the recommended method and suitable for production use. In order to do so, you will need the server's SSH public host key, in the known_hosts format understood by ssh . You can get the server's public SSH host key e.g. by using the ssh-keyscan utility. Note It can take up to a couple of minutes until the changes performed by the argocd cert command are propagated across your cluster, depending on your Kubernetes setup. Note When importing SSH known hosts key from a known_hosts file, the hostnames or IP addresses in the input data must not be hashed. If your known_hosts file contains hashed entries, it cannot be used as input source for adding SSH known hosts - neither in the CLI nor in the UI. If you absolutely wish to use hashed known hosts data, the only option will be using declarative setup (see below). Be aware that this will break CLI and UI certificate management, so it is generally not recommended. Managing SSH Known Hosts using the CLI \u00b6 You can list all configured SSH known host entries using the argocd cert list command with the --cert-type ssh modifier: $ argocd cert list --cert-type ssh HOSTNAME TYPE SUBTYPE FINGERPRINT/SUBJECT bitbucket.org ssh ssh-rsa SHA256:zzXQOXSRBEiUtuE8AikJYKwbHaxvSc0ojez9YXaGp1A github.com ssh ssh-rsa SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8 gitlab.com ssh ecdsa-sha2-nistp256 SHA256:HbW3g8zUjNSksFbqTiUWPWg2Bq1x8xdGUrliXFzSnUw gitlab.com ssh ssh-ed25519 SHA256:eUXGGm1YGsMAS7vkcx6JOJdOGHPem5gQp4taiCfCLB8 gitlab.com ssh ssh-rsa SHA256:ROQFvPThGrW4RuWLoL9tq9I9zJ42fK4XywyRtbOz/EQ ssh.dev.azure.com ssh ssh-rsa SHA256:ohD8VZEXGWo6Ez8GSEJQ9WpafgLFsOfLOtGGQCQo6Og vs-ssh.visualstudio.com ssh ssh-rsa SHA256:ohD8VZEXGWo6Ez8GSEJQ9WpafgLFsOfLOtGGQCQo6Og For adding SSH known host entries, the argocd cert add-ssh command can be used. You can either add from a file (using the --from <file> modifier), or by reading stdin when the --batch modifier was specified. In both cases, input must be in known_hosts format as understood by the OpenSSH client. Example for adding all available SSH public host keys for a server to ArgoCD, as collected by ssh-keyscan : ssh-keyscan server.example.com | argocd cert add-ssh --batch Example for importing an existing known_hosts file to ArgoCD: argocd cert add-ssh --batch --from /etc/ssh/ssh_known_hosts Finally, SSH known host entries can be removed using the argocd cert rm command with the --cert-type ssh modifier: argocd cert rm bitbucket.org --cert-type ssh If you have multiple SSH known host entries for a given host with different key sub-types (e.g. as for gitlab.com in the example above, there are keys of sub-types ssh-rsa , ssh-ed25519 and ecdsa-sha2-nistp256 ) and you want to only remove one of them, you can further narrow down the selection using the --cert-sub-type modifier: argocd cert rm gitlab.com --cert-type ssh --cert-sub-type ssh-ed25519 Managing SSH known hosts data using the ArgoCD web UI \u00b6 It is possible to add and remove SSH known hosts entries using the ArgoCD web UI: In the navigation pane to the left, click on \"Settings\" and choose \"Certificates\" from the settings menu The following page lists all currently configured certificates and provides you with the option to add either a new TLS certificate or SSH known entries: Click on \"Add SSH known hosts\" and paste your SSH known hosts data in the following mask. Important : Make sure there are no line breaks in the entries (key data) when you paste the data. Afterwards, click on \"Create\". To remove a certificate, click on the small three-dotted button next to the certificate entry, select \"Remove\" from the pop-up menu and confirm the removal in the following dialogue. Managing SSH known hosts data using declarative setup \u00b6 You can also manage SSH known hosts entries in a declarative, self-managed ArgoCD setup. All SSH public host keys are stored in the ConfigMap object argocd-ssh-known-hosts-cm . For more details, please refer to the Operator Manual Before v1.2 (1) You can customize the Argo CD Docker image by adding the host's SSH public key to /etc/ssh/ssh_known_hosts . Additional entries to this file can be generated using the ssh-keyscan utility (e.g. ssh-keyscan your-private-git-server.com . For more information see example which demonstrates how /etc/ssh/ssh_known_hosts can be customized. Note The /etc/ssh/ssh_known_hosts should include Git host on each Argo CD deployment as well as on a computer where argocd repo add is executed. After resolving issue #1514 only argocd-repo-server deployment has to be customized. (1) Add repository using Argo CD CLI and --insecure-ignore-host-key flag: argocd repo add git@github.com:argoproj/argocd-example-apps.git --ssh-private-key-path ~/.ssh/id_rsa --insecure-ignore-host-key Don't use in production The --insecure-ignore-host-key should not be used in production as this is subject to man-in-the-middle attacks. This does not work for Kustomize remote bases or custom plugins For Kustomize support, see #827 . Git Submodules \u00b6 v1.4 or later Submodules are supported and will be picked up automatically. If the submodule repository requires authentication then the credentials will need to match the credentials of the parent repository. Set ARGOCD_GIT_MODULES_ENABLED=false to disable submodule support Declarative Configuration \u00b6 See declarative setup","title":"Private Repositories"},{"location":"user-guide/private-repositories/#private-repositories","text":"Note Some Git hosters - notably GitLab and possibly on-premise GitLab instances as well - require you to specify the .git suffix in the repository URL, otherwise they will send a HTTP 301 redirect to the repository URL suffixed with .git . ArgoCD will not follow these redirects, so you have to adapt your repository URL to be suffixed with .git .","title":"Private Repositories"},{"location":"user-guide/private-repositories/#credentials","text":"If application manifests are located in private repository then repository credentials have to be configured. Argo CD supports both HTTP and SSH Git credentials.","title":"Credentials"},{"location":"user-guide/private-repositories/#https-username-and-password-credential","text":"Private repositories that require a username and password typically have a URL that start with https:// rather than git@ or ssh:// . Credentials can be configured using Argo CD CLI: argocd repo add https://github.com/argoproj/argocd-example-apps --username <username> --password <password> or UI: v1.2 or later Navigate to Settings/Repositories Click Connect Repo using HTTPS button and enter credentials Note: username in screenshot is for illustration purposes only , we have no relationship to this GitHub account should it exist. Click Connect to test the connection and have the repository added earlier than v1.2 Navigate to Settings/Repositories Click Connect Repo button and enter HTTP credentials","title":"HTTPS Username And Password Credential"},{"location":"user-guide/private-repositories/#access-token","text":"Instead of using username and password you might use access token. Following instructions of your Git hosting service to generate the token: Github Gitlab Bitbucket Then, connect the repository using any non-empty string as username and the access token value as a password. Note For some services, you might have to specify your account name as the username instead of any string.","title":"Access Token"},{"location":"user-guide/private-repositories/#tls-client-certificates-for-https-repositories","text":"v1.2 and later If your repository server requires you to use TLS client certificates for authentication, you can configure ArgoCD repositories to make use of them. For this purpose, --tls-client-cert-path and --tls-client-cert-key-path switches to the argocd repo add command can be used to specify the files on your local system containing client certificate and the corresponding key, respectively: argocd repo add https://repo.example.com/repo.git --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key Of course, you can also use this in combination with the --username and --password switches, if your repository server should require this. The options --tls-client-cert-path and --tls-client-cert-key-path must always be specified together. Your TLS client certificate and corresponding key can also be configured using the UI, see instructions for adding Git repos using HTTPS. Note Your client certificate and key data must be in PEM format, other formats (such as PKCS12) are not understood. Also make sure that your certificate's key is not password protected, otherwise it cannot be used by ArgoCD. Note When pasting TLS client certificate and key in the text areas in the web UI, make sure they contain no unintended line breaks or additional characters.","title":"TLS Client Certificates for HTTPS repositories"},{"location":"user-guide/private-repositories/#ssh-private-key-credential","text":"Private repositories that require an SSH private key have a URL that typically start with git@ or ssh:// rather than https:// . v1.2 or later You can configure your Git repository using HTTPS either using the CLI or the UI. Using the CLI: argocd repo add git @github . com : argoproj / argocd - example - apps . git --ssh-private-key-path ~/.ssh/id_rsa Using the UI: Navigate to Settings/Repositories Click Connect Repo using SSH button, enter the URL and paste the SSH private key Click Connect to test the connection and have the repository added Note When pasting SSH private key in the UI, make sure there are no unintended line breaks or additional characters in the text area Note When your SSH repository is served from a non-standard port, you have to use ssh:// -style URLs to specify your repository. The scp-style git@yourgit.com:yourrepo URLs do not support port specification, and will treat any port number as part of the repository's path. earlier than v1.2 The Argo CD UI don't support configuring SSH credentials. The SSH credentials can only be configured using the Argo CD CLI: argocd repo add git @github . com : argoproj / argocd - example - apps . git --ssh-private-key-path ~/.ssh/id_rsa","title":"SSH Private Key Credential"},{"location":"user-guide/private-repositories/#credential-templates","text":"previous to v1.4 Credential templates are available only via declarative setup, see Repository credentials in Operator Manual. v1.4 and later You can also set up credentials to serve as templates for connecting repositories, without having to repeat credential configuration. For example, if you setup credential templates for the URL prefix https://github.com/argoproj , these credentials will be used for all repositories with this URL as prefix (e.g. https://github.com/argoproj/argocd-example-apps ) that do not have their own credentials configured. To set up a credential template using the Web UI, simply fill in all relevant credential information in the Connect repo using SSH or Connect repo using HTTPS dialogues (as described above), but select Save as credential template instead of Connect to save the credential template. Be sure to only enter the prefix URL (i.e. https://github.com/argoproj ) instead of the complete repository URL (i.e. https://github.com/argoproj/argocd-example-apps ) in the field Repository URL To manage credential templates using the CLI, use the repocreds sub-command, for example argocd repocreds add https://github.com/argoproj --username youruser --password yourpass would setup a credential template for the URL prefix https://github.com/argoproj using the specified username/password combination. Similar to the repo sub-command, you can also list and remove repository credentials using the argocd repocreds list and argocd repocreds rm commands, respectively. In order for ArgoCD to use a credential template for any given repository, the following conditions must be met: The repository must either not be configured at all, or if configured, must not contain any credential information The URL configured for a credential template (e.g. https://github.com/argoproj ) must match as prefix for the repository URL (e.g. https://github.com/argoproj/argocd-example-apps ). Note Repositories that require authentication can be added using CLI or Web UI without specifying credentials only after a matching repository credential has been set up Note Matching credential template URL prefixes is done on a best match effort, so the longest (best) match will take precedence. The order of definition is not important, as opposed to pre v1.4 configuration. The following is an example CLI session, depicting repository credential set-up: # Try to add a private repository without specifying credentials, will fail $ argocd repo add https://docker-build/repos/argocd-example-apps FATA [ 0000 ] rpc error: code = Unknown desc = authentication required # Setup a credential template for all repos under https://docker-build/repos $ argocd repocreds add https://docker-build/repos --username test --password test repository credentials for 'https://docker-build/repos' added # Repeat first step, add repo without specifying credentials # URL for template matches, will succeed $ argocd repo add https://docker-build/repos/argocd-example-apps repository 'https://docker-build/repos/argocd-example-apps' added # Add another repo under https://docker-build/repos, specifying invalid creds # Will fail, because it will not use the template (has own creds) $ argocd repo add https://docker-build/repos/example-apps-part-two --username test --password invalid FATA [ 0000 ] rpc error: code = Unknown desc = authentication required","title":"Credential templates"},{"location":"user-guide/private-repositories/#self-signed-untrusted-tls-certificates","text":"v1.2 or later If you are connecting a repository on a HTTPS server using a self-signed certificate, or a certificate signed by a custom Certificate Authority (CA) which are not known to ArgoCD, the repository will not be added due to security reasons. This is indicated by an error message such as x509: certificate signed by unknown authority . You can let ArgoCD connect the repository in an insecure way, without verifying the server's certificate at all. This can be accomplished by using the --insecure-skip-server-verification flag when adding the repository with the argocd CLI utility. However, this should be done only for non-production setups, as it imposes a serious security issue through possible man-in-the-middle attacks. You can configure ArgoCD to use a custom certificate for the verification of the server's certificate using the cert add-tls command of the argocd CLI utility. This is the recommended method and suitable for production use. In order to do so, you will need the server's certificate, or the certificate of the CA used to sign the server's certificate, in PEM format. Note For invalid server certificates, such as those without matching server name, or those that are expired, adding a CA certificate will not help. In this case, your only option will be to use the --insecure-skip-server-verification flag to connect the repository. You are strongly urged to use a valid certificate on the repository server, or to urge the server's administrator to replace the faulty certificate with a valid one. Note TLS certificates are configured on a per-server, not on a per-repository basis. If you connect multiple repositories from the same server, you only have to configure the certificates once for this server. Note It can take up to a couple of minutes until the changes performed by the argocd cert command are propagated across your cluster, depending on your Kubernetes setup.","title":"Self-signed &amp; Untrusted TLS Certificates"},{"location":"user-guide/private-repositories/#managing-tls-certificates-using-the-cli","text":"You can list all configured TLS certificates by using the argocd cert list command using the --cert-type https modifier: $ argocd cert list --cert-type https HOSTNAME TYPE SUBTYPE FINGERPRINT/SUBJECT docker-build https rsa CN = ArgoCD Test CA localhost https rsa CN = localhost Example for adding a HTTPS repository to ArgoCD without verifying the server's certificate ( Caution: This is not recommended for production use): argocd repo add --insecure-skip-server-verification https://git.example.com/test-repo Example for adding a CA certificate contained in file ~/myca-cert.pem to properly verify the repository server: argocd cert add-tls git.example.com --from ~/myca-cert.pem argocd repo add https://git.example.com/test-repo You can also add more than one PEM for a server by concatenating them into the input stream. This might be useful if the repository server is about to replace the server certificate, possibly with one signed by a different CA. This way, you can have the old (current) as well as the new (future) certificate co-existing. If you already have the old certificate configured, use the --upsert flag and add the old and the new one in a single run: cat cert1.pem cert2.pem | argocd cert add-tls git.example.com --upsert Note To replace an existing certificate for a server, use the --upsert flag to the cert add-tls CLI command. Finally, TLS certificates can be removed using the argocd cert rm command with the --cert-type https modifier: argocd cert rm --cert-type https localhost","title":"Managing TLS certificates using the CLI"},{"location":"user-guide/private-repositories/#managing-tls-certificates-using-the-argocd-web-ui","text":"It is possible to add and remove TLS certificates using the ArgoCD web UI: In the navigation pane to the left, click on \"Settings\" and choose \"Certificates\" from the settings menu The following page lists all currently configured certificates and provides you with the option to add either a new TLS certificate or SSH known entries: Click on \"Add TLS certificate\", fill in relevant data and click on \"Create\". Take care to specify only the FQDN of your repository server (not the URL) and that you C&P the complete PEM of your TLS certificate into the text area field, including the ----BEGIN CERTIFICATE---- and ----END CERTIFICATE---- lines: To remove a certificate, click on the small three-dotted button next to the certificate entry, select \"Remove\" from the pop-up menu and confirm the removal in the following dialogue.","title":"Managing TLS certificates using the ArgoCD web UI"},{"location":"user-guide/private-repositories/#managing-tls-certificates-using-declarative-configuration","text":"You can also manage TLS certificates in a declarative, self-managed ArgoCD setup. All TLS certificates are stored in the ConfigMap object argocd-tls-cert-cm . Please refer to the Operator Manual for more information. Before v1.2 We do not currently have first-class support for this. See #1513 . As a work-around, you can customize your Argo CD image. See #1344","title":"Managing TLS certificates using declarative configuration"},{"location":"user-guide/private-repositories/#unknown-ssh-hosts","text":"If you are using a privately hosted Git service over SSH, then you have the following options: v1.2 or later You can let ArgoCD connect the repository in an insecure way, without verifying the server's SSH host key at all. This can be accomplished by using the --insecure-skip-server-verification flag when adding the repository with the argocd CLI utility. However, this should be done only for non-production setups, as it imposes a serious security issue through possible man-in-the-middle attacks. You can make the server's SSH public key known to ArgoCD by using the cert add-ssh command of the argocd CLI utility. This is the recommended method and suitable for production use. In order to do so, you will need the server's SSH public host key, in the known_hosts format understood by ssh . You can get the server's public SSH host key e.g. by using the ssh-keyscan utility. Note It can take up to a couple of minutes until the changes performed by the argocd cert command are propagated across your cluster, depending on your Kubernetes setup. Note When importing SSH known hosts key from a known_hosts file, the hostnames or IP addresses in the input data must not be hashed. If your known_hosts file contains hashed entries, it cannot be used as input source for adding SSH known hosts - neither in the CLI nor in the UI. If you absolutely wish to use hashed known hosts data, the only option will be using declarative setup (see below). Be aware that this will break CLI and UI certificate management, so it is generally not recommended.","title":"Unknown SSH Hosts"},{"location":"user-guide/private-repositories/#managing-ssh-known-hosts-using-the-cli","text":"You can list all configured SSH known host entries using the argocd cert list command with the --cert-type ssh modifier: $ argocd cert list --cert-type ssh HOSTNAME TYPE SUBTYPE FINGERPRINT/SUBJECT bitbucket.org ssh ssh-rsa SHA256:zzXQOXSRBEiUtuE8AikJYKwbHaxvSc0ojez9YXaGp1A github.com ssh ssh-rsa SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8 gitlab.com ssh ecdsa-sha2-nistp256 SHA256:HbW3g8zUjNSksFbqTiUWPWg2Bq1x8xdGUrliXFzSnUw gitlab.com ssh ssh-ed25519 SHA256:eUXGGm1YGsMAS7vkcx6JOJdOGHPem5gQp4taiCfCLB8 gitlab.com ssh ssh-rsa SHA256:ROQFvPThGrW4RuWLoL9tq9I9zJ42fK4XywyRtbOz/EQ ssh.dev.azure.com ssh ssh-rsa SHA256:ohD8VZEXGWo6Ez8GSEJQ9WpafgLFsOfLOtGGQCQo6Og vs-ssh.visualstudio.com ssh ssh-rsa SHA256:ohD8VZEXGWo6Ez8GSEJQ9WpafgLFsOfLOtGGQCQo6Og For adding SSH known host entries, the argocd cert add-ssh command can be used. You can either add from a file (using the --from <file> modifier), or by reading stdin when the --batch modifier was specified. In both cases, input must be in known_hosts format as understood by the OpenSSH client. Example for adding all available SSH public host keys for a server to ArgoCD, as collected by ssh-keyscan : ssh-keyscan server.example.com | argocd cert add-ssh --batch Example for importing an existing known_hosts file to ArgoCD: argocd cert add-ssh --batch --from /etc/ssh/ssh_known_hosts Finally, SSH known host entries can be removed using the argocd cert rm command with the --cert-type ssh modifier: argocd cert rm bitbucket.org --cert-type ssh If you have multiple SSH known host entries for a given host with different key sub-types (e.g. as for gitlab.com in the example above, there are keys of sub-types ssh-rsa , ssh-ed25519 and ecdsa-sha2-nistp256 ) and you want to only remove one of them, you can further narrow down the selection using the --cert-sub-type modifier: argocd cert rm gitlab.com --cert-type ssh --cert-sub-type ssh-ed25519","title":"Managing SSH Known Hosts using the CLI"},{"location":"user-guide/private-repositories/#managing-ssh-known-hosts-data-using-the-argocd-web-ui","text":"It is possible to add and remove SSH known hosts entries using the ArgoCD web UI: In the navigation pane to the left, click on \"Settings\" and choose \"Certificates\" from the settings menu The following page lists all currently configured certificates and provides you with the option to add either a new TLS certificate or SSH known entries: Click on \"Add SSH known hosts\" and paste your SSH known hosts data in the following mask. Important : Make sure there are no line breaks in the entries (key data) when you paste the data. Afterwards, click on \"Create\". To remove a certificate, click on the small three-dotted button next to the certificate entry, select \"Remove\" from the pop-up menu and confirm the removal in the following dialogue.","title":"Managing SSH known hosts data using the ArgoCD web UI"},{"location":"user-guide/private-repositories/#managing-ssh-known-hosts-data-using-declarative-setup","text":"You can also manage SSH known hosts entries in a declarative, self-managed ArgoCD setup. All SSH public host keys are stored in the ConfigMap object argocd-ssh-known-hosts-cm . For more details, please refer to the Operator Manual Before v1.2 (1) You can customize the Argo CD Docker image by adding the host's SSH public key to /etc/ssh/ssh_known_hosts . Additional entries to this file can be generated using the ssh-keyscan utility (e.g. ssh-keyscan your-private-git-server.com . For more information see example which demonstrates how /etc/ssh/ssh_known_hosts can be customized. Note The /etc/ssh/ssh_known_hosts should include Git host on each Argo CD deployment as well as on a computer where argocd repo add is executed. After resolving issue #1514 only argocd-repo-server deployment has to be customized. (1) Add repository using Argo CD CLI and --insecure-ignore-host-key flag: argocd repo add git@github.com:argoproj/argocd-example-apps.git --ssh-private-key-path ~/.ssh/id_rsa --insecure-ignore-host-key Don't use in production The --insecure-ignore-host-key should not be used in production as this is subject to man-in-the-middle attacks. This does not work for Kustomize remote bases or custom plugins For Kustomize support, see #827 .","title":"Managing SSH known hosts data using declarative setup"},{"location":"user-guide/private-repositories/#git-submodules","text":"v1.4 or later Submodules are supported and will be picked up automatically. If the submodule repository requires authentication then the credentials will need to match the credentials of the parent repository. Set ARGOCD_GIT_MODULES_ENABLED=false to disable submodule support","title":"Git Submodules"},{"location":"user-guide/private-repositories/#declarative-configuration","text":"See declarative setup","title":"Declarative Configuration"},{"location":"user-guide/projects/","text":"Projects \u00b6 Projects provide a logical grouping of applications, which is useful when Argo CD is used by multiple teams. Projects provide the following features: restrict what may be deployed (trusted Git source repositories) restrict where apps may be deployed to (destination clusters and namespaces) restrict what kinds of objects may or may not be deployed (e.g. RBAC, CRDs, DaemonSets, NetworkPolicy etc...) defining project roles to provide application RBAC (bound to OIDC groups and/or JWT tokens) The Default Project \u00b6 Every application belongs to a single project. If unspecified, an application belongs to the default project, which is created automatically and by default, permits deployments from any source repo, to any cluster, and all resource Kinds. The default project can be modified, but not deleted. When initially created, it's specification is configured to be the most permissive: spec : sourceRepos : - '*' destinations : - namespace : '*' server : '*' clusterResourceWhitelist : - group : '*' kind : '*' Creating Projects \u00b6 Additional projects can be created to give separate teams different levels of access to namespaces. The following command creates a new project myproject which can deploy applications to namespace mynamespace of cluster https://kubernetes.default.svc . The permitted Git source repository is set to https://github.com/argoproj/argocd-example-apps.git repository. argocd proj create myproject -d https://kubernetes.default.svc,mynamespace -s https://github.com/argoproj/argocd-example-apps.git Managing Projects \u00b6 Permitted source Git repositories are managed using commands: argocd proj add-source <PROJECT> <REPO> argocd proj remove-source <PROJECT> <REPO> Permitted destination clusters and namespaces are managed with the commands (for clusters always provide server, the name is not used for matching): argocd proj add-destination <PROJECT> <CLUSTER>,<NAMESPACE> argocd proj remove-destination <PROJECT> <CLUSTER>,<NAMESPACE> Permitted destination K8s resource kinds are managed with the commands. Note that namespaced-scoped resources are restricted via a deny list, whereas cluster-scoped resources are restricted via allow list. argocd proj allow-cluster-resource <PROJECT> <GROUP> <KIND> argocd proj allow-namespace-resource <PROJECT> <GROUP> <KIND> argocd proj deny-cluster-resource <PROJECT> <GROUP> <KIND> argocd proj deny-namespace-resource <PROJECT> <GROUP> <KIND> Assign Application To A Project \u00b6 The application project can be changed using app set command. In order to change the project of an app, the user must have permissions to access the new project. argocd app set guestbook-default --project myproject Project Roles \u00b6 Projects include a feature called roles that enable automated access to a project's applications. These can be used to give a CI pipeline a restricted set of permissions. For example, a CI system may only be able to sync a single app (but not change its source or destination). Projects can have multiple roles, and those roles can have different access granted to them. These permissions are called policies, and they are stored within the role as a list of policy strings. A role's policy can only grant access to that role and are limited to applications within the role's project. However, the policies have an option for granting wildcard access to any application within a project. In order to create roles in a project and add policies to a role, a user will need permission to update a project. The following commands can be used to manage a role. argocd proj role list argocd proj role get argocd proj role create argocd proj role delete argocd proj role add-policy argocd proj role remove-policy Project roles in itself are not useful without generating a token to associate to that role. Argo CD supports JWT tokens as the means to authenticate to a role. Since the JWT token is associated with a role's policies, any changes to the role's policies will immediately take effect for that JWT token. The following commands are used to manage the JWT tokens. argocd proj role create-token PROJECT ROLE-NAME argocd proj role delete-token PROJECT ROLE-NAME ISSUED-AT Since the JWT tokens aren't stored in Argo CD, they can only be retrieved when they are created. A user can leverage them in the cli by either passing them in using the --auth-token flag or setting the ARGOCD_AUTH_TOKEN environment variable. The JWT tokens can be used until they expire or are revoked. The JWT tokens can created with or without an expiration, but the default on the cli is creates them without an expirations date. Even if a token has not expired, it cannot be used if the token has been revoked. Below is an example of leveraging a JWT token to access a guestbook application. It makes the assumption that the user already has a project named myproject and an application called guestbook-default. PROJ = myproject APP = guestbook-default ROLE = get-role argocd proj role create $PROJ $ROLE argocd proj role create-token $PROJ $ROLE -e 10m JWT = <value from command above> argocd proj role list $PROJ argocd proj role get $PROJ $ROLE # This command will fail because the JWT Token associated with the project role does not have a policy to allow access to the application argocd app get $APP --auth-token $JWT # Adding a policy to grant access to the application for the new role argocd proj role add-policy $PROJ $ROLE --action get --permission allow --object $APP argocd app get $APP --auth-token $JWT # Removing the policy we added and adding one with a wildcard. argocd proj role remove-policy $PROJ $ROLE -a get -o $APP argocd proj role add-policy $PROJ $ROLE -a get --permission allow -o '*' # The wildcard allows us to access the application due to the wildcard. argocd app get $APP --auth-token $JWT argocd proj role get $PROJ $ROLE argocd proj role get $PROJ $ROLE # Revoking the JWT token argocd proj role delete-token $PROJ $ROLE <id field from the last command> # This will fail since the JWT Token was deleted for the project role. argocd app get $APP --auth-token $JWT Configuring RBAC With Projects \u00b6 The project Roles allows configuring RBAC rules scoped to the project. The following sample project provides read-only permissions on project applications to any member of my-oidc-group group. AppProject example: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : my-project namespace : argocd spec : roles : # A role which provides read-only access to all applications in the project - name : read-only description : Read-only privileges to my-project policies : - p, proj:my-project:read-only, applications, get, my-project/*, allow groups : - my-oidc-group You can use argocd proj role CLI commands or project details page in the user interface to configure the policy. Note that each project role policy rule must be scoped to that project only. Use the argocd-rbac-cm ConfigMap described in RBAC documentation if you want to configure cross project RBAC rules. Configuring Global Projects (v1.8) \u00b6 Global projects can be configured to provide configurations that other projects can inherit from. Projects, which match matchExpressions specified in argocd-cm ConfigMap, inherit the following fields from the global project: namespaceResourceBlacklist namespaceResourceWhitelist clusterResourceBlacklist clusterResourceWhitelist SyncWindows Configure global projects in argocd-cm ConfigMap: data : globalProjects : |- - labelSelector: matchExpressions: - key: opt operator: In values: - prod projectName: proj-global-test kind : ConfigMap Valid operators you can use are: In, NotIn, Exists, DoesNotExist. Gt, and Lt. projectName: proj-global-test should be replaced with your own global project name.","title":"Projects"},{"location":"user-guide/projects/#projects","text":"Projects provide a logical grouping of applications, which is useful when Argo CD is used by multiple teams. Projects provide the following features: restrict what may be deployed (trusted Git source repositories) restrict where apps may be deployed to (destination clusters and namespaces) restrict what kinds of objects may or may not be deployed (e.g. RBAC, CRDs, DaemonSets, NetworkPolicy etc...) defining project roles to provide application RBAC (bound to OIDC groups and/or JWT tokens)","title":"Projects"},{"location":"user-guide/projects/#the-default-project","text":"Every application belongs to a single project. If unspecified, an application belongs to the default project, which is created automatically and by default, permits deployments from any source repo, to any cluster, and all resource Kinds. The default project can be modified, but not deleted. When initially created, it's specification is configured to be the most permissive: spec : sourceRepos : - '*' destinations : - namespace : '*' server : '*' clusterResourceWhitelist : - group : '*' kind : '*'","title":"The Default Project"},{"location":"user-guide/projects/#creating-projects","text":"Additional projects can be created to give separate teams different levels of access to namespaces. The following command creates a new project myproject which can deploy applications to namespace mynamespace of cluster https://kubernetes.default.svc . The permitted Git source repository is set to https://github.com/argoproj/argocd-example-apps.git repository. argocd proj create myproject -d https://kubernetes.default.svc,mynamespace -s https://github.com/argoproj/argocd-example-apps.git","title":"Creating Projects"},{"location":"user-guide/projects/#managing-projects","text":"Permitted source Git repositories are managed using commands: argocd proj add-source <PROJECT> <REPO> argocd proj remove-source <PROJECT> <REPO> Permitted destination clusters and namespaces are managed with the commands (for clusters always provide server, the name is not used for matching): argocd proj add-destination <PROJECT> <CLUSTER>,<NAMESPACE> argocd proj remove-destination <PROJECT> <CLUSTER>,<NAMESPACE> Permitted destination K8s resource kinds are managed with the commands. Note that namespaced-scoped resources are restricted via a deny list, whereas cluster-scoped resources are restricted via allow list. argocd proj allow-cluster-resource <PROJECT> <GROUP> <KIND> argocd proj allow-namespace-resource <PROJECT> <GROUP> <KIND> argocd proj deny-cluster-resource <PROJECT> <GROUP> <KIND> argocd proj deny-namespace-resource <PROJECT> <GROUP> <KIND>","title":"Managing Projects"},{"location":"user-guide/projects/#assign-application-to-a-project","text":"The application project can be changed using app set command. In order to change the project of an app, the user must have permissions to access the new project. argocd app set guestbook-default --project myproject","title":"Assign Application To A Project"},{"location":"user-guide/projects/#project-roles","text":"Projects include a feature called roles that enable automated access to a project's applications. These can be used to give a CI pipeline a restricted set of permissions. For example, a CI system may only be able to sync a single app (but not change its source or destination). Projects can have multiple roles, and those roles can have different access granted to them. These permissions are called policies, and they are stored within the role as a list of policy strings. A role's policy can only grant access to that role and are limited to applications within the role's project. However, the policies have an option for granting wildcard access to any application within a project. In order to create roles in a project and add policies to a role, a user will need permission to update a project. The following commands can be used to manage a role. argocd proj role list argocd proj role get argocd proj role create argocd proj role delete argocd proj role add-policy argocd proj role remove-policy Project roles in itself are not useful without generating a token to associate to that role. Argo CD supports JWT tokens as the means to authenticate to a role. Since the JWT token is associated with a role's policies, any changes to the role's policies will immediately take effect for that JWT token. The following commands are used to manage the JWT tokens. argocd proj role create-token PROJECT ROLE-NAME argocd proj role delete-token PROJECT ROLE-NAME ISSUED-AT Since the JWT tokens aren't stored in Argo CD, they can only be retrieved when they are created. A user can leverage them in the cli by either passing them in using the --auth-token flag or setting the ARGOCD_AUTH_TOKEN environment variable. The JWT tokens can be used until they expire or are revoked. The JWT tokens can created with or without an expiration, but the default on the cli is creates them without an expirations date. Even if a token has not expired, it cannot be used if the token has been revoked. Below is an example of leveraging a JWT token to access a guestbook application. It makes the assumption that the user already has a project named myproject and an application called guestbook-default. PROJ = myproject APP = guestbook-default ROLE = get-role argocd proj role create $PROJ $ROLE argocd proj role create-token $PROJ $ROLE -e 10m JWT = <value from command above> argocd proj role list $PROJ argocd proj role get $PROJ $ROLE # This command will fail because the JWT Token associated with the project role does not have a policy to allow access to the application argocd app get $APP --auth-token $JWT # Adding a policy to grant access to the application for the new role argocd proj role add-policy $PROJ $ROLE --action get --permission allow --object $APP argocd app get $APP --auth-token $JWT # Removing the policy we added and adding one with a wildcard. argocd proj role remove-policy $PROJ $ROLE -a get -o $APP argocd proj role add-policy $PROJ $ROLE -a get --permission allow -o '*' # The wildcard allows us to access the application due to the wildcard. argocd app get $APP --auth-token $JWT argocd proj role get $PROJ $ROLE argocd proj role get $PROJ $ROLE # Revoking the JWT token argocd proj role delete-token $PROJ $ROLE <id field from the last command> # This will fail since the JWT Token was deleted for the project role. argocd app get $APP --auth-token $JWT","title":"Project Roles"},{"location":"user-guide/projects/#configuring-rbac-with-projects","text":"The project Roles allows configuring RBAC rules scoped to the project. The following sample project provides read-only permissions on project applications to any member of my-oidc-group group. AppProject example: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : my-project namespace : argocd spec : roles : # A role which provides read-only access to all applications in the project - name : read-only description : Read-only privileges to my-project policies : - p, proj:my-project:read-only, applications, get, my-project/*, allow groups : - my-oidc-group You can use argocd proj role CLI commands or project details page in the user interface to configure the policy. Note that each project role policy rule must be scoped to that project only. Use the argocd-rbac-cm ConfigMap described in RBAC documentation if you want to configure cross project RBAC rules.","title":"Configuring RBAC With Projects"},{"location":"user-guide/projects/#configuring-global-projects-v18","text":"Global projects can be configured to provide configurations that other projects can inherit from. Projects, which match matchExpressions specified in argocd-cm ConfigMap, inherit the following fields from the global project: namespaceResourceBlacklist namespaceResourceWhitelist clusterResourceBlacklist clusterResourceWhitelist SyncWindows Configure global projects in argocd-cm ConfigMap: data : globalProjects : |- - labelSelector: matchExpressions: - key: opt operator: In values: - prod projectName: proj-global-test kind : ConfigMap Valid operators you can use are: In, NotIn, Exists, DoesNotExist. Gt, and Lt. projectName: proj-global-test should be replaced with your own global project name.","title":"Configuring Global Projects (v1.8)"},{"location":"user-guide/resource_hooks/","text":"Resource Hooks \u00b6 Overview \u00b6 Synchronization can be configured using resource hooks. Hooks are ways to run scripts before, during, and after a Sync operation. Hooks can also be run if a Sync operation fails at any point. Some use cases for hooks are: Using a PreSync hook to perform a database schema migration before deploying a new version of the app. Using a Sync hook to orchestrate a complex deployment requiring more sophistication than the Kubernetes rolling update strategy. Using a PostSync hook to run integration and health checks after a deployment. Using a SyncFail hook to run clean-up or finalizer logic if a Sync operation fails. SyncFail hooks are only available starting in v1.2 Usage \u00b6 Hooks are simply Kubernetes manifests tracked in the source repository of your Argo CD Application annotated with argocd.argoproj.io/hook , e.g.: apiVersion : batch/v1 kind : Job metadata : generateName : schema-migrate- annotations : argocd.argoproj.io/hook : PreSync During a Sync operation, Argo CD will apply the resource during the appropriate phase of the deployment. Hooks can be any type of Kubernetes resource kind, but tend to be Pod, Job or Argo Workflows . Multiple hooks can be specified as a comma separated list. The following hooks are defined: Hook Description PreSync Executes prior to the application of the manifests. Sync Executes after all PreSync hooks completed and were successful, at the same time as the application of the manifests. Skip Indicates to Argo CD to skip the application of the manifest. PostSync Executes after all Sync hooks completed and were successful, a successful application, and all resources in a Healthy state. SyncFail Executes when the sync operation fails. Available starting in v1.2 Generate Name \u00b6 Named hooks (i.e. ones with /metadata/name ) will only be created once. If you want a hook to be re-created each time either use BeforeHookCreation policy (see below) or /metadata/generateName . Selective Sync \u00b6 Hooks are not run during selective sync . Hook Deletion Policies \u00b6 Hooks can be deleted in an automatic fashion using the annotation: argocd.argoproj.io/hook-delete-policy . apiVersion : batch/v1 kind : Job metadata : generateName : integration-test- annotations : argocd.argoproj.io/hook : PostSync argocd.argoproj.io/hook-delete-policy : HookSucceeded The following policies define when the hook will be deleted. Policy Description HookSucceeded The hook resource is deleted after the hook succeeded (e.g. Job/Workflow completed successfully). HookFailed The hook resource is deleted after the hook failed. BeforeHookCreation Any existing hook resource is deleted before the new one is created (since v1.3). As an alternative to hook deletion policies, both Jobs and Argo Workflows support the ttlSecondsAfterFinished field in the spec, which let their respective controllers delete the Job/Workflow after it completes. spec : ttlSecondsAfterFinished : 600 Using A Hook To Send A Slack Message \u00b6 The following example uses the Slack API to send a a Slack message when sync completes or fails: apiVersion : batch/v1 kind : Job metadata : generateName : app-slack-notification- annotations : argocd.argoproj.io/hook : PostSync argocd.argoproj.io/hook-delete-policy : HookSucceeded spec : template : spec : containers : - name : slack-notification image : curlimages/curl command : - \"curl\" - \"-X\" - \"POST\" - \"--data-urlencode\" - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync succeeded\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\" - \"https://hooks.slack.com/services/...\" restartPolicy : Never backoffLimit : 2 apiVersion : batch/v1 kind : Job metadata : generateName : app-slack-notification-fail- annotations : argocd.argoproj.io/hook : SyncFail argocd.argoproj.io/hook-delete-policy : HookSucceeded spec : template : spec : containers : - name : slack-notification image : curlimages/curl command : - \"curl\" - \"-X\" - \"POST\" - \"--data-urlencode\" - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync failed\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\" - \"https://hooks.slack.com/services/...\" restartPolicy : Never backoffLimit : 2","title":"Resource Hooks"},{"location":"user-guide/resource_hooks/#resource-hooks","text":"","title":"Resource Hooks"},{"location":"user-guide/resource_hooks/#overview","text":"Synchronization can be configured using resource hooks. Hooks are ways to run scripts before, during, and after a Sync operation. Hooks can also be run if a Sync operation fails at any point. Some use cases for hooks are: Using a PreSync hook to perform a database schema migration before deploying a new version of the app. Using a Sync hook to orchestrate a complex deployment requiring more sophistication than the Kubernetes rolling update strategy. Using a PostSync hook to run integration and health checks after a deployment. Using a SyncFail hook to run clean-up or finalizer logic if a Sync operation fails. SyncFail hooks are only available starting in v1.2","title":"Overview"},{"location":"user-guide/resource_hooks/#usage","text":"Hooks are simply Kubernetes manifests tracked in the source repository of your Argo CD Application annotated with argocd.argoproj.io/hook , e.g.: apiVersion : batch/v1 kind : Job metadata : generateName : schema-migrate- annotations : argocd.argoproj.io/hook : PreSync During a Sync operation, Argo CD will apply the resource during the appropriate phase of the deployment. Hooks can be any type of Kubernetes resource kind, but tend to be Pod, Job or Argo Workflows . Multiple hooks can be specified as a comma separated list. The following hooks are defined: Hook Description PreSync Executes prior to the application of the manifests. Sync Executes after all PreSync hooks completed and were successful, at the same time as the application of the manifests. Skip Indicates to Argo CD to skip the application of the manifest. PostSync Executes after all Sync hooks completed and were successful, a successful application, and all resources in a Healthy state. SyncFail Executes when the sync operation fails. Available starting in v1.2","title":"Usage"},{"location":"user-guide/resource_hooks/#generate-name","text":"Named hooks (i.e. ones with /metadata/name ) will only be created once. If you want a hook to be re-created each time either use BeforeHookCreation policy (see below) or /metadata/generateName .","title":"Generate Name"},{"location":"user-guide/resource_hooks/#selective-sync","text":"Hooks are not run during selective sync .","title":"Selective Sync"},{"location":"user-guide/resource_hooks/#hook-deletion-policies","text":"Hooks can be deleted in an automatic fashion using the annotation: argocd.argoproj.io/hook-delete-policy . apiVersion : batch/v1 kind : Job metadata : generateName : integration-test- annotations : argocd.argoproj.io/hook : PostSync argocd.argoproj.io/hook-delete-policy : HookSucceeded The following policies define when the hook will be deleted. Policy Description HookSucceeded The hook resource is deleted after the hook succeeded (e.g. Job/Workflow completed successfully). HookFailed The hook resource is deleted after the hook failed. BeforeHookCreation Any existing hook resource is deleted before the new one is created (since v1.3). As an alternative to hook deletion policies, both Jobs and Argo Workflows support the ttlSecondsAfterFinished field in the spec, which let their respective controllers delete the Job/Workflow after it completes. spec : ttlSecondsAfterFinished : 600","title":"Hook Deletion Policies"},{"location":"user-guide/resource_hooks/#using-a-hook-to-send-a-slack-message","text":"The following example uses the Slack API to send a a Slack message when sync completes or fails: apiVersion : batch/v1 kind : Job metadata : generateName : app-slack-notification- annotations : argocd.argoproj.io/hook : PostSync argocd.argoproj.io/hook-delete-policy : HookSucceeded spec : template : spec : containers : - name : slack-notification image : curlimages/curl command : - \"curl\" - \"-X\" - \"POST\" - \"--data-urlencode\" - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync succeeded\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\" - \"https://hooks.slack.com/services/...\" restartPolicy : Never backoffLimit : 2 apiVersion : batch/v1 kind : Job metadata : generateName : app-slack-notification-fail- annotations : argocd.argoproj.io/hook : SyncFail argocd.argoproj.io/hook-delete-policy : HookSucceeded spec : template : spec : containers : - name : slack-notification image : curlimages/curl command : - \"curl\" - \"-X\" - \"POST\" - \"--data-urlencode\" - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync failed\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\" - \"https://hooks.slack.com/services/...\" restartPolicy : Never backoffLimit : 2","title":"Using A Hook To Send A Slack Message"},{"location":"user-guide/selective_sync/","text":"Selective Sync \u00b6 A selective sync is one where only some resources are sync'd. You can choose which resources from the UI: When doing so, bear in mind: Your sync is not recorded in the history, and so rollback is not possible. Hooks are not run.","title":"Selective Sync"},{"location":"user-guide/selective_sync/#selective-sync","text":"A selective sync is one where only some resources are sync'd. You can choose which resources from the UI: When doing so, bear in mind: Your sync is not recorded in the history, and so rollback is not possible. Hooks are not run.","title":"Selective Sync"},{"location":"user-guide/status-badge/","text":"Status Badge \u00b6 v1.2 Argo CD can display a badge with health and sync status for any application. The feature is disabled by default because badge image is available to any user without authentication. The feature can be enabled using statusbadge.enabled key of argocd-cm ConfigMap (see argocd-cm.yaml ). To show this badge, use the following URL format ${argoCdBaseUrl}/api/badge?name=${appName} , e.g. http://localhost:8080/api/badge?name=guestbook. The URLs for status image are available on application details page: Navigate to application details page and click on 'Details' button. Scroll down to 'Status Badge' section. Select required template such as URL, Markdown etc. for the status image URL in markdown, html, etc are available . Copy the text and paste it into your README or website.","title":"Status Badge"},{"location":"user-guide/status-badge/#status-badge","text":"v1.2 Argo CD can display a badge with health and sync status for any application. The feature is disabled by default because badge image is available to any user without authentication. The feature can be enabled using statusbadge.enabled key of argocd-cm ConfigMap (see argocd-cm.yaml ). To show this badge, use the following URL format ${argoCdBaseUrl}/api/badge?name=${appName} , e.g. http://localhost:8080/api/badge?name=guestbook. The URLs for status image are available on application details page: Navigate to application details page and click on 'Details' button. Scroll down to 'Status Badge' section. Select required template such as URL, Markdown etc. for the status image URL in markdown, html, etc are available . Copy the text and paste it into your README or website.","title":"Status Badge"},{"location":"user-guide/sync-options/","text":"Sync Options \u00b6 No Prune Resources \u00b6 v1.1 You may wish to prevent an object from being pruned: metadata : annotations : argocd.argoproj.io/sync-options : Prune=false In the UI, the pod will simply appear as out-of-sync: The sync-status panel shows that pruning was skipped, and why: The app will be out of sync if Argo CD expects a resource to be pruned. You may wish to use this along with compare options . Disable Kubectl Validation \u00b6 v1.2 For a certain class of objects, it is necessary to kubectl apply them using the --validate=false flag. Examples of this are kubernetes types which uses RawExtension , such as ServiceCatalog . You can do using this annotations: metadata : annotations : argocd.argoproj.io/sync-options : Validate=false If you want to exclude a whole class of objects globally, consider setting resource.customizations in system level configuration . Skip Dry Run for new custom resources types \u00b6 v1.6 When syncing a custom resource which is not yet known to the cluster, there are generally two options: 1) The CRD manifest is part of the same sync. Then ArgoCD will automatically skip the dry run, the CRD will be applied and the resource can be created. 2) In some cases the CRD is not part of the sync, but it could be created in another way, e.g. by a controller in the cluster. An example is gatekeeper , which creates CRDs in response to user defined ConstraintTemplates . ArgoCD cannot find the CRD in the sync and will fail with the error the server could not find the requested resource . To skip the dry run for missing resource types, use the following annotation: metadata : annotations : argocd.argoproj.io/sync-options : SkipDryRunOnMissingResource=true The dry run will still be executed if the CRD is already present in the cluster.","title":"Sync Options"},{"location":"user-guide/sync-options/#sync-options","text":"","title":"Sync Options"},{"location":"user-guide/sync-options/#no-prune-resources","text":"v1.1 You may wish to prevent an object from being pruned: metadata : annotations : argocd.argoproj.io/sync-options : Prune=false In the UI, the pod will simply appear as out-of-sync: The sync-status panel shows that pruning was skipped, and why: The app will be out of sync if Argo CD expects a resource to be pruned. You may wish to use this along with compare options .","title":"No Prune Resources"},{"location":"user-guide/sync-options/#disable-kubectl-validation","text":"v1.2 For a certain class of objects, it is necessary to kubectl apply them using the --validate=false flag. Examples of this are kubernetes types which uses RawExtension , such as ServiceCatalog . You can do using this annotations: metadata : annotations : argocd.argoproj.io/sync-options : Validate=false If you want to exclude a whole class of objects globally, consider setting resource.customizations in system level configuration .","title":"Disable Kubectl Validation"},{"location":"user-guide/sync-options/#skip-dry-run-for-new-custom-resources-types","text":"v1.6 When syncing a custom resource which is not yet known to the cluster, there are generally two options: 1) The CRD manifest is part of the same sync. Then ArgoCD will automatically skip the dry run, the CRD will be applied and the resource can be created. 2) In some cases the CRD is not part of the sync, but it could be created in another way, e.g. by a controller in the cluster. An example is gatekeeper , which creates CRDs in response to user defined ConstraintTemplates . ArgoCD cannot find the CRD in the sync and will fail with the error the server could not find the requested resource . To skip the dry run for missing resource types, use the following annotation: metadata : annotations : argocd.argoproj.io/sync-options : SkipDryRunOnMissingResource=true The dry run will still be executed if the CRD is already present in the cluster.","title":"Skip Dry Run for new custom resources types"},{"location":"user-guide/sync-waves/","text":"Sync Phases and Waves \u00b6 v1.1 Argo CD executes a sync operation in a number of steps. At a high-level, there are three phases pre-sync , sync and post-sync . Within each phase you can have one or more waves, that allows you to ensure certain resources are healthy before subsequent resources are synced. How Do I Configure Phases? \u00b6 Pre-sync and post-sync can only contain hooks. Apply the hook annotation: metadata : annotations : argocd.argoproj.io/hook : PreSync Read more about hooks . How Do I Configure Waves? \u00b6 Specify the wave using the following annotation: metadata : annotations : argocd.argoproj.io/sync-wave : \"5\" Hooks and resources are assigned to wave zero by default. The wave can be negative, so you can create a wave that runs before all other resources. How Does It Work? \u00b6 When Argo CD starts a sync, it orders the resources in the following precedence: The phase The wave they are in (lower values first) By kind (e.g. namespaces first) By name It then determines which the number of the next wave to apply. This is the first number where any resource is out-of-sync or unhealthy. It applies resources in that wave. It repeats this process until all phases and waves are in in-sync and healthy. Because an application can have resources that are unhealthy in the first wave, it may be that the app can never get to healthy.","title":"Sync Phases and Waves"},{"location":"user-guide/sync-waves/#sync-phases-and-waves","text":"v1.1 Argo CD executes a sync operation in a number of steps. At a high-level, there are three phases pre-sync , sync and post-sync . Within each phase you can have one or more waves, that allows you to ensure certain resources are healthy before subsequent resources are synced.","title":"Sync Phases and Waves"},{"location":"user-guide/sync-waves/#how-do-i-configure-phases","text":"Pre-sync and post-sync can only contain hooks. Apply the hook annotation: metadata : annotations : argocd.argoproj.io/hook : PreSync Read more about hooks .","title":"How Do I Configure Phases?"},{"location":"user-guide/sync-waves/#how-do-i-configure-waves","text":"Specify the wave using the following annotation: metadata : annotations : argocd.argoproj.io/sync-wave : \"5\" Hooks and resources are assigned to wave zero by default. The wave can be negative, so you can create a wave that runs before all other resources.","title":"How Do I Configure Waves?"},{"location":"user-guide/sync-waves/#how-does-it-work","text":"When Argo CD starts a sync, it orders the resources in the following precedence: The phase The wave they are in (lower values first) By kind (e.g. namespaces first) By name It then determines which the number of the next wave to apply. This is the first number where any resource is out-of-sync or unhealthy. It applies resources in that wave. It repeats this process until all phases and waves are in in-sync and healthy. Because an application can have resources that are unhealthy in the first wave, it may be that the app can never get to healthy.","title":"How Does It Work?"},{"location":"user-guide/sync_windows/","text":"Sync Windows \u00b6 Sync windows are configurable windows of time where syncs will either be blocked or allowed. These are defined by a kind, which can be either allow or deny , a schedule in cron format and a duration along with one or more of either applications , namespaces and clusters . Wildcards are supported. These windows affect the running of both manual and automated syncs but allow an override for manual syncs which is useful if you are only interested in preventing automated syncs or if you need to temporarily override a window to perform a sync. The windows work in the following way. If there are no windows matching an application then all syncs are allowed. If there are any allow windows matching an application then syncs will only be allowed when there ia an active allow windows. If there are any deny windows matching an application then all syncs will be denied when the deny windows are active. If there is an active matching allow and an active matching deny then syncs will be denied as deny windows override allow windows. The UI and the CLI will both display the state of the sync windows. The UI has a panel which will display different colours depending on the state. The colours are as follows. Red: sync denied , Orange: manual allowed and Green: sync allowed . To display the sync state using the CLI: argocd app get APP Which will return the sync state and any matching windows. Name : guestbook Project : default Server : in - cluster Namespace : default URL : http : // localhost : 8080 / applications / guestbook Repo : https : // github . com / argoproj / argocd - example - apps . git Target : Path : guestbook SyncWindow : Sync Denied Assigned Windows : deny : 0 2 * * * : 1 h , allow : 0 2 3 3 3 : 1 h Sync Policy : Automated Sync Status : Synced to ( 5 c2d89b ) Health Status : Healthy Windows can be created using the CLI: argocd proj windows add PROJECT \\ --kind allow \\ --schedule \"0 22 * * *\" \\ --duration 1h \\ --applications \"*\" Alternatively, they can be created directly in the AppProject manifest: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : default spec : syncWindows : - kind : allow schedule : '10 1 * * *' duration : 1h applications : - '*-prod' manualSync : true - kind : deny schedule : '0 22 * * *' duration : 1h namespaces : - default - kind : allow schedule : '0 23 * * *' duration : 1h clusters : - in-cluster - cluster1 In order to perform a sync when syncs are being prevented by a window, you can configure the window to allow manual syncs using the CLI, UI or directly in the AppProject manifest: argocd proj windows enable-manual-sync PROJECT ID To disable argocd proj windows disable-manual-sync PROJECT ID Windows can be listed using the CLI or viewed in the UI: argocd proj windows list PROJECT ID STATUS KIND SCHEDULE DURATION APPLICATIONS NAMESPACES CLUSTERS MANUALSYNC 0 Active allow * * * * * 1h - - prod1 Disabled 1 Inactive deny * * * * 1 3h - default - Disabled 2 Inactive allow 1 2 * * * 1h prod-* - - Enabled 3 Active deny * * * * * 1h - default - Disabled All fields of a window can be updated using either the CLI or UI. The applications , namespaces and clusters fields require the update to contain all of the required values. For example if updating the namespaces field and it already contains default and kube-system then the new value would have to include those in the list. argocd proj windows update PROJECT ID --namespaces default,kube-system,prod1","title":"Sync Windows"},{"location":"user-guide/sync_windows/#sync-windows","text":"Sync windows are configurable windows of time where syncs will either be blocked or allowed. These are defined by a kind, which can be either allow or deny , a schedule in cron format and a duration along with one or more of either applications , namespaces and clusters . Wildcards are supported. These windows affect the running of both manual and automated syncs but allow an override for manual syncs which is useful if you are only interested in preventing automated syncs or if you need to temporarily override a window to perform a sync. The windows work in the following way. If there are no windows matching an application then all syncs are allowed. If there are any allow windows matching an application then syncs will only be allowed when there ia an active allow windows. If there are any deny windows matching an application then all syncs will be denied when the deny windows are active. If there is an active matching allow and an active matching deny then syncs will be denied as deny windows override allow windows. The UI and the CLI will both display the state of the sync windows. The UI has a panel which will display different colours depending on the state. The colours are as follows. Red: sync denied , Orange: manual allowed and Green: sync allowed . To display the sync state using the CLI: argocd app get APP Which will return the sync state and any matching windows. Name : guestbook Project : default Server : in - cluster Namespace : default URL : http : // localhost : 8080 / applications / guestbook Repo : https : // github . com / argoproj / argocd - example - apps . git Target : Path : guestbook SyncWindow : Sync Denied Assigned Windows : deny : 0 2 * * * : 1 h , allow : 0 2 3 3 3 : 1 h Sync Policy : Automated Sync Status : Synced to ( 5 c2d89b ) Health Status : Healthy Windows can be created using the CLI: argocd proj windows add PROJECT \\ --kind allow \\ --schedule \"0 22 * * *\" \\ --duration 1h \\ --applications \"*\" Alternatively, they can be created directly in the AppProject manifest: apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : default spec : syncWindows : - kind : allow schedule : '10 1 * * *' duration : 1h applications : - '*-prod' manualSync : true - kind : deny schedule : '0 22 * * *' duration : 1h namespaces : - default - kind : allow schedule : '0 23 * * *' duration : 1h clusters : - in-cluster - cluster1 In order to perform a sync when syncs are being prevented by a window, you can configure the window to allow manual syncs using the CLI, UI or directly in the AppProject manifest: argocd proj windows enable-manual-sync PROJECT ID To disable argocd proj windows disable-manual-sync PROJECT ID Windows can be listed using the CLI or viewed in the UI: argocd proj windows list PROJECT ID STATUS KIND SCHEDULE DURATION APPLICATIONS NAMESPACES CLUSTERS MANUALSYNC 0 Active allow * * * * * 1h - - prod1 Disabled 1 Inactive deny * * * * 1 3h - default - Disabled 2 Inactive allow 1 2 * * * 1h prod-* - - Enabled 3 Active deny * * * * * 1h - default - Disabled All fields of a window can be updated using either the CLI or UI. The applications , namespaces and clusters fields require the update to contain all of the required values. For example if updating the namespaces field and it already contains default and kube-system then the new value would have to include those in the list. argocd proj windows update PROJECT ID --namespaces default,kube-system,prod1","title":"Sync Windows"},{"location":"user-guide/tool_detection/","text":"Tool Detection \u00b6 The tool used to build an application is detected as follows: If a specific tool is explicitly configured, then that tool is selected to create your application's manifests. The tool can be explicitly specified in the Application custom resource like this: apiVersion : argoproj . io / v1alpha1 kind : Application metadata : ... spec : ... source : ... # Tool -> plain directory directory : recurse : true ... You also can select the tool in the Application creation wizard in the web user interface. The default is 'Directory'. Press the dropdown button beneath the tool name if you want to choose a different one. If not, then the tool is detected implicitly as follows: Ksonnet if there are two files, one named app.yaml and one named components/params.libsonnet . Helm if there's a file matching Chart.yaml . Kustomize if there's a kustomization.yaml , kustomization.yml , or Kustomization Otherwise it is assumed to be a plain directory application. References \u00b6 reposerver/repository/repository.go/GetAppSourceType server/repository/repository.go/listAppTypes","title":"Tool Detection"},{"location":"user-guide/tool_detection/#tool-detection","text":"The tool used to build an application is detected as follows: If a specific tool is explicitly configured, then that tool is selected to create your application's manifests. The tool can be explicitly specified in the Application custom resource like this: apiVersion : argoproj . io / v1alpha1 kind : Application metadata : ... spec : ... source : ... # Tool -> plain directory directory : recurse : true ... You also can select the tool in the Application creation wizard in the web user interface. The default is 'Directory'. Press the dropdown button beneath the tool name if you want to choose a different one. If not, then the tool is detected implicitly as follows: Ksonnet if there are two files, one named app.yaml and one named components/params.libsonnet . Helm if there's a file matching Chart.yaml . Kustomize if there's a kustomization.yaml , kustomization.yml , or Kustomization Otherwise it is assumed to be a plain directory application.","title":"Tool Detection"},{"location":"user-guide/tool_detection/#references","text":"reposerver/repository/repository.go/GetAppSourceType server/repository/repository.go/listAppTypes","title":"References"},{"location":"user-guide/tracking_strategies/","text":"Tracking and Deployment Strategies \u00b6 An Argo CD application spec provides several different ways of tracking Kubernetes resource manifests. In all tracking strategies, the app has the option to sync automatically. If auto-sync is configured, the new resources manifests will be applied automatically -- as soon as a difference is detected. Note In all tracking strategies, any parameter overrides take precedence over the Git state. Helm \u00b6 For Helm, all versions are Semantic Versions . As a result, you can either version ranges: Use Case How Examples Pin to a version (e.g. in production) Use the version number 1.2.0 Track patches (e.g. in pre-production) Use a range 1.2.* or >=1.2.0 <1.3.0 Track minor releases (e.g. in QA) Use a range 1.* or >=1.0.0 <2.0.0 Use the latest (e.g. in local development) Use star range * or >=0.0.0 Read about version ranges Git \u00b6 For Git, all versions are Git references: Use Case How Notes Pin to a version (e.g. in production) Either (a) tag the commit with (e.g. v1.2.0 ) and use that tag, or (b) using commit SHA. See commit pinning . Track patches (e.g. in pre-production) Tag/re-tag the commit, e.g. (e.g. v1.2 ) and use that tag. See tag tracking Track minor releases (e.g. in QA) Re-tag the commit as (e.g. v1 ) and use that tag. See tag tracking Use the latest (e.g. in local development) Use HEAD or master (assuming master is your master branch). See HEAD / Branch Tracking HEAD / Branch Tracking \u00b6 If a branch name, or a symbolic reference (like HEAD) is specified, Argo CD will continually compare live state against the resource manifests defined at the tip of the specified branch or the resolved commit of the symbolic reference. To redeploy an app, makes a changes to your manifests, commit/push to the branch/symbolic reference. They will then detected by Argo CD. Tag Tracking \u00b6 If a tag is specified, the manifests at the specified Git tag will be used to perform the sync comparison. This provides some advantages over branch tracking in that a tag is generally considered more stable, and less frequently updated, with some manual judgement of what constitutes a tag. To redeploy an app, the user uses Git to change the meaning of a tag by retagging it to a different commit SHA. Argo CD will detect the new meaning of the tag when performing the comparison/sync. Commit Pinning \u00b6 If a Git commit SHA is specified, the app is effectively pinned to the manifests defined at the specified commit. This is the most restrictive of the techniques and is typically used to control production environments. Since commit SHAs cannot change meaning, the only way to change the live state of an app which is pinned to a commit, is by updating the tracking revision in the application to a different commit containing the new manifests. Note that parameter overrides can still be set on an app which is pinned to a revision.","title":"Tracking and Deployment Strategies"},{"location":"user-guide/tracking_strategies/#tracking-and-deployment-strategies","text":"An Argo CD application spec provides several different ways of tracking Kubernetes resource manifests. In all tracking strategies, the app has the option to sync automatically. If auto-sync is configured, the new resources manifests will be applied automatically -- as soon as a difference is detected. Note In all tracking strategies, any parameter overrides take precedence over the Git state.","title":"Tracking and Deployment Strategies"},{"location":"user-guide/tracking_strategies/#helm","text":"For Helm, all versions are Semantic Versions . As a result, you can either version ranges: Use Case How Examples Pin to a version (e.g. in production) Use the version number 1.2.0 Track patches (e.g. in pre-production) Use a range 1.2.* or >=1.2.0 <1.3.0 Track minor releases (e.g. in QA) Use a range 1.* or >=1.0.0 <2.0.0 Use the latest (e.g. in local development) Use star range * or >=0.0.0 Read about version ranges","title":"Helm"},{"location":"user-guide/tracking_strategies/#git","text":"For Git, all versions are Git references: Use Case How Notes Pin to a version (e.g. in production) Either (a) tag the commit with (e.g. v1.2.0 ) and use that tag, or (b) using commit SHA. See commit pinning . Track patches (e.g. in pre-production) Tag/re-tag the commit, e.g. (e.g. v1.2 ) and use that tag. See tag tracking Track minor releases (e.g. in QA) Re-tag the commit as (e.g. v1 ) and use that tag. See tag tracking Use the latest (e.g. in local development) Use HEAD or master (assuming master is your master branch). See HEAD / Branch Tracking","title":"Git"},{"location":"user-guide/tracking_strategies/#head-branch-tracking","text":"If a branch name, or a symbolic reference (like HEAD) is specified, Argo CD will continually compare live state against the resource manifests defined at the tip of the specified branch or the resolved commit of the symbolic reference. To redeploy an app, makes a changes to your manifests, commit/push to the branch/symbolic reference. They will then detected by Argo CD.","title":"HEAD / Branch Tracking"},{"location":"user-guide/tracking_strategies/#tag-tracking","text":"If a tag is specified, the manifests at the specified Git tag will be used to perform the sync comparison. This provides some advantages over branch tracking in that a tag is generally considered more stable, and less frequently updated, with some manual judgement of what constitutes a tag. To redeploy an app, the user uses Git to change the meaning of a tag by retagging it to a different commit SHA. Argo CD will detect the new meaning of the tag when performing the comparison/sync.","title":"Tag Tracking"},{"location":"user-guide/tracking_strategies/#commit-pinning","text":"If a Git commit SHA is specified, the app is effectively pinned to the manifests defined at the specified commit. This is the most restrictive of the techniques and is typically used to control production environments. Since commit SHAs cannot change meaning, the only way to change the live state of an app which is pinned to a commit, is by updating the tracking revision in the application to a different commit containing the new manifests. Note that parameter overrides can still be set on an app which is pinned to a revision.","title":"Commit Pinning"},{"location":"user-guide/commands/argocd/","text":"argocd \u00b6 argocd controls a Argo CD server argocd [ flags ] Options \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) - h , -- help help for argocd -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd account - Manage account settings argocd app - Manage applications argocd cert - Manage repository certificates and SSH known hosts entries argocd cluster - Manage cluster credentials argocd completion - output shell completion code for the specified shell (bash or zsh) argocd context - Switch between contexts argocd gpg - Manage GPG keys used for signature verification argocd login - Log in to Argo CD argocd logout - Log out from Argo CD argocd proj - Manage projects argocd relogin - Refresh an expired authenticate token argocd repo - Manage repository connection parameters argocd repocreds - Manage repository connection parameters argocd version - Print version information","title":"Command Reference"},{"location":"user-guide/commands/argocd/#argocd","text":"argocd controls a Argo CD server argocd [ flags ]","title":"argocd"},{"location":"user-guide/commands/argocd/#options","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) - h , -- help help for argocd -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options"},{"location":"user-guide/commands/argocd/#see-also","text":"argocd account - Manage account settings argocd app - Manage applications argocd cert - Manage repository certificates and SSH known hosts entries argocd cluster - Manage cluster credentials argocd completion - output shell completion code for the specified shell (bash or zsh) argocd context - Switch between contexts argocd gpg - Manage GPG keys used for signature verification argocd login - Log in to Argo CD argocd logout - Log out from Argo CD argocd proj - Manage projects argocd relogin - Refresh an expired authenticate token argocd repo - Manage repository connection parameters argocd repocreds - Manage repository connection parameters argocd version - Print version information","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_account/","text":"argocd account \u00b6 Manage account settings argocd account [ flags ] Options \u00b6 - h , -- help help for account Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server argocd account can-i - Can I argocd account delete-token - Deletes account token argocd account generate-token - Generate account token argocd account get - Get account details argocd account get-user-info - Get user info argocd account list - List accounts argocd account update-password - Update password","title":"Argocd account"},{"location":"user-guide/commands/argocd_account/#argocd-account","text":"Manage account settings argocd account [ flags ]","title":"argocd account"},{"location":"user-guide/commands/argocd_account/#options","text":"- h , -- help help for account","title":"Options"},{"location":"user-guide/commands/argocd_account/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_account/#see-also","text":"argocd - argocd controls a Argo CD server argocd account can-i - Can I argocd account delete-token - Deletes account token argocd account generate-token - Generate account token argocd account get - Get account details argocd account get-user-info - Get user info argocd account list - List accounts argocd account update-password - Update password","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_account_can-i/","text":"argocd account can-i \u00b6 Can I argocd account can - i ACTION RESOURCE SUBRESOURCE [ flags ] Examples \u00b6 # Can I sync any app? argocd account can-i sync applications '*' # Can I update a project? argocd account can-i update projects 'default' # Can I create a cluster? argocd account can-i create clusters '*' Actions: [get create update delete sync override] Resources: [clusters projects applications repositories certificates] Options \u00b6 - h , -- help help for can - i Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd account - Manage account settings","title":"Argocd account can i"},{"location":"user-guide/commands/argocd_account_can-i/#argocd-account-can-i","text":"Can I argocd account can - i ACTION RESOURCE SUBRESOURCE [ flags ]","title":"argocd account can-i"},{"location":"user-guide/commands/argocd_account_can-i/#examples","text":"# Can I sync any app? argocd account can-i sync applications '*' # Can I update a project? argocd account can-i update projects 'default' # Can I create a cluster? argocd account can-i create clusters '*' Actions: [get create update delete sync override] Resources: [clusters projects applications repositories certificates]","title":"Examples"},{"location":"user-guide/commands/argocd_account_can-i/#options","text":"- h , -- help help for can - i","title":"Options"},{"location":"user-guide/commands/argocd_account_can-i/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_account_can-i/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_account_delete-token/","text":"argocd account delete-token \u00b6 Deletes account token argocd account delete - token [ flags ] Examples \u00b6 # Delete token of the currently logged in account argocd account delete-token ID # Delete token of the account with the specified name argocd account generate-token --account <account-name> Options \u00b6 - a , -- account string Account name . Defaults to the current account . - h , -- help help for delete - token Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd account - Manage account settings","title":"Argocd account delete token"},{"location":"user-guide/commands/argocd_account_delete-token/#argocd-account-delete-token","text":"Deletes account token argocd account delete - token [ flags ]","title":"argocd account delete-token"},{"location":"user-guide/commands/argocd_account_delete-token/#examples","text":"# Delete token of the currently logged in account argocd account delete-token ID # Delete token of the account with the specified name argocd account generate-token --account <account-name>","title":"Examples"},{"location":"user-guide/commands/argocd_account_delete-token/#options","text":"- a , -- account string Account name . Defaults to the current account . - h , -- help help for delete - token","title":"Options"},{"location":"user-guide/commands/argocd_account_delete-token/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_account_delete-token/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_account_generate-token/","text":"argocd account generate-token \u00b6 Generate account token argocd account generate - token [ flags ] Examples \u00b6 # Generate token for the currently logged in account argocd account generate - token # Generate token for the account with the specified name argocd account generate - token -- account < account - name > Options \u00b6 - a , -- account string Account name . Defaults to the current account . - e , -- expires - in string Duration before the token will expire . ( Default : No expiration ) ( default \" 0s \" ) - h , -- help help for generate - token -- id string Optional token id . Fallback to uuid if not value specified . Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd account - Manage account settings","title":"Argocd account generate token"},{"location":"user-guide/commands/argocd_account_generate-token/#argocd-account-generate-token","text":"Generate account token argocd account generate - token [ flags ]","title":"argocd account generate-token"},{"location":"user-guide/commands/argocd_account_generate-token/#examples","text":"# Generate token for the currently logged in account argocd account generate - token # Generate token for the account with the specified name argocd account generate - token -- account < account - name >","title":"Examples"},{"location":"user-guide/commands/argocd_account_generate-token/#options","text":"- a , -- account string Account name . Defaults to the current account . - e , -- expires - in string Duration before the token will expire . ( Default : No expiration ) ( default \" 0s \" ) - h , -- help help for generate - token -- id string Optional token id . Fallback to uuid if not value specified .","title":"Options"},{"location":"user-guide/commands/argocd_account_generate-token/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_account_generate-token/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_account_get-user-info/","text":"argocd account get-user-info \u00b6 Get user info argocd account get - user - info [ flags ] Options \u00b6 - h , -- help help for get - user - info - o , -- output string Output format . One of : yaml , json Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd account - Manage account settings","title":"Argocd account get user info"},{"location":"user-guide/commands/argocd_account_get-user-info/#argocd-account-get-user-info","text":"Get user info argocd account get - user - info [ flags ]","title":"argocd account get-user-info"},{"location":"user-guide/commands/argocd_account_get-user-info/#options","text":"- h , -- help help for get - user - info - o , -- output string Output format . One of : yaml , json","title":"Options"},{"location":"user-guide/commands/argocd_account_get-user-info/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_account_get-user-info/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_account_get/","text":"argocd account get \u00b6 Get account details argocd account get [ flags ] Examples \u00b6 # Get the currently logged in account details argocd account get # Get details for an account by name argocd account get -- account < account - name > Options \u00b6 - a , -- account string Account name . Defaults to the current account . - h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide | name ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd account - Manage account settings","title":"Argocd account get"},{"location":"user-guide/commands/argocd_account_get/#argocd-account-get","text":"Get account details argocd account get [ flags ]","title":"argocd account get"},{"location":"user-guide/commands/argocd_account_get/#examples","text":"# Get the currently logged in account details argocd account get # Get details for an account by name argocd account get -- account < account - name >","title":"Examples"},{"location":"user-guide/commands/argocd_account_get/#options","text":"- a , -- account string Account name . Defaults to the current account . - h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide | name ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_account_get/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_account_get/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_account_list/","text":"argocd account list \u00b6 List accounts argocd account list [ flags ] Examples \u00b6 argocd account list Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | name ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd account - Manage account settings","title":"Argocd account list"},{"location":"user-guide/commands/argocd_account_list/#argocd-account-list","text":"List accounts argocd account list [ flags ]","title":"argocd account list"},{"location":"user-guide/commands/argocd_account_list/#examples","text":"argocd account list","title":"Examples"},{"location":"user-guide/commands/argocd_account_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | name ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_account_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_account_list/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_account_update-password/","text":"argocd account update-password \u00b6 Update password argocd account update - password [ flags ] Options \u00b6 -- account string an account name that should be updated . Defaults to current user account -- current - password string current password you wish to change - h , -- help help for update - password -- new - password string new password you want to update to Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd account - Manage account settings","title":"Argocd account update password"},{"location":"user-guide/commands/argocd_account_update-password/#argocd-account-update-password","text":"Update password argocd account update - password [ flags ]","title":"argocd account update-password"},{"location":"user-guide/commands/argocd_account_update-password/#options","text":"-- account string an account name that should be updated . Defaults to current user account -- current - password string current password you wish to change - h , -- help help for update - password -- new - password string new password you want to update to","title":"Options"},{"location":"user-guide/commands/argocd_account_update-password/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_account_update-password/#see-also","text":"argocd account - Manage account settings","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app/","text":"argocd app \u00b6 Manage applications argocd app [ flags ] Examples \u00b6 # List all the applications. argocd app list # Get the details of a application argocd app get my-app # Set an override parameter argocd app set my-app -p image.tag=v1.0.1 Options \u00b6 - h , -- help help for app Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server argocd app actions - Manage Resource actions argocd app create - Create an application argocd app delete - Delete an application argocd app diff - Perform a diff against the target and live state. argocd app edit - Edit application argocd app get - Get application details argocd app history - Show application deployment history argocd app list - List applications argocd app manifests - Print manifests of an application argocd app patch - Patch application argocd app patch-resource - Patch resource in an application argocd app resources - List resource of application argocd app rollback - Rollback application to a previous deployed version by History ID argocd app set - Set application parameters argocd app sync - Sync an application to its target state argocd app terminate-op - Terminate running operation of an application argocd app unset - Unset application parameters argocd app wait - Wait for an application to reach a synced and healthy state","title":"Argocd app"},{"location":"user-guide/commands/argocd_app/#argocd-app","text":"Manage applications argocd app [ flags ]","title":"argocd app"},{"location":"user-guide/commands/argocd_app/#examples","text":"# List all the applications. argocd app list # Get the details of a application argocd app get my-app # Set an override parameter argocd app set my-app -p image.tag=v1.0.1","title":"Examples"},{"location":"user-guide/commands/argocd_app/#options","text":"- h , -- help help for app","title":"Options"},{"location":"user-guide/commands/argocd_app/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app/#see-also","text":"argocd - argocd controls a Argo CD server argocd app actions - Manage Resource actions argocd app create - Create an application argocd app delete - Delete an application argocd app diff - Perform a diff against the target and live state. argocd app edit - Edit application argocd app get - Get application details argocd app history - Show application deployment history argocd app list - List applications argocd app manifests - Print manifests of an application argocd app patch - Patch application argocd app patch-resource - Patch resource in an application argocd app resources - List resource of application argocd app rollback - Rollback application to a previous deployed version by History ID argocd app set - Set application parameters argocd app sync - Sync an application to its target state argocd app terminate-op - Terminate running operation of an application argocd app unset - Unset application parameters argocd app wait - Wait for an application to reach a synced and healthy state","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_actions/","text":"argocd app actions \u00b6 Manage Resource actions argocd app actions [ flags ] Options \u00b6 - h , -- help help for actions Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications argocd app actions list - Lists available actions on a resource argocd app actions run - Runs an available action on resource(s)","title":"Argocd app actions"},{"location":"user-guide/commands/argocd_app_actions/#argocd-app-actions","text":"Manage Resource actions argocd app actions [ flags ]","title":"argocd app actions"},{"location":"user-guide/commands/argocd_app_actions/#options","text":"- h , -- help help for actions","title":"Options"},{"location":"user-guide/commands/argocd_app_actions/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_actions/#see-also","text":"argocd app - Manage applications argocd app actions list - Lists available actions on a resource argocd app actions run - Runs an available action on resource(s)","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_actions_list/","text":"argocd app actions list \u00b6 Lists available actions on a resource argocd app actions list APPNAME [ flags ] Options \u00b6 -- group string Group - h , -- help help for list -- kind string Kind -- namespace string Namespace - o , -- out string Output format . One of : yaml , json -- resource - name string Name of resource Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app actions - Manage Resource actions","title":"Argocd app actions list"},{"location":"user-guide/commands/argocd_app_actions_list/#argocd-app-actions-list","text":"Lists available actions on a resource argocd app actions list APPNAME [ flags ]","title":"argocd app actions list"},{"location":"user-guide/commands/argocd_app_actions_list/#options","text":"-- group string Group - h , -- help help for list -- kind string Kind -- namespace string Namespace - o , -- out string Output format . One of : yaml , json -- resource - name string Name of resource","title":"Options"},{"location":"user-guide/commands/argocd_app_actions_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_actions_list/#see-also","text":"argocd app actions - Manage Resource actions","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_actions_run/","text":"argocd app actions run \u00b6 Runs an available action on resource(s) argocd app actions run APPNAME ACTION [ flags ] Options \u00b6 -- all Indicates whether to run the action on multiple matching resources -- group string Group - h , -- help help for run -- kind string Kind -- namespace string Namespace -- resource - name string Name of resource Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app actions - Manage Resource actions","title":"Argocd app actions run"},{"location":"user-guide/commands/argocd_app_actions_run/#argocd-app-actions-run","text":"Runs an available action on resource(s) argocd app actions run APPNAME ACTION [ flags ]","title":"argocd app actions run"},{"location":"user-guide/commands/argocd_app_actions_run/#options","text":"-- all Indicates whether to run the action on multiple matching resources -- group string Group - h , -- help help for run -- kind string Kind -- namespace string Namespace -- resource - name string Name of resource","title":"Options"},{"location":"user-guide/commands/argocd_app_actions_run/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_actions_run/#see-also","text":"argocd app actions - Manage Resource actions","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_create/","text":"argocd app create \u00b6 Create an application argocd app create APPNAME [ flags ] Examples \u00b6 # Create a directory app argocd app create guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- directory - recurse # Create a Jsonnet app argocd app create jsonnet - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path jsonnet - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- jsonnet - ext - str replicas = 2 # Create a Helm app argocd app create helm - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path helm - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- helm - set replicaCount = 2 # Create a Helm app from a Helm repo argocd app create nginx - ingress -- repo https : // kubernetes - charts . storage . googleapis . com -- helm - chart nginx - ingress -- revision 1.24 . 3 -- dest - namespace default -- dest - server https : // kubernetes . default . svc # Create a Kustomize app argocd app create kustomize - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path kustomize - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- kustomize - image gcr . io / heptio - images / ks - guestbook - demo : 0.1 # Create a app using a custom tool: argocd app create ksane -- repo https : // github . com / argoproj / argocd - example - apps . git -- path plugins / kasane -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- config - management - plugin kasane Options \u00b6 -- allow - empty Set allow zero live resources when sync is automated -- auto - prune Set automatic pruning when sync is automated -- config - management - plugin string Config management plugin name -- dest - name string K8s cluster Name ( e . g . minikube ) -- dest - namespace string K8s target namespace ( overrides the namespace specified in the ksonnet app . yaml ) -- dest - server string K8s cluster URL ( e . g . https : // kubernetes . default . svc ) -- directory - exclude string Set glob expression used to exclude files from application source path -- directory - include string Set glob expression used to include files from application source path -- directory - recurse Recurse directory -- env string Application environment to monitor - f , -- file string Filename or URL to Kubernetes manifests for the app -- helm - chart string Helm Chart name -- helm - set stringArray Helm set values on the command line ( can be repeated to set several values : -- helm - set key1 = val1 -- helm - set key2 = val2 ) -- helm - set - file stringArray Helm set values from respective files specified via the command line ( can be repeated to set several values : -- helm - set - file key1 = path1 -- helm - set - file key2 = path2 ) -- helm - set - string stringArray Helm set STRING values on the command line ( can be repeated to set several values : -- helm - set - string key1 = val1 -- helm - set - string key2 = val2 ) -- helm - version string Helm version - h , -- help help for create -- jsonnet - ext - var - code stringArray Jsonnet ext var -- jsonnet - ext - var - str stringArray Jsonnet string ext var -- jsonnet - libs stringArray Additional jsonnet libs ( prefixed by repoRoot ) -- jsonnet - tla - code stringArray Jsonnet top level code arguments -- jsonnet - tla - str stringArray Jsonnet top level string arguments -- kustomize - common - annotation stringArray Set common labels in Kustomize -- kustomize - common - label stringArray Set common labels in Kustomize -- kustomize - image stringArray Kustomize images ( e . g . -- kustomize - image node : 8.15 . 0 -- kustomize - image mysql = mariadb , alpine @ sha256 : 24 a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d ) -- kustomize - version string Kustomize version - l , -- label stringArray Labels to apply to the app -- name string A name for the app , ignored if a file is set ( DEPRECATED ) -- nameprefix string Kustomize nameprefix -- namesuffix string Kustomize namesuffix - p , -- parameter stringArray set a parameter override ( e . g . - p guestbook = image = example / guestbook : latest ) -- path string Path in repository to the app directory , ignored if a file is set -- plugin - env stringArray Additional plugin envs -- project string Application project name -- release - name string Helm release - name -- repo string Repository URL , ignored if a file is set -- revision string The tracking source branch , tag , commit or Helm chart version the application will sync to -- revision - history - limit int How many items to keep in revision history ( default 10 ) -- self - heal Set self healing when sync is automated -- sync - option Prune = false Add or remove a sync options , e . g add Prune = false . Remove using ` ! ` prefix , e . g . ` ! Prune = false ` -- sync - policy string Set the sync policy ( one of : none , automated ( aliases of automated : auto , automatic )) -- upsert Allows to override application with the same name even if supplied application spec is different from existing spec -- validate Validation of repo and cluster ( default true ) -- values stringArray Helm values file ( s ) to use -- values - literal - file string Filename or URL to import as a literal Helm values block Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app create"},{"location":"user-guide/commands/argocd_app_create/#argocd-app-create","text":"Create an application argocd app create APPNAME [ flags ]","title":"argocd app create"},{"location":"user-guide/commands/argocd_app_create/#examples","text":"# Create a directory app argocd app create guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- directory - recurse # Create a Jsonnet app argocd app create jsonnet - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path jsonnet - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- jsonnet - ext - str replicas = 2 # Create a Helm app argocd app create helm - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path helm - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- helm - set replicaCount = 2 # Create a Helm app from a Helm repo argocd app create nginx - ingress -- repo https : // kubernetes - charts . storage . googleapis . com -- helm - chart nginx - ingress -- revision 1.24 . 3 -- dest - namespace default -- dest - server https : // kubernetes . default . svc # Create a Kustomize app argocd app create kustomize - guestbook -- repo https : // github . com / argoproj / argocd - example - apps . git -- path kustomize - guestbook -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- kustomize - image gcr . io / heptio - images / ks - guestbook - demo : 0.1 # Create a app using a custom tool: argocd app create ksane -- repo https : // github . com / argoproj / argocd - example - apps . git -- path plugins / kasane -- dest - namespace default -- dest - server https : // kubernetes . default . svc -- config - management - plugin kasane","title":"Examples"},{"location":"user-guide/commands/argocd_app_create/#options","text":"-- allow - empty Set allow zero live resources when sync is automated -- auto - prune Set automatic pruning when sync is automated -- config - management - plugin string Config management plugin name -- dest - name string K8s cluster Name ( e . g . minikube ) -- dest - namespace string K8s target namespace ( overrides the namespace specified in the ksonnet app . yaml ) -- dest - server string K8s cluster URL ( e . g . https : // kubernetes . default . svc ) -- directory - exclude string Set glob expression used to exclude files from application source path -- directory - include string Set glob expression used to include files from application source path -- directory - recurse Recurse directory -- env string Application environment to monitor - f , -- file string Filename or URL to Kubernetes manifests for the app -- helm - chart string Helm Chart name -- helm - set stringArray Helm set values on the command line ( can be repeated to set several values : -- helm - set key1 = val1 -- helm - set key2 = val2 ) -- helm - set - file stringArray Helm set values from respective files specified via the command line ( can be repeated to set several values : -- helm - set - file key1 = path1 -- helm - set - file key2 = path2 ) -- helm - set - string stringArray Helm set STRING values on the command line ( can be repeated to set several values : -- helm - set - string key1 = val1 -- helm - set - string key2 = val2 ) -- helm - version string Helm version - h , -- help help for create -- jsonnet - ext - var - code stringArray Jsonnet ext var -- jsonnet - ext - var - str stringArray Jsonnet string ext var -- jsonnet - libs stringArray Additional jsonnet libs ( prefixed by repoRoot ) -- jsonnet - tla - code stringArray Jsonnet top level code arguments -- jsonnet - tla - str stringArray Jsonnet top level string arguments -- kustomize - common - annotation stringArray Set common labels in Kustomize -- kustomize - common - label stringArray Set common labels in Kustomize -- kustomize - image stringArray Kustomize images ( e . g . -- kustomize - image node : 8.15 . 0 -- kustomize - image mysql = mariadb , alpine @ sha256 : 24 a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d ) -- kustomize - version string Kustomize version - l , -- label stringArray Labels to apply to the app -- name string A name for the app , ignored if a file is set ( DEPRECATED ) -- nameprefix string Kustomize nameprefix -- namesuffix string Kustomize namesuffix - p , -- parameter stringArray set a parameter override ( e . g . - p guestbook = image = example / guestbook : latest ) -- path string Path in repository to the app directory , ignored if a file is set -- plugin - env stringArray Additional plugin envs -- project string Application project name -- release - name string Helm release - name -- repo string Repository URL , ignored if a file is set -- revision string The tracking source branch , tag , commit or Helm chart version the application will sync to -- revision - history - limit int How many items to keep in revision history ( default 10 ) -- self - heal Set self healing when sync is automated -- sync - option Prune = false Add or remove a sync options , e . g add Prune = false . Remove using ` ! ` prefix , e . g . ` ! Prune = false ` -- sync - policy string Set the sync policy ( one of : none , automated ( aliases of automated : auto , automatic )) -- upsert Allows to override application with the same name even if supplied application spec is different from existing spec -- validate Validation of repo and cluster ( default true ) -- values stringArray Helm values file ( s ) to use -- values - literal - file string Filename or URL to import as a literal Helm values block","title":"Options"},{"location":"user-guide/commands/argocd_app_create/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_create/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_delete/","text":"argocd app delete \u00b6 Delete an application argocd app delete APPNAME [ flags ] Options \u00b6 -- cascade Perform a cascaded deletion of all application resources ( default true ) - h , -- help help for delete - y , -- yes Turn off prompting to confirm cascaded deletion of application resources Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app delete"},{"location":"user-guide/commands/argocd_app_delete/#argocd-app-delete","text":"Delete an application argocd app delete APPNAME [ flags ]","title":"argocd app delete"},{"location":"user-guide/commands/argocd_app_delete/#options","text":"-- cascade Perform a cascaded deletion of all application resources ( default true ) - h , -- help help for delete - y , -- yes Turn off prompting to confirm cascaded deletion of application resources","title":"Options"},{"location":"user-guide/commands/argocd_app_delete/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_delete/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_diff/","text":"argocd app diff \u00b6 Perform a diff against the target and live state. Synopsis \u00b6 Perform a diff against the target and live state. Uses 'diff' to render the difference. KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff tool. Returns the following exit codes: 2 on general errors, 1 when a diff is found, and 0 when no diff is found argocd app diff APPNAME [ flags ] Options \u00b6 -- hard - refresh Refresh application data as well as target manifests cache - h , -- help help for diff -- local string Compare live app to a local manifests -- local - repo - root string Path to the repository root . Used together with -- local allows setting the repository root ( default \" / \" ) -- refresh Refresh application data when retrieving -- revision string Compare live app to a particular revision Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app diff"},{"location":"user-guide/commands/argocd_app_diff/#argocd-app-diff","text":"Perform a diff against the target and live state.","title":"argocd app diff"},{"location":"user-guide/commands/argocd_app_diff/#synopsis","text":"Perform a diff against the target and live state. Uses 'diff' to render the difference. KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff tool. Returns the following exit codes: 2 on general errors, 1 when a diff is found, and 0 when no diff is found argocd app diff APPNAME [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_app_diff/#options","text":"-- hard - refresh Refresh application data as well as target manifests cache - h , -- help help for diff -- local string Compare live app to a local manifests -- local - repo - root string Path to the repository root . Used together with -- local allows setting the repository root ( default \" / \" ) -- refresh Refresh application data when retrieving -- revision string Compare live app to a particular revision","title":"Options"},{"location":"user-guide/commands/argocd_app_diff/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_diff/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_edit/","text":"argocd app edit \u00b6 Edit application argocd app edit APPNAME [ flags ] Options \u00b6 - h , -- help help for edit Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app edit"},{"location":"user-guide/commands/argocd_app_edit/#argocd-app-edit","text":"Edit application argocd app edit APPNAME [ flags ]","title":"argocd app edit"},{"location":"user-guide/commands/argocd_app_edit/#options","text":"- h , -- help help for edit","title":"Options"},{"location":"user-guide/commands/argocd_app_edit/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_edit/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_get/","text":"argocd app get \u00b6 Get application details argocd app get APPNAME [ flags ] Options \u00b6 -- hard - refresh Refresh application data as well as target manifests cache - h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" ) -- refresh Refresh application data when retrieving -- show - operation Show application operation -- show - params Show application parameters and overrides Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app get"},{"location":"user-guide/commands/argocd_app_get/#argocd-app-get","text":"Get application details argocd app get APPNAME [ flags ]","title":"argocd app get"},{"location":"user-guide/commands/argocd_app_get/#options","text":"-- hard - refresh Refresh application data as well as target manifests cache - h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" ) -- refresh Refresh application data when retrieving -- show - operation Show application operation -- show - params Show application parameters and overrides","title":"Options"},{"location":"user-guide/commands/argocd_app_get/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_get/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_history/","text":"argocd app history \u00b6 Show application deployment history argocd app history APPNAME [ flags ] Options \u00b6 - h , -- help help for history - o , -- output string Output format . One of : wide | id ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app history"},{"location":"user-guide/commands/argocd_app_history/#argocd-app-history","text":"Show application deployment history argocd app history APPNAME [ flags ]","title":"argocd app history"},{"location":"user-guide/commands/argocd_app_history/#options","text":"- h , -- help help for history - o , -- output string Output format . One of : wide | id ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_app_history/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_history/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_list/","text":"argocd app list \u00b6 List applications argocd app list [ flags ] Examples \u00b6 # List all apps argocd app list # List apps by label, in this example we listing apps that are children of another app (aka app-of-apps) argocd app list -l app.kubernetes.io/instance=my-app Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : wide | name | json | yaml ( default \" wide \" ) - p , -- project stringArray Filter by project name - l , -- selector string List apps by label Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app list"},{"location":"user-guide/commands/argocd_app_list/#argocd-app-list","text":"List applications argocd app list [ flags ]","title":"argocd app list"},{"location":"user-guide/commands/argocd_app_list/#examples","text":"# List all apps argocd app list # List apps by label, in this example we listing apps that are children of another app (aka app-of-apps) argocd app list -l app.kubernetes.io/instance=my-app","title":"Examples"},{"location":"user-guide/commands/argocd_app_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : wide | name | json | yaml ( default \" wide \" ) - p , -- project stringArray Filter by project name - l , -- selector string List apps by label","title":"Options"},{"location":"user-guide/commands/argocd_app_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_list/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_manifests/","text":"argocd app manifests \u00b6 Print manifests of an application argocd app manifests APPNAME [ flags ] Options \u00b6 - h , -- help help for manifests -- revision string Show manifests at a specific revision -- source string Source of manifests . One of : live | git ( default \" git \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app manifests"},{"location":"user-guide/commands/argocd_app_manifests/#argocd-app-manifests","text":"Print manifests of an application argocd app manifests APPNAME [ flags ]","title":"argocd app manifests"},{"location":"user-guide/commands/argocd_app_manifests/#options","text":"- h , -- help help for manifests -- revision string Show manifests at a specific revision -- source string Source of manifests . One of : live | git ( default \" git \" )","title":"Options"},{"location":"user-guide/commands/argocd_app_manifests/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_manifests/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_patch-resource/","text":"argocd app patch-resource \u00b6 Patch resource in an application argocd app patch - resource APPNAME [ flags ] Options \u00b6 -- all Indicates whether to patch multiple matching of resources -- group string Group - h , -- help help for patch - resource -- kind string Kind -- namespace string Namespace -- patch string Patch -- patch - type string Which Patching strategy to use : ' application/json-patch+json ' , ' application/merge-patch+json ' , or ' application/strategic-merge-patch+json ' . Defaults to ' application/merge-patch+json ' ( default \" application/merge-patch+json \" ) -- resource - name string Name of resource Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app patch resource"},{"location":"user-guide/commands/argocd_app_patch-resource/#argocd-app-patch-resource","text":"Patch resource in an application argocd app patch - resource APPNAME [ flags ]","title":"argocd app patch-resource"},{"location":"user-guide/commands/argocd_app_patch-resource/#options","text":"-- all Indicates whether to patch multiple matching of resources -- group string Group - h , -- help help for patch - resource -- kind string Kind -- namespace string Namespace -- patch string Patch -- patch - type string Which Patching strategy to use : ' application/json-patch+json ' , ' application/merge-patch+json ' , or ' application/strategic-merge-patch+json ' . Defaults to ' application/merge-patch+json ' ( default \" application/merge-patch+json \" ) -- resource - name string Name of resource","title":"Options"},{"location":"user-guide/commands/argocd_app_patch-resource/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_patch-resource/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_patch/","text":"argocd app patch \u00b6 Patch application Synopsis \u00b6 Examples: # Update an application's source path using json patch argocd app patch myapplication --patch='[{\"op\": \"replace\", \"path\": \"/spec/source/path\", \"value\": \"newPath\"}]' --type json # Update an application's repository target revision using merge patch argocd app patch myapplication --patch '{\"spec\": { \"source\": { \"targetRevision\": \"master\" } }}' --type merge argocd app patch APPNAME [ flags ] Options \u00b6 - h , -- help help for patch -- patch string Patch body -- type string The type of patch being provided ; one of [ json merge ] ( default \"json\" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app patch"},{"location":"user-guide/commands/argocd_app_patch/#argocd-app-patch","text":"Patch application","title":"argocd app patch"},{"location":"user-guide/commands/argocd_app_patch/#synopsis","text":"Examples: # Update an application's source path using json patch argocd app patch myapplication --patch='[{\"op\": \"replace\", \"path\": \"/spec/source/path\", \"value\": \"newPath\"}]' --type json # Update an application's repository target revision using merge patch argocd app patch myapplication --patch '{\"spec\": { \"source\": { \"targetRevision\": \"master\" } }}' --type merge argocd app patch APPNAME [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_app_patch/#options","text":"- h , -- help help for patch -- patch string Patch body -- type string The type of patch being provided ; one of [ json merge ] ( default \"json\" )","title":"Options"},{"location":"user-guide/commands/argocd_app_patch/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_patch/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_resources/","text":"argocd app resources \u00b6 List resource of application argocd app resources APPNAME [ flags ] Options \u00b6 - h , -- help help for resources -- orphaned Lists only orphaned resources Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app resources"},{"location":"user-guide/commands/argocd_app_resources/#argocd-app-resources","text":"List resource of application argocd app resources APPNAME [ flags ]","title":"argocd app resources"},{"location":"user-guide/commands/argocd_app_resources/#options","text":"- h , -- help help for resources -- orphaned Lists only orphaned resources","title":"Options"},{"location":"user-guide/commands/argocd_app_resources/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_resources/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_rollback/","text":"argocd app rollback \u00b6 Rollback application to a previous deployed version by History ID argocd app rollback APPNAME ID [ flags ] Options \u00b6 - h , -- help help for rollback -- prune Allow deleting unexpected resources -- timeout uint Time out after this many seconds Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app rollback"},{"location":"user-guide/commands/argocd_app_rollback/#argocd-app-rollback","text":"Rollback application to a previous deployed version by History ID argocd app rollback APPNAME ID [ flags ]","title":"argocd app rollback"},{"location":"user-guide/commands/argocd_app_rollback/#options","text":"- h , -- help help for rollback -- prune Allow deleting unexpected resources -- timeout uint Time out after this many seconds","title":"Options"},{"location":"user-guide/commands/argocd_app_rollback/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_rollback/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_set/","text":"argocd app set \u00b6 Set application parameters argocd app set APPNAME [ flags ] Options \u00b6 -- allow - empty Set allow zero live resources when sync is automated -- auto - prune Set automatic pruning when sync is automated -- config - management - plugin string Config management plugin name -- dest - name string K8s cluster Name ( e . g . minikube ) -- dest - namespace string K8s target namespace ( overrides the namespace specified in the ksonnet app . yaml ) -- dest - server string K8s cluster URL ( e . g . https : // kubernetes . default . svc ) -- directory - exclude string Set glob expression used to exclude files from application source path -- directory - include string Set glob expression used to include files from application source path -- directory - recurse Recurse directory -- env string Application environment to monitor -- helm - chart string Helm Chart name -- helm - set stringArray Helm set values on the command line ( can be repeated to set several values : -- helm - set key1 = val1 -- helm - set key2 = val2 ) -- helm - set - file stringArray Helm set values from respective files specified via the command line ( can be repeated to set several values : -- helm - set - file key1 = path1 -- helm - set - file key2 = path2 ) -- helm - set - string stringArray Helm set STRING values on the command line ( can be repeated to set several values : -- helm - set - string key1 = val1 -- helm - set - string key2 = val2 ) -- helm - version string Helm version - h , -- help help for set -- jsonnet - ext - var - code stringArray Jsonnet ext var -- jsonnet - ext - var - str stringArray Jsonnet string ext var -- jsonnet - libs stringArray Additional jsonnet libs ( prefixed by repoRoot ) -- jsonnet - tla - code stringArray Jsonnet top level code arguments -- jsonnet - tla - str stringArray Jsonnet top level string arguments -- kustomize - common - annotation stringArray Set common labels in Kustomize -- kustomize - common - label stringArray Set common labels in Kustomize -- kustomize - image stringArray Kustomize images ( e . g . -- kustomize - image node : 8.15 . 0 -- kustomize - image mysql = mariadb , alpine @ sha256 : 24 a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d ) -- kustomize - version string Kustomize version -- nameprefix string Kustomize nameprefix -- namesuffix string Kustomize namesuffix - p , -- parameter stringArray set a parameter override ( e . g . - p guestbook = image = example / guestbook : latest ) -- path string Path in repository to the app directory , ignored if a file is set -- plugin - env stringArray Additional plugin envs -- project string Application project name -- release - name string Helm release - name -- repo string Repository URL , ignored if a file is set -- revision string The tracking source branch , tag , commit or Helm chart version the application will sync to -- revision - history - limit int How many items to keep in revision history ( default 10 ) -- self - heal Set self healing when sync is automated -- sync - option Prune = false Add or remove a sync options , e . g add Prune = false . Remove using ` ! ` prefix , e . g . ` ! Prune = false ` -- sync - policy string Set the sync policy ( one of : none , automated ( aliases of automated : auto , automatic )) -- validate Validation of repo and cluster ( default true ) -- values stringArray Helm values file ( s ) to use -- values - literal - file string Filename or URL to import as a literal Helm values block Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app set"},{"location":"user-guide/commands/argocd_app_set/#argocd-app-set","text":"Set application parameters argocd app set APPNAME [ flags ]","title":"argocd app set"},{"location":"user-guide/commands/argocd_app_set/#options","text":"-- allow - empty Set allow zero live resources when sync is automated -- auto - prune Set automatic pruning when sync is automated -- config - management - plugin string Config management plugin name -- dest - name string K8s cluster Name ( e . g . minikube ) -- dest - namespace string K8s target namespace ( overrides the namespace specified in the ksonnet app . yaml ) -- dest - server string K8s cluster URL ( e . g . https : // kubernetes . default . svc ) -- directory - exclude string Set glob expression used to exclude files from application source path -- directory - include string Set glob expression used to include files from application source path -- directory - recurse Recurse directory -- env string Application environment to monitor -- helm - chart string Helm Chart name -- helm - set stringArray Helm set values on the command line ( can be repeated to set several values : -- helm - set key1 = val1 -- helm - set key2 = val2 ) -- helm - set - file stringArray Helm set values from respective files specified via the command line ( can be repeated to set several values : -- helm - set - file key1 = path1 -- helm - set - file key2 = path2 ) -- helm - set - string stringArray Helm set STRING values on the command line ( can be repeated to set several values : -- helm - set - string key1 = val1 -- helm - set - string key2 = val2 ) -- helm - version string Helm version - h , -- help help for set -- jsonnet - ext - var - code stringArray Jsonnet ext var -- jsonnet - ext - var - str stringArray Jsonnet string ext var -- jsonnet - libs stringArray Additional jsonnet libs ( prefixed by repoRoot ) -- jsonnet - tla - code stringArray Jsonnet top level code arguments -- jsonnet - tla - str stringArray Jsonnet top level string arguments -- kustomize - common - annotation stringArray Set common labels in Kustomize -- kustomize - common - label stringArray Set common labels in Kustomize -- kustomize - image stringArray Kustomize images ( e . g . -- kustomize - image node : 8.15 . 0 -- kustomize - image mysql = mariadb , alpine @ sha256 : 24 a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d ) -- kustomize - version string Kustomize version -- nameprefix string Kustomize nameprefix -- namesuffix string Kustomize namesuffix - p , -- parameter stringArray set a parameter override ( e . g . - p guestbook = image = example / guestbook : latest ) -- path string Path in repository to the app directory , ignored if a file is set -- plugin - env stringArray Additional plugin envs -- project string Application project name -- release - name string Helm release - name -- repo string Repository URL , ignored if a file is set -- revision string The tracking source branch , tag , commit or Helm chart version the application will sync to -- revision - history - limit int How many items to keep in revision history ( default 10 ) -- self - heal Set self healing when sync is automated -- sync - option Prune = false Add or remove a sync options , e . g add Prune = false . Remove using ` ! ` prefix , e . g . ` ! Prune = false ` -- sync - policy string Set the sync policy ( one of : none , automated ( aliases of automated : auto , automatic )) -- validate Validation of repo and cluster ( default true ) -- values stringArray Helm values file ( s ) to use -- values - literal - file string Filename or URL to import as a literal Helm values block","title":"Options"},{"location":"user-guide/commands/argocd_app_set/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_set/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_sync/","text":"argocd app sync \u00b6 Sync an application to its target state argocd app sync [ APPNAME... | -l selector ] [ flags ] Examples \u00b6 # Sync an app argocd app sync my - app # Sync multiples apps argocd app sync my - app other - app # Sync apps by label , in this example we sync apps that are children of another app ( aka app - of - apps ) argocd app sync - l app . kubernetes . io / instance = my - app # Sync a specific resource # Resource should be formatted as GROUP : KIND : NAME . If no GROUP is specified then : KIND : NAME argocd app sync my - app -- resource : Service : my - service argocd app sync my - app -- resource argoproj . io : Rollout : my - rollout # Specify namespace if the application has resources with the same name in different namespaces argocd app sync my - app -- resource argoproj . io : Rollout : my - namespace / my - rollout Options \u00b6 -- async Do not wait for application to sync before continuing -- dry - run Preview apply without affecting cluster -- force Use a force apply - h , -- help help for sync -- info stringArray A list of key - value pairs during sync process . These infos will be persisted in app . -- label stringArray Sync only specific resources with a label . This option may be specified repeatedly . -- local string Path to a local directory . When this flag is present no git queries will be made -- local - repo - root string Path to the repository root . Used together with -- local allows setting the repository root ( default \" / \" ) -- prune Allow deleting unexpected resources -- resource stringArray Sync only specific resources as GROUP : KIND : NAME . Fields may be blank . This option may be specified repeatedly -- retry - backoff - duration string Retry backoff base duration . Default unit is seconds , but could also be a duration ( e . g . 2 m , 1 h ) ( default \" 5s \" ) -- retry - backoff - factor int Factor multiplies the base duration after each failed retry ( default 2 ) -- retry - backoff - max - duration string Max retry backoff duration . Default unit is seconds , but could also be a duration ( e . g . 2 m , 1 h ) ( default \" 180s \" ) -- retry - limit int Max number of allowed sync retries -- revision string Sync to a specific revision . Preserves parameter overrides - l , -- selector string Sync apps that match this label -- strategy string Sync strategy ( one of : apply | hook ) -- timeout uint Time out after this many seconds Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app sync"},{"location":"user-guide/commands/argocd_app_sync/#argocd-app-sync","text":"Sync an application to its target state argocd app sync [ APPNAME... | -l selector ] [ flags ]","title":"argocd app sync"},{"location":"user-guide/commands/argocd_app_sync/#examples","text":"# Sync an app argocd app sync my - app # Sync multiples apps argocd app sync my - app other - app # Sync apps by label , in this example we sync apps that are children of another app ( aka app - of - apps ) argocd app sync - l app . kubernetes . io / instance = my - app # Sync a specific resource # Resource should be formatted as GROUP : KIND : NAME . If no GROUP is specified then : KIND : NAME argocd app sync my - app -- resource : Service : my - service argocd app sync my - app -- resource argoproj . io : Rollout : my - rollout # Specify namespace if the application has resources with the same name in different namespaces argocd app sync my - app -- resource argoproj . io : Rollout : my - namespace / my - rollout","title":"Examples"},{"location":"user-guide/commands/argocd_app_sync/#options","text":"-- async Do not wait for application to sync before continuing -- dry - run Preview apply without affecting cluster -- force Use a force apply - h , -- help help for sync -- info stringArray A list of key - value pairs during sync process . These infos will be persisted in app . -- label stringArray Sync only specific resources with a label . This option may be specified repeatedly . -- local string Path to a local directory . When this flag is present no git queries will be made -- local - repo - root string Path to the repository root . Used together with -- local allows setting the repository root ( default \" / \" ) -- prune Allow deleting unexpected resources -- resource stringArray Sync only specific resources as GROUP : KIND : NAME . Fields may be blank . This option may be specified repeatedly -- retry - backoff - duration string Retry backoff base duration . Default unit is seconds , but could also be a duration ( e . g . 2 m , 1 h ) ( default \" 5s \" ) -- retry - backoff - factor int Factor multiplies the base duration after each failed retry ( default 2 ) -- retry - backoff - max - duration string Max retry backoff duration . Default unit is seconds , but could also be a duration ( e . g . 2 m , 1 h ) ( default \" 180s \" ) -- retry - limit int Max number of allowed sync retries -- revision string Sync to a specific revision . Preserves parameter overrides - l , -- selector string Sync apps that match this label -- strategy string Sync strategy ( one of : apply | hook ) -- timeout uint Time out after this many seconds","title":"Options"},{"location":"user-guide/commands/argocd_app_sync/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_sync/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_terminate-op/","text":"argocd app terminate-op \u00b6 Terminate running operation of an application argocd app terminate - op APPNAME [ flags ] Options \u00b6 - h , -- help help for terminate - op Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app terminate op"},{"location":"user-guide/commands/argocd_app_terminate-op/#argocd-app-terminate-op","text":"Terminate running operation of an application argocd app terminate - op APPNAME [ flags ]","title":"argocd app terminate-op"},{"location":"user-guide/commands/argocd_app_terminate-op/#options","text":"- h , -- help help for terminate - op","title":"Options"},{"location":"user-guide/commands/argocd_app_terminate-op/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_terminate-op/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_unset/","text":"argocd app unset \u00b6 Unset application parameters argocd app unset APPNAME parameters [ flags ] Examples \u00b6 # Unset kustomize override kustomize image argocd app unset my-app --kustomize-image=alpine # Unset kustomize override prefix argocd app unset my-app --namesuffix # Unset parameter override argocd app unset my-app -p COMPONENT=PARAM Options \u00b6 - h , -- help help for unset -- kustomize - image stringArray Kustomize images name ( e . g . -- kustomize - image node -- kustomize - image mysql ) -- kustomize - version Kustomize version -- nameprefix Kustomize nameprefix -- namesuffix Kustomize namesuffix - p , -- parameter stringArray Unset a parameter override ( e . g . - p guestbook = image ) -- values stringArray Unset one or more Helm values files -- values - literal Unset literal Helm values block Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app unset"},{"location":"user-guide/commands/argocd_app_unset/#argocd-app-unset","text":"Unset application parameters argocd app unset APPNAME parameters [ flags ]","title":"argocd app unset"},{"location":"user-guide/commands/argocd_app_unset/#examples","text":"# Unset kustomize override kustomize image argocd app unset my-app --kustomize-image=alpine # Unset kustomize override prefix argocd app unset my-app --namesuffix # Unset parameter override argocd app unset my-app -p COMPONENT=PARAM","title":"Examples"},{"location":"user-guide/commands/argocd_app_unset/#options","text":"- h , -- help help for unset -- kustomize - image stringArray Kustomize images name ( e . g . -- kustomize - image node -- kustomize - image mysql ) -- kustomize - version Kustomize version -- nameprefix Kustomize nameprefix -- namesuffix Kustomize namesuffix - p , -- parameter stringArray Unset a parameter override ( e . g . - p guestbook = image ) -- values stringArray Unset one or more Helm values files -- values - literal Unset literal Helm values block","title":"Options"},{"location":"user-guide/commands/argocd_app_unset/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_unset/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_app_wait/","text":"argocd app wait \u00b6 Wait for an application to reach a synced and healthy state argocd app wait [ APPNAME.. | -l selector ] [ flags ] Examples \u00b6 # Wait for an app argocd app wait my - app # Wait for multiple apps argocd app wait my - app other - app # Wait for apps by label , in this example we waiting for apps that are children of another app ( aka app - of - apps ) argocd app wait - l app . kubernetes . io / instance = apps Options \u00b6 -- health Wait for health - h , -- help help for wait -- operation Wait for pending operations -- resource stringArray Sync only specific resources as GROUP : KIND : NAME . Fields may be blank . This option may be specified repeatedly - l , -- selector string Wait for apps by label -- suspended Wait for suspended -- sync Wait for sync -- timeout uint Time out after this many seconds Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd app - Manage applications","title":"Argocd app wait"},{"location":"user-guide/commands/argocd_app_wait/#argocd-app-wait","text":"Wait for an application to reach a synced and healthy state argocd app wait [ APPNAME.. | -l selector ] [ flags ]","title":"argocd app wait"},{"location":"user-guide/commands/argocd_app_wait/#examples","text":"# Wait for an app argocd app wait my - app # Wait for multiple apps argocd app wait my - app other - app # Wait for apps by label , in this example we waiting for apps that are children of another app ( aka app - of - apps ) argocd app wait - l app . kubernetes . io / instance = apps","title":"Examples"},{"location":"user-guide/commands/argocd_app_wait/#options","text":"-- health Wait for health - h , -- help help for wait -- operation Wait for pending operations -- resource stringArray Sync only specific resources as GROUP : KIND : NAME . Fields may be blank . This option may be specified repeatedly - l , -- selector string Wait for apps by label -- suspended Wait for suspended -- sync Wait for sync -- timeout uint Time out after this many seconds","title":"Options"},{"location":"user-guide/commands/argocd_app_wait/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_app_wait/#see-also","text":"argocd app - Manage applications","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cert/","text":"argocd cert \u00b6 Manage repository certificates and SSH known hosts entries argocd cert [ flags ] Examples \u00b6 # Add a TLS certificate for cd . example . com to ArgoCD cert store from a file argocd cert add - tls -- from ~/ mycert . pem cd . example . com # Add a TLS certificate for cd . example . com to ArgoCD via stdin cat ~/ mycert . pem | argocd cert add - tls cd . example . com # Add SSH known host entries for cd . example . com to ArgoCD by scanning host ssh - keyscan cd . example . com | argocd cert add - ssh -- batch # List all known TLS certificates argocd cert list -- cert - type https # Remove all TLS certificates for cd . example . com argocd cert rm -- cert - type https cd . example . com # Remove all certificates and SSH known host entries for cd . example . com argocd cert rm cd . example . com Options \u00b6 - h , -- help help for cert Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server argocd cert add-ssh - Add SSH known host entries for repository servers argocd cert add-tls - Add TLS certificate data for connecting to repository server SERVERNAME argocd cert list - List configured certificates argocd cert rm - Remove certificate of TYPE for REPOSERVER","title":"Argocd cert"},{"location":"user-guide/commands/argocd_cert/#argocd-cert","text":"Manage repository certificates and SSH known hosts entries argocd cert [ flags ]","title":"argocd cert"},{"location":"user-guide/commands/argocd_cert/#examples","text":"# Add a TLS certificate for cd . example . com to ArgoCD cert store from a file argocd cert add - tls -- from ~/ mycert . pem cd . example . com # Add a TLS certificate for cd . example . com to ArgoCD via stdin cat ~/ mycert . pem | argocd cert add - tls cd . example . com # Add SSH known host entries for cd . example . com to ArgoCD by scanning host ssh - keyscan cd . example . com | argocd cert add - ssh -- batch # List all known TLS certificates argocd cert list -- cert - type https # Remove all TLS certificates for cd . example . com argocd cert rm -- cert - type https cd . example . com # Remove all certificates and SSH known host entries for cd . example . com argocd cert rm cd . example . com","title":"Examples"},{"location":"user-guide/commands/argocd_cert/#options","text":"- h , -- help help for cert","title":"Options"},{"location":"user-guide/commands/argocd_cert/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cert/#see-also","text":"argocd - argocd controls a Argo CD server argocd cert add-ssh - Add SSH known host entries for repository servers argocd cert add-tls - Add TLS certificate data for connecting to repository server SERVERNAME argocd cert list - List configured certificates argocd cert rm - Remove certificate of TYPE for REPOSERVER","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cert_add-ssh/","text":"argocd cert add-ssh \u00b6 Add SSH known host entries for repository servers argocd cert add - ssh --batch [flags] Options \u00b6 -- batch Perform batch processing by reading in SSH known hosts data ( mandatory flag ) -- from string Read SSH known hosts data from file ( default is to read from stdin ) - h , -- help help for add - ssh -- upsert Replace existing SSH server public host keys if key is different in input Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cert - Manage repository certificates and SSH known hosts entries","title":"Argocd cert add ssh"},{"location":"user-guide/commands/argocd_cert_add-ssh/#argocd-cert-add-ssh","text":"Add SSH known host entries for repository servers argocd cert add - ssh --batch [flags]","title":"argocd cert add-ssh"},{"location":"user-guide/commands/argocd_cert_add-ssh/#options","text":"-- batch Perform batch processing by reading in SSH known hosts data ( mandatory flag ) -- from string Read SSH known hosts data from file ( default is to read from stdin ) - h , -- help help for add - ssh -- upsert Replace existing SSH server public host keys if key is different in input","title":"Options"},{"location":"user-guide/commands/argocd_cert_add-ssh/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cert_add-ssh/#see-also","text":"argocd cert - Manage repository certificates and SSH known hosts entries","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cert_add-tls/","text":"argocd cert add-tls \u00b6 Add TLS certificate data for connecting to repository server SERVERNAME argocd cert add - tls SERVERNAME [ flags ] Options \u00b6 -- from string read TLS certificate data from file ( default is to read from stdin ) - h , -- help help for add - tls -- upsert Replace existing TLS certificate if certificate is different in input Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cert - Manage repository certificates and SSH known hosts entries","title":"Argocd cert add tls"},{"location":"user-guide/commands/argocd_cert_add-tls/#argocd-cert-add-tls","text":"Add TLS certificate data for connecting to repository server SERVERNAME argocd cert add - tls SERVERNAME [ flags ]","title":"argocd cert add-tls"},{"location":"user-guide/commands/argocd_cert_add-tls/#options","text":"-- from string read TLS certificate data from file ( default is to read from stdin ) - h , -- help help for add - tls -- upsert Replace existing TLS certificate if certificate is different in input","title":"Options"},{"location":"user-guide/commands/argocd_cert_add-tls/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cert_add-tls/#see-also","text":"argocd cert - Manage repository certificates and SSH known hosts entries","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cert_list/","text":"argocd cert list \u00b6 List configured certificates argocd cert list [ flags ] Options \u00b6 -- cert - type string only list certificates of given type , valid : ' ssh ' , ' https ' - h , -- help help for list -- hostname - pattern string only list certificates for hosts matching given glob - pattern - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" ) -- sort string set display sort order for output format wide . One of : hostname | type Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cert - Manage repository certificates and SSH known hosts entries","title":"Argocd cert list"},{"location":"user-guide/commands/argocd_cert_list/#argocd-cert-list","text":"List configured certificates argocd cert list [ flags ]","title":"argocd cert list"},{"location":"user-guide/commands/argocd_cert_list/#options","text":"-- cert - type string only list certificates of given type , valid : ' ssh ' , ' https ' - h , -- help help for list -- hostname - pattern string only list certificates for hosts matching given glob - pattern - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" ) -- sort string set display sort order for output format wide . One of : hostname | type","title":"Options"},{"location":"user-guide/commands/argocd_cert_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cert_list/#see-also","text":"argocd cert - Manage repository certificates and SSH known hosts entries","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cert_rm/","text":"argocd cert rm \u00b6 Remove certificate of TYPE for REPOSERVER argocd cert rm REPOSERVER [ flags ] Options \u00b6 -- cert - sub - type string Only remove certs of given sub - type ( only for ssh ) -- cert - type string Only remove certs of given type ( ssh , https ) - h , -- help help for rm Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cert - Manage repository certificates and SSH known hosts entries","title":"Argocd cert rm"},{"location":"user-guide/commands/argocd_cert_rm/#argocd-cert-rm","text":"Remove certificate of TYPE for REPOSERVER argocd cert rm REPOSERVER [ flags ]","title":"argocd cert rm"},{"location":"user-guide/commands/argocd_cert_rm/#options","text":"-- cert - sub - type string Only remove certs of given sub - type ( only for ssh ) -- cert - type string Only remove certs of given type ( ssh , https ) - h , -- help help for rm","title":"Options"},{"location":"user-guide/commands/argocd_cert_rm/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cert_rm/#see-also","text":"argocd cert - Manage repository certificates and SSH known hosts entries","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cli/","text":"ArgoCD Command Reference \u00b6 ArgoCD command reference can be found here .","title":"ArgoCD Command Reference"},{"location":"user-guide/commands/argocd_cli/#argocd-command-reference","text":"ArgoCD command reference can be found here .","title":"ArgoCD Command Reference"},{"location":"user-guide/commands/argocd_cluster/","text":"argocd cluster \u00b6 Manage cluster credentials argocd cluster [ flags ] Examples \u00b6 # List all known clusters in JSON format: argocd cluster list -o json # Add a target cluster configuration to ArgoCD. The context must exist in your kubectl config: argocd cluster add example-cluster # Get specific details about a cluster in plain text (wide) format: argocd cluster get example-cluster -o wide # Remove a target cluster context from ArgoCD argocd cluster rm example-cluster Options \u00b6 - h , -- help help for cluster Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server argocd cluster add - argocd cluster add CONTEXT argocd cluster get - Get cluster information argocd cluster list - List configured clusters argocd cluster rm - Remove cluster credentials argocd cluster rotate-auth - argocd cluster rotate-auth SERVER","title":"Argocd cluster"},{"location":"user-guide/commands/argocd_cluster/#argocd-cluster","text":"Manage cluster credentials argocd cluster [ flags ]","title":"argocd cluster"},{"location":"user-guide/commands/argocd_cluster/#examples","text":"# List all known clusters in JSON format: argocd cluster list -o json # Add a target cluster configuration to ArgoCD. The context must exist in your kubectl config: argocd cluster add example-cluster # Get specific details about a cluster in plain text (wide) format: argocd cluster get example-cluster -o wide # Remove a target cluster context from ArgoCD argocd cluster rm example-cluster","title":"Examples"},{"location":"user-guide/commands/argocd_cluster/#options","text":"- h , -- help help for cluster","title":"Options"},{"location":"user-guide/commands/argocd_cluster/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cluster/#see-also","text":"argocd - argocd controls a Argo CD server argocd cluster add - argocd cluster add CONTEXT argocd cluster get - Get cluster information argocd cluster list - List configured clusters argocd cluster rm - Remove cluster credentials argocd cluster rotate-auth - argocd cluster rotate-auth SERVER","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cluster_add/","text":"argocd cluster add \u00b6 argocd cluster add CONTEXT argocd cluster add CONTEXT [ flags ] Options \u00b6 -- aws - cluster - name string AWS Cluster name if set then aws cli eks token command will be used to access cluster -- aws - role - arn string Optional AWS role arn . If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain . -- exec - command string Command to run to provide client credentials to the cluster . You may need to build a custom ArgoCD image to ensure the command is available at runtime . -- exec - command - api - version string Preferred input version of the ExecInfo for the -- exec - command -- exec - command - args stringArray Arguments to supply to the -- exec - command command -- exec - command - env stringToString Environment vars to set when running the -- exec - command command ( default []) -- exec - command - install - hint string Text shown to the user when the -- exec - command executable doesn 't seem to be present - h , -- help help for add -- in - cluster Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname ( kubernetes . default . svc ) -- kubeconfig string use a particular kubeconfig file -- name string Overwrite the cluster name -- namespace stringArray List of namespaces which are allowed to manage -- service - account string System namespace service account to use for kubernetes resource management . If not set then default \"argocd-manager\" SA will be created -- shard int Cluster shard number ; inferred from hostname if not set ( default - 1 ) -- system - namespace string Use different system namespace ( default \"kube-system\" ) -- upsert Override an existing cluster with the same name even if the spec differs Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cluster - Manage cluster credentials","title":"Argocd cluster add"},{"location":"user-guide/commands/argocd_cluster_add/#argocd-cluster-add","text":"argocd cluster add CONTEXT argocd cluster add CONTEXT [ flags ]","title":"argocd cluster add"},{"location":"user-guide/commands/argocd_cluster_add/#options","text":"-- aws - cluster - name string AWS Cluster name if set then aws cli eks token command will be used to access cluster -- aws - role - arn string Optional AWS role arn . If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain . -- exec - command string Command to run to provide client credentials to the cluster . You may need to build a custom ArgoCD image to ensure the command is available at runtime . -- exec - command - api - version string Preferred input version of the ExecInfo for the -- exec - command -- exec - command - args stringArray Arguments to supply to the -- exec - command command -- exec - command - env stringToString Environment vars to set when running the -- exec - command command ( default []) -- exec - command - install - hint string Text shown to the user when the -- exec - command executable doesn 't seem to be present - h , -- help help for add -- in - cluster Indicates Argo CD resides inside this cluster and should connect using the internal k8s hostname ( kubernetes . default . svc ) -- kubeconfig string use a particular kubeconfig file -- name string Overwrite the cluster name -- namespace stringArray List of namespaces which are allowed to manage -- service - account string System namespace service account to use for kubernetes resource management . If not set then default \"argocd-manager\" SA will be created -- shard int Cluster shard number ; inferred from hostname if not set ( default - 1 ) -- system - namespace string Use different system namespace ( default \"kube-system\" ) -- upsert Override an existing cluster with the same name even if the spec differs","title":"Options"},{"location":"user-guide/commands/argocd_cluster_add/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cluster_add/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cluster_get/","text":"argocd cluster get \u00b6 Get cluster information argocd cluster get SERVER [ flags ] Examples \u00b6 argocd cluster get https://12.34.567.89 Options \u00b6 - h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide | server ( default \" yaml \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cluster - Manage cluster credentials","title":"Argocd cluster get"},{"location":"user-guide/commands/argocd_cluster_get/#argocd-cluster-get","text":"Get cluster information argocd cluster get SERVER [ flags ]","title":"argocd cluster get"},{"location":"user-guide/commands/argocd_cluster_get/#examples","text":"argocd cluster get https://12.34.567.89","title":"Examples"},{"location":"user-guide/commands/argocd_cluster_get/#options","text":"- h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide | server ( default \" yaml \" )","title":"Options"},{"location":"user-guide/commands/argocd_cluster_get/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cluster_get/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cluster_list/","text":"argocd cluster list \u00b6 List configured clusters argocd cluster list [ flags ] Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | server ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cluster - Manage cluster credentials","title":"Argocd cluster list"},{"location":"user-guide/commands/argocd_cluster_list/#argocd-cluster-list","text":"List configured clusters argocd cluster list [ flags ]","title":"argocd cluster list"},{"location":"user-guide/commands/argocd_cluster_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | server ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_cluster_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cluster_list/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cluster_rm/","text":"argocd cluster rm \u00b6 Remove cluster credentials argocd cluster rm SERVER [ flags ] Examples \u00b6 argocd cluster rm https://12.34.567.89 Options \u00b6 - h , -- help help for rm Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cluster - Manage cluster credentials","title":"Argocd cluster rm"},{"location":"user-guide/commands/argocd_cluster_rm/#argocd-cluster-rm","text":"Remove cluster credentials argocd cluster rm SERVER [ flags ]","title":"argocd cluster rm"},{"location":"user-guide/commands/argocd_cluster_rm/#examples","text":"argocd cluster rm https://12.34.567.89","title":"Examples"},{"location":"user-guide/commands/argocd_cluster_rm/#options","text":"- h , -- help help for rm","title":"Options"},{"location":"user-guide/commands/argocd_cluster_rm/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cluster_rm/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_cluster_rotate-auth/","text":"argocd cluster rotate-auth \u00b6 argocd cluster rotate-auth SERVER argocd cluster rotate - auth SERVER [ flags ] Examples \u00b6 argocd cluster rotate-auth https://12.34.567.89 Options \u00b6 - h , -- help help for rotate - auth Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd cluster - Manage cluster credentials","title":"Argocd cluster rotate auth"},{"location":"user-guide/commands/argocd_cluster_rotate-auth/#argocd-cluster-rotate-auth","text":"argocd cluster rotate-auth SERVER argocd cluster rotate - auth SERVER [ flags ]","title":"argocd cluster rotate-auth"},{"location":"user-guide/commands/argocd_cluster_rotate-auth/#examples","text":"argocd cluster rotate-auth https://12.34.567.89","title":"Examples"},{"location":"user-guide/commands/argocd_cluster_rotate-auth/#options","text":"- h , -- help help for rotate - auth","title":"Options"},{"location":"user-guide/commands/argocd_cluster_rotate-auth/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_cluster_rotate-auth/#see-also","text":"argocd cluster - Manage cluster credentials","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_completion/","text":"argocd completion \u00b6 output shell completion code for the specified shell (bash or zsh) Synopsis \u00b6 Write bash or zsh shell completion code to standard output. For bash, ensure you have bash completions installed and enabled. To access completions in your current shell, run $ source <(argocd completion bash) Alternatively, write it to a file and source in .bash_profile For zsh, output to a file in a directory referenced by the $fpath shell variable. argocd completion SHELL [ flags ] Options \u00b6 - h , -- help help for completion Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server","title":"Argocd completion"},{"location":"user-guide/commands/argocd_completion/#argocd-completion","text":"output shell completion code for the specified shell (bash or zsh)","title":"argocd completion"},{"location":"user-guide/commands/argocd_completion/#synopsis","text":"Write bash or zsh shell completion code to standard output. For bash, ensure you have bash completions installed and enabled. To access completions in your current shell, run $ source <(argocd completion bash) Alternatively, write it to a file and source in .bash_profile For zsh, output to a file in a directory referenced by the $fpath shell variable. argocd completion SHELL [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_completion/#options","text":"- h , -- help help for completion","title":"Options"},{"location":"user-guide/commands/argocd_completion/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_completion/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_context/","text":"argocd context \u00b6 Switch between contexts argocd context [ CONTEXT ] [ flags ] Options \u00b6 -- delete Delete the context instead of switching to it - h , -- help help for context Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server","title":"Argocd context"},{"location":"user-guide/commands/argocd_context/#argocd-context","text":"Switch between contexts argocd context [ CONTEXT ] [ flags ]","title":"argocd context"},{"location":"user-guide/commands/argocd_context/#options","text":"-- delete Delete the context instead of switching to it - h , -- help help for context","title":"Options"},{"location":"user-guide/commands/argocd_context/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_context/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_gpg/","text":"argocd gpg \u00b6 Manage GPG keys used for signature verification argocd gpg [ flags ] Options \u00b6 - h , -- help help for gpg Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server argocd gpg add - Adds a GPG public key to the server's keyring argocd gpg get - Get the GPG public key with ID from the server argocd gpg list - List configured GPG public keys argocd gpg rm - Removes a GPG public key from the server's keyring","title":"Argocd gpg"},{"location":"user-guide/commands/argocd_gpg/#argocd-gpg","text":"Manage GPG keys used for signature verification argocd gpg [ flags ]","title":"argocd gpg"},{"location":"user-guide/commands/argocd_gpg/#options","text":"- h , -- help help for gpg","title":"Options"},{"location":"user-guide/commands/argocd_gpg/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_gpg/#see-also","text":"argocd - argocd controls a Argo CD server argocd gpg add - Adds a GPG public key to the server's keyring argocd gpg get - Get the GPG public key with ID from the server argocd gpg list - List configured GPG public keys argocd gpg rm - Removes a GPG public key from the server's keyring","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_gpg_add/","text":"argocd gpg add \u00b6 Adds a GPG public key to the server's keyring argocd gpg add [ flags ] Options \u00b6 - f , -- from string Path to the file that contains the GPG public key to import - h , -- help help for add Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd gpg - Manage GPG keys used for signature verification","title":"Argocd gpg add"},{"location":"user-guide/commands/argocd_gpg_add/#argocd-gpg-add","text":"Adds a GPG public key to the server's keyring argocd gpg add [ flags ]","title":"argocd gpg add"},{"location":"user-guide/commands/argocd_gpg_add/#options","text":"- f , -- from string Path to the file that contains the GPG public key to import - h , -- help help for add","title":"Options"},{"location":"user-guide/commands/argocd_gpg_add/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_gpg_add/#see-also","text":"argocd gpg - Manage GPG keys used for signature verification","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_gpg_get/","text":"argocd gpg get \u00b6 Get the GPG public key with ID from the server argocd gpg get KEYID [ flags ] Options \u00b6 - h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd gpg - Manage GPG keys used for signature verification","title":"Argocd gpg get"},{"location":"user-guide/commands/argocd_gpg_get/#argocd-gpg-get","text":"Get the GPG public key with ID from the server argocd gpg get KEYID [ flags ]","title":"argocd gpg get"},{"location":"user-guide/commands/argocd_gpg_get/#options","text":"- h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_gpg_get/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_gpg_get/#see-also","text":"argocd gpg - Manage GPG keys used for signature verification","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_gpg_list/","text":"argocd gpg list \u00b6 List configured GPG public keys argocd gpg list [ flags ] Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd gpg - Manage GPG keys used for signature verification","title":"Argocd gpg list"},{"location":"user-guide/commands/argocd_gpg_list/#argocd-gpg-list","text":"List configured GPG public keys argocd gpg list [ flags ]","title":"argocd gpg list"},{"location":"user-guide/commands/argocd_gpg_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_gpg_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_gpg_list/#see-also","text":"argocd gpg - Manage GPG keys used for signature verification","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_gpg_rm/","text":"argocd gpg rm \u00b6 Removes a GPG public key from the server's keyring argocd gpg rm KEYID [ flags ] Options \u00b6 - h , -- help help for rm Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd gpg - Manage GPG keys used for signature verification","title":"Argocd gpg rm"},{"location":"user-guide/commands/argocd_gpg_rm/#argocd-gpg-rm","text":"Removes a GPG public key from the server's keyring argocd gpg rm KEYID [ flags ]","title":"argocd gpg rm"},{"location":"user-guide/commands/argocd_gpg_rm/#options","text":"- h , -- help help for rm","title":"Options"},{"location":"user-guide/commands/argocd_gpg_rm/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_gpg_rm/#see-also","text":"argocd gpg - Manage GPG keys used for signature verification","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_login/","text":"argocd login \u00b6 Log in to Argo CD Synopsis \u00b6 Log in to Argo CD argocd login SERVER [ flags ] Options \u00b6 - h , -- help help for login -- name string name to use for the context -- password string the password of an account to authenticate -- sso perform SSO login -- sso - port int port to run local OAuth2 login application ( default 8085 ) -- username string the username of an account to authenticate Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server","title":"Argocd login"},{"location":"user-guide/commands/argocd_login/#argocd-login","text":"Log in to Argo CD","title":"argocd login"},{"location":"user-guide/commands/argocd_login/#synopsis","text":"Log in to Argo CD argocd login SERVER [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_login/#options","text":"- h , -- help help for login -- name string name to use for the context -- password string the password of an account to authenticate -- sso perform SSO login -- sso - port int port to run local OAuth2 login application ( default 8085 ) -- username string the username of an account to authenticate","title":"Options"},{"location":"user-guide/commands/argocd_login/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_login/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_logout/","text":"argocd logout \u00b6 Log out from Argo CD Synopsis \u00b6 Log out from Argo CD argocd logout CONTEXT [ flags ] Options \u00b6 - h , -- help help for logout Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server","title":"Argocd logout"},{"location":"user-guide/commands/argocd_logout/#argocd-logout","text":"Log out from Argo CD","title":"argocd logout"},{"location":"user-guide/commands/argocd_logout/#synopsis","text":"Log out from Argo CD argocd logout CONTEXT [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_logout/#options","text":"- h , -- help help for logout","title":"Options"},{"location":"user-guide/commands/argocd_logout/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_logout/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj/","text":"argocd proj \u00b6 Manage projects argocd proj [ flags ] Options \u00b6 - h , -- help help for proj Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server argocd proj add-destination - Add project destination argocd proj add-orphaned-ignore - Add a resource to orphaned ignore list argocd proj add-signature-key - Add GnuPG signature key to project argocd proj add-source - Add project source repository argocd proj allow-cluster-resource - Adds a cluster-scoped API resource to the allow list and removes it from deny list argocd proj allow-namespace-resource - Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list argocd proj create - Create a project argocd proj delete - Delete project argocd proj deny-cluster-resource - Removes a cluster-scoped API resource from the allow list and adds it to deny list argocd proj deny-namespace-resource - Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list argocd proj edit - Edit project argocd proj get - Get project details argocd proj list - List projects argocd proj remove-destination - Remove project destination argocd proj remove-orphaned-ignore - Remove a resource from orphaned ignore list argocd proj remove-signature-key - Remove GnuPG signature key from project argocd proj remove-source - Remove project source repository argocd proj role - Manage a project's roles argocd proj set - Set project parameters argocd proj windows - Manage a project's sync windows","title":"Argocd proj"},{"location":"user-guide/commands/argocd_proj/#argocd-proj","text":"Manage projects argocd proj [ flags ]","title":"argocd proj"},{"location":"user-guide/commands/argocd_proj/#options","text":"- h , -- help help for proj","title":"Options"},{"location":"user-guide/commands/argocd_proj/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj/#see-also","text":"argocd - argocd controls a Argo CD server argocd proj add-destination - Add project destination argocd proj add-orphaned-ignore - Add a resource to orphaned ignore list argocd proj add-signature-key - Add GnuPG signature key to project argocd proj add-source - Add project source repository argocd proj allow-cluster-resource - Adds a cluster-scoped API resource to the allow list and removes it from deny list argocd proj allow-namespace-resource - Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list argocd proj create - Create a project argocd proj delete - Delete project argocd proj deny-cluster-resource - Removes a cluster-scoped API resource from the allow list and adds it to deny list argocd proj deny-namespace-resource - Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list argocd proj edit - Edit project argocd proj get - Get project details argocd proj list - List projects argocd proj remove-destination - Remove project destination argocd proj remove-orphaned-ignore - Remove a resource from orphaned ignore list argocd proj remove-signature-key - Remove GnuPG signature key from project argocd proj remove-source - Remove project source repository argocd proj role - Manage a project's roles argocd proj set - Set project parameters argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_add-destination/","text":"argocd proj add-destination \u00b6 Add project destination argocd proj add - destination PROJECT SERVER NAMESPACE [ flags ] Options \u00b6 - h , -- help help for add - destination Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj add destination"},{"location":"user-guide/commands/argocd_proj_add-destination/#argocd-proj-add-destination","text":"Add project destination argocd proj add - destination PROJECT SERVER NAMESPACE [ flags ]","title":"argocd proj add-destination"},{"location":"user-guide/commands/argocd_proj_add-destination/#options","text":"- h , -- help help for add - destination","title":"Options"},{"location":"user-guide/commands/argocd_proj_add-destination/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_add-destination/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_add-orphaned-ignore/","text":"argocd proj add-orphaned-ignore \u00b6 Add a resource to orphaned ignore list argocd proj add - orphaned - ignore PROJECT GROUP KIND [ flags ] Options \u00b6 - h , -- help help for add - orphaned - ignore -- name string Resource name pattern Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj add orphaned ignore"},{"location":"user-guide/commands/argocd_proj_add-orphaned-ignore/#argocd-proj-add-orphaned-ignore","text":"Add a resource to orphaned ignore list argocd proj add - orphaned - ignore PROJECT GROUP KIND [ flags ]","title":"argocd proj add-orphaned-ignore"},{"location":"user-guide/commands/argocd_proj_add-orphaned-ignore/#options","text":"- h , -- help help for add - orphaned - ignore -- name string Resource name pattern","title":"Options"},{"location":"user-guide/commands/argocd_proj_add-orphaned-ignore/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_add-orphaned-ignore/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_add-signature-key/","text":"argocd proj add-signature-key \u00b6 Add GnuPG signature key to project argocd proj add - signature - key PROJECT KEY - ID [ flags ] Options \u00b6 - h , -- help help for add - signature - key Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj add signature key"},{"location":"user-guide/commands/argocd_proj_add-signature-key/#argocd-proj-add-signature-key","text":"Add GnuPG signature key to project argocd proj add - signature - key PROJECT KEY - ID [ flags ]","title":"argocd proj add-signature-key"},{"location":"user-guide/commands/argocd_proj_add-signature-key/#options","text":"- h , -- help help for add - signature - key","title":"Options"},{"location":"user-guide/commands/argocd_proj_add-signature-key/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_add-signature-key/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_add-source/","text":"argocd proj add-source \u00b6 Add project source repository argocd proj add - source PROJECT URL [ flags ] Options \u00b6 - h , -- help help for add - source Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj add source"},{"location":"user-guide/commands/argocd_proj_add-source/#argocd-proj-add-source","text":"Add project source repository argocd proj add - source PROJECT URL [ flags ]","title":"argocd proj add-source"},{"location":"user-guide/commands/argocd_proj_add-source/#options","text":"- h , -- help help for add - source","title":"Options"},{"location":"user-guide/commands/argocd_proj_add-source/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_add-source/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_allow-cluster-resource/","text":"argocd proj allow-cluster-resource \u00b6 Adds a cluster-scoped API resource to the allow list and removes it from deny list argocd proj allow - cluster - resource PROJECT GROUP KIND [ flags ] Options \u00b6 - h , -- help help for allow - cluster - resource - l , -- list string Use deny list or allow list . This can only be ' allow ' or ' deny ' ( default \" allow \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj allow cluster resource"},{"location":"user-guide/commands/argocd_proj_allow-cluster-resource/#argocd-proj-allow-cluster-resource","text":"Adds a cluster-scoped API resource to the allow list and removes it from deny list argocd proj allow - cluster - resource PROJECT GROUP KIND [ flags ]","title":"argocd proj allow-cluster-resource"},{"location":"user-guide/commands/argocd_proj_allow-cluster-resource/#options","text":"- h , -- help help for allow - cluster - resource - l , -- list string Use deny list or allow list . This can only be ' allow ' or ' deny ' ( default \" allow \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_allow-cluster-resource/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_allow-cluster-resource/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_allow-namespace-resource/","text":"argocd proj allow-namespace-resource \u00b6 Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list argocd proj allow - namespace - resource PROJECT GROUP KIND [ flags ] Options \u00b6 - h , -- help help for allow - namespace - resource - l , -- list string Use deny list or allow list . This can only be ' allow ' or ' deny ' ( default \" deny \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj allow namespace resource"},{"location":"user-guide/commands/argocd_proj_allow-namespace-resource/#argocd-proj-allow-namespace-resource","text":"Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list argocd proj allow - namespace - resource PROJECT GROUP KIND [ flags ]","title":"argocd proj allow-namespace-resource"},{"location":"user-guide/commands/argocd_proj_allow-namespace-resource/#options","text":"- h , -- help help for allow - namespace - resource - l , -- list string Use deny list or allow list . This can only be ' allow ' or ' deny ' ( default \" deny \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_allow-namespace-resource/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_allow-namespace-resource/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_create/","text":"argocd proj create \u00b6 Create a project argocd proj create PROJECT [ flags ] Options \u00b6 -- description string Project description - d , -- dest stringArray Permitted destination server and namespace ( e . g . https : // 192 . 168 . 99 . 100 : 8443 , default ) - f , -- file string Filename or URL to Kubernetes manifests for the project - h , -- help help for create -- orphaned - resources Enables orphaned resources monitoring -- orphaned - resources - warn Specifies if applications should be a warning condition when orphaned resources detected -- signature - keys strings GnuPG public key IDs for commit signature verification - s , -- src stringArray Permitted source repository URL -- upsert Allows to override a project with the same name even if supplied project spec is different from existing spec Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj create"},{"location":"user-guide/commands/argocd_proj_create/#argocd-proj-create","text":"Create a project argocd proj create PROJECT [ flags ]","title":"argocd proj create"},{"location":"user-guide/commands/argocd_proj_create/#options","text":"-- description string Project description - d , -- dest stringArray Permitted destination server and namespace ( e . g . https : // 192 . 168 . 99 . 100 : 8443 , default ) - f , -- file string Filename or URL to Kubernetes manifests for the project - h , -- help help for create -- orphaned - resources Enables orphaned resources monitoring -- orphaned - resources - warn Specifies if applications should be a warning condition when orphaned resources detected -- signature - keys strings GnuPG public key IDs for commit signature verification - s , -- src stringArray Permitted source repository URL -- upsert Allows to override a project with the same name even if supplied project spec is different from existing spec","title":"Options"},{"location":"user-guide/commands/argocd_proj_create/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_create/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_delete/","text":"argocd proj delete \u00b6 Delete project argocd proj delete PROJECT [ flags ] Options \u00b6 - h , -- help help for delete Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj delete"},{"location":"user-guide/commands/argocd_proj_delete/#argocd-proj-delete","text":"Delete project argocd proj delete PROJECT [ flags ]","title":"argocd proj delete"},{"location":"user-guide/commands/argocd_proj_delete/#options","text":"- h , -- help help for delete","title":"Options"},{"location":"user-guide/commands/argocd_proj_delete/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_delete/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_deny-cluster-resource/","text":"argocd proj deny-cluster-resource \u00b6 Removes a cluster-scoped API resource from the allow list and adds it to deny list argocd proj deny - cluster - resource PROJECT GROUP KIND [ flags ] Options \u00b6 - h , -- help help for deny - cluster - resource - l , -- list string Use deny list or allow list . This can only be ' allow ' or ' deny ' ( default \" allow \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj deny cluster resource"},{"location":"user-guide/commands/argocd_proj_deny-cluster-resource/#argocd-proj-deny-cluster-resource","text":"Removes a cluster-scoped API resource from the allow list and adds it to deny list argocd proj deny - cluster - resource PROJECT GROUP KIND [ flags ]","title":"argocd proj deny-cluster-resource"},{"location":"user-guide/commands/argocd_proj_deny-cluster-resource/#options","text":"- h , -- help help for deny - cluster - resource - l , -- list string Use deny list or allow list . This can only be ' allow ' or ' deny ' ( default \" allow \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_deny-cluster-resource/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_deny-cluster-resource/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_deny-namespace-resource/","text":"argocd proj deny-namespace-resource \u00b6 Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list argocd proj deny - namespace - resource PROJECT GROUP KIND [ flags ] Options \u00b6 - h , -- help help for deny - namespace - resource - l , -- list string Use deny list or allow list . This can only be ' allow ' or ' deny ' ( default \" deny \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj deny namespace resource"},{"location":"user-guide/commands/argocd_proj_deny-namespace-resource/#argocd-proj-deny-namespace-resource","text":"Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list argocd proj deny - namespace - resource PROJECT GROUP KIND [ flags ]","title":"argocd proj deny-namespace-resource"},{"location":"user-guide/commands/argocd_proj_deny-namespace-resource/#options","text":"- h , -- help help for deny - namespace - resource - l , -- list string Use deny list or allow list . This can only be ' allow ' or ' deny ' ( default \" deny \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_deny-namespace-resource/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_deny-namespace-resource/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_edit/","text":"argocd proj edit \u00b6 Edit project argocd proj edit PROJECT [ flags ] Options \u00b6 - h , -- help help for edit Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj edit"},{"location":"user-guide/commands/argocd_proj_edit/#argocd-proj-edit","text":"Edit project argocd proj edit PROJECT [ flags ]","title":"argocd proj edit"},{"location":"user-guide/commands/argocd_proj_edit/#options","text":"- h , -- help help for edit","title":"Options"},{"location":"user-guide/commands/argocd_proj_edit/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_edit/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_get/","text":"argocd proj get \u00b6 Get project details argocd proj get PROJECT [ flags ] Options \u00b6 - h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj get"},{"location":"user-guide/commands/argocd_proj_get/#argocd-proj-get","text":"Get project details argocd proj get PROJECT [ flags ]","title":"argocd proj get"},{"location":"user-guide/commands/argocd_proj_get/#options","text":"- h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_get/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_get/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_list/","text":"argocd proj list \u00b6 List projects argocd proj list [ flags ] Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | name ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj list"},{"location":"user-guide/commands/argocd_proj_list/#argocd-proj-list","text":"List projects argocd proj list [ flags ]","title":"argocd proj list"},{"location":"user-guide/commands/argocd_proj_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | name ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_list/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_remove-destination/","text":"argocd proj remove-destination \u00b6 Remove project destination argocd proj remove - destination PROJECT SERVER NAMESPACE [ flags ] Options \u00b6 - h , -- help help for remove - destination Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj remove destination"},{"location":"user-guide/commands/argocd_proj_remove-destination/#argocd-proj-remove-destination","text":"Remove project destination argocd proj remove - destination PROJECT SERVER NAMESPACE [ flags ]","title":"argocd proj remove-destination"},{"location":"user-guide/commands/argocd_proj_remove-destination/#options","text":"- h , -- help help for remove - destination","title":"Options"},{"location":"user-guide/commands/argocd_proj_remove-destination/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_remove-destination/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_remove-orphaned-ignore/","text":"argocd proj remove-orphaned-ignore \u00b6 Remove a resource from orphaned ignore list argocd proj remove - orphaned - ignore PROJECT GROUP KIND NAME [ flags ] Options \u00b6 - h , -- help help for remove - orphaned - ignore -- name string Resource name pattern Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj remove orphaned ignore"},{"location":"user-guide/commands/argocd_proj_remove-orphaned-ignore/#argocd-proj-remove-orphaned-ignore","text":"Remove a resource from orphaned ignore list argocd proj remove - orphaned - ignore PROJECT GROUP KIND NAME [ flags ]","title":"argocd proj remove-orphaned-ignore"},{"location":"user-guide/commands/argocd_proj_remove-orphaned-ignore/#options","text":"- h , -- help help for remove - orphaned - ignore -- name string Resource name pattern","title":"Options"},{"location":"user-guide/commands/argocd_proj_remove-orphaned-ignore/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_remove-orphaned-ignore/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_remove-signature-key/","text":"argocd proj remove-signature-key \u00b6 Remove GnuPG signature key from project argocd proj remove - signature - key PROJECT KEY - ID [ flags ] Options \u00b6 - h , -- help help for remove - signature - key Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj remove signature key"},{"location":"user-guide/commands/argocd_proj_remove-signature-key/#argocd-proj-remove-signature-key","text":"Remove GnuPG signature key from project argocd proj remove - signature - key PROJECT KEY - ID [ flags ]","title":"argocd proj remove-signature-key"},{"location":"user-guide/commands/argocd_proj_remove-signature-key/#options","text":"- h , -- help help for remove - signature - key","title":"Options"},{"location":"user-guide/commands/argocd_proj_remove-signature-key/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_remove-signature-key/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_remove-source/","text":"argocd proj remove-source \u00b6 Remove project source repository argocd proj remove - source PROJECT URL [ flags ] Options \u00b6 - h , -- help help for remove - source Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj remove source"},{"location":"user-guide/commands/argocd_proj_remove-source/#argocd-proj-remove-source","text":"Remove project source repository argocd proj remove - source PROJECT URL [ flags ]","title":"argocd proj remove-source"},{"location":"user-guide/commands/argocd_proj_remove-source/#options","text":"- h , -- help help for remove - source","title":"Options"},{"location":"user-guide/commands/argocd_proj_remove-source/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_remove-source/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role/","text":"argocd proj role \u00b6 Manage a project's roles argocd proj role [ flags ] Options \u00b6 - h , -- help help for role Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects argocd proj role add-group - Add a group claim to a project role argocd proj role add-policy - Add a policy to a project role argocd proj role create - Create a project role argocd proj role create-token - Create a project token argocd proj role delete - Delete a project role argocd proj role delete-token - Delete a project token argocd proj role get - Get the details of a specific role argocd proj role list - List all the roles in a project argocd proj role list-tokens - List tokens for a given role. argocd proj role remove-group - Remove a group claim from a role within a project argocd proj role remove-policy - Remove a policy from a role within a project","title":"Argocd proj role"},{"location":"user-guide/commands/argocd_proj_role/#argocd-proj-role","text":"Manage a project's roles argocd proj role [ flags ]","title":"argocd proj role"},{"location":"user-guide/commands/argocd_proj_role/#options","text":"- h , -- help help for role","title":"Options"},{"location":"user-guide/commands/argocd_proj_role/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role/#see-also","text":"argocd proj - Manage projects argocd proj role add-group - Add a group claim to a project role argocd proj role add-policy - Add a policy to a project role argocd proj role create - Create a project role argocd proj role create-token - Create a project token argocd proj role delete - Delete a project role argocd proj role delete-token - Delete a project token argocd proj role get - Get the details of a specific role argocd proj role list - List all the roles in a project argocd proj role list-tokens - List tokens for a given role. argocd proj role remove-group - Remove a group claim from a role within a project argocd proj role remove-policy - Remove a policy from a role within a project","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_add-group/","text":"argocd proj role add-group \u00b6 Add a group claim to a project role argocd proj role add - group PROJECT ROLE - NAME GROUP - CLAIM [ flags ] Options \u00b6 - h , -- help help for add - group Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role add group"},{"location":"user-guide/commands/argocd_proj_role_add-group/#argocd-proj-role-add-group","text":"Add a group claim to a project role argocd proj role add - group PROJECT ROLE - NAME GROUP - CLAIM [ flags ]","title":"argocd proj role add-group"},{"location":"user-guide/commands/argocd_proj_role_add-group/#options","text":"- h , -- help help for add - group","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_add-group/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_add-group/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_add-policy/","text":"argocd proj role add-policy \u00b6 Add a policy to a project role argocd proj role add - policy PROJECT ROLE - NAME [ flags ] Options \u00b6 - a , -- action string Action to grant / deny permission on ( e . g . get , create , list , update , delete ) - h , -- help help for add - policy - o , -- object string Object within the project to grant / deny access . Use ' * ' for a wildcard . Will want access to ' <project>/<object> ' - p , -- permission string Whether to allow or deny access to object with the action . This can only be ' allow ' or ' deny ' ( default \" allow \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role add policy"},{"location":"user-guide/commands/argocd_proj_role_add-policy/#argocd-proj-role-add-policy","text":"Add a policy to a project role argocd proj role add - policy PROJECT ROLE - NAME [ flags ]","title":"argocd proj role add-policy"},{"location":"user-guide/commands/argocd_proj_role_add-policy/#options","text":"- a , -- action string Action to grant / deny permission on ( e . g . get , create , list , update , delete ) - h , -- help help for add - policy - o , -- object string Object within the project to grant / deny access . Use ' * ' for a wildcard . Will want access to ' <project>/<object> ' - p , -- permission string Whether to allow or deny access to object with the action . This can only be ' allow ' or ' deny ' ( default \" allow \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_add-policy/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_add-policy/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_create-token/","text":"argocd proj role create-token \u00b6 Create a project token argocd proj role create - token PROJECT ROLE - NAME [ flags ] Options \u00b6 - e , -- expires - in string Duration before the token will expire , eg \" 12h \" , \" 7d \" . ( Default : No expiration ) - h , -- help help for create - token - i , -- id string Token unique identifier . ( Default : Random UUID ) - t , -- token - only Output token only - for use in scripts . Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role create token"},{"location":"user-guide/commands/argocd_proj_role_create-token/#argocd-proj-role-create-token","text":"Create a project token argocd proj role create - token PROJECT ROLE - NAME [ flags ]","title":"argocd proj role create-token"},{"location":"user-guide/commands/argocd_proj_role_create-token/#options","text":"- e , -- expires - in string Duration before the token will expire , eg \" 12h \" , \" 7d \" . ( Default : No expiration ) - h , -- help help for create - token - i , -- id string Token unique identifier . ( Default : Random UUID ) - t , -- token - only Output token only - for use in scripts .","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_create-token/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_create-token/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_create/","text":"argocd proj role create \u00b6 Create a project role argocd proj role create PROJECT ROLE - NAME [ flags ] Options \u00b6 -- description string Project description - h , -- help help for create Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role create"},{"location":"user-guide/commands/argocd_proj_role_create/#argocd-proj-role-create","text":"Create a project role argocd proj role create PROJECT ROLE - NAME [ flags ]","title":"argocd proj role create"},{"location":"user-guide/commands/argocd_proj_role_create/#options","text":"-- description string Project description - h , -- help help for create","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_create/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_create/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_delete-token/","text":"argocd proj role delete-token \u00b6 Delete a project token argocd proj role delete - token PROJECT ROLE - NAME ISSUED - AT [ flags ] Options \u00b6 - h , -- help help for delete - token Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role delete token"},{"location":"user-guide/commands/argocd_proj_role_delete-token/#argocd-proj-role-delete-token","text":"Delete a project token argocd proj role delete - token PROJECT ROLE - NAME ISSUED - AT [ flags ]","title":"argocd proj role delete-token"},{"location":"user-guide/commands/argocd_proj_role_delete-token/#options","text":"- h , -- help help for delete - token","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_delete-token/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_delete-token/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_delete/","text":"argocd proj role delete \u00b6 Delete a project role argocd proj role delete PROJECT ROLE - NAME [ flags ] Options \u00b6 - h , -- help help for delete Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role delete"},{"location":"user-guide/commands/argocd_proj_role_delete/#argocd-proj-role-delete","text":"Delete a project role argocd proj role delete PROJECT ROLE - NAME [ flags ]","title":"argocd proj role delete"},{"location":"user-guide/commands/argocd_proj_role_delete/#options","text":"- h , -- help help for delete","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_delete/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_delete/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_get/","text":"argocd proj role get \u00b6 Get the details of a specific role argocd proj role get PROJECT ROLE - NAME [ flags ] Options \u00b6 - h , -- help help for get Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role get"},{"location":"user-guide/commands/argocd_proj_role_get/#argocd-proj-role-get","text":"Get the details of a specific role argocd proj role get PROJECT ROLE - NAME [ flags ]","title":"argocd proj role get"},{"location":"user-guide/commands/argocd_proj_role_get/#options","text":"- h , -- help help for get","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_get/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_get/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_list-tokens/","text":"argocd proj role list-tokens \u00b6 List tokens for a given role. argocd proj role list - tokens PROJECT ROLE - NAME [ flags ] Options \u00b6 - h , -- help help for list - tokens - u , -- unixtime Print timestamps as Unix time instead of converting . Useful for piping into delete - token . Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role list tokens"},{"location":"user-guide/commands/argocd_proj_role_list-tokens/#argocd-proj-role-list-tokens","text":"List tokens for a given role. argocd proj role list - tokens PROJECT ROLE - NAME [ flags ]","title":"argocd proj role list-tokens"},{"location":"user-guide/commands/argocd_proj_role_list-tokens/#options","text":"- h , -- help help for list - tokens - u , -- unixtime Print timestamps as Unix time instead of converting . Useful for piping into delete - token .","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_list-tokens/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_list-tokens/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_list/","text":"argocd proj role list \u00b6 List all the roles in a project argocd proj role list PROJECT [ flags ] Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | name ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role list"},{"location":"user-guide/commands/argocd_proj_role_list/#argocd-proj-role-list","text":"List all the roles in a project argocd proj role list PROJECT [ flags ]","title":"argocd proj role list"},{"location":"user-guide/commands/argocd_proj_role_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | name ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_list/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_remove-group/","text":"argocd proj role remove-group \u00b6 Remove a group claim from a role within a project argocd proj role remove - group PROJECT ROLE - NAME GROUP - CLAIM [ flags ] Options \u00b6 - h , -- help help for remove - group Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role remove group"},{"location":"user-guide/commands/argocd_proj_role_remove-group/#argocd-proj-role-remove-group","text":"Remove a group claim from a role within a project argocd proj role remove - group PROJECT ROLE - NAME GROUP - CLAIM [ flags ]","title":"argocd proj role remove-group"},{"location":"user-guide/commands/argocd_proj_role_remove-group/#options","text":"- h , -- help help for remove - group","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_remove-group/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_remove-group/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_role_remove-policy/","text":"argocd proj role remove-policy \u00b6 Remove a policy from a role within a project argocd proj role remove - policy PROJECT ROLE - NAME [ flags ] Options \u00b6 - a , -- action string Action to grant / deny permission on ( e . g . get , create , list , update , delete ) - h , -- help help for remove - policy - o , -- object string Object within the project to grant / deny access . Use ' * ' for a wildcard . Will want access to ' <project>/<object> ' - p , -- permission string Whether to allow or deny access to object with the action . This can only be ' allow ' or ' deny ' ( default \" allow \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj role - Manage a project's roles","title":"Argocd proj role remove policy"},{"location":"user-guide/commands/argocd_proj_role_remove-policy/#argocd-proj-role-remove-policy","text":"Remove a policy from a role within a project argocd proj role remove - policy PROJECT ROLE - NAME [ flags ]","title":"argocd proj role remove-policy"},{"location":"user-guide/commands/argocd_proj_role_remove-policy/#options","text":"- a , -- action string Action to grant / deny permission on ( e . g . get , create , list , update , delete ) - h , -- help help for remove - policy - o , -- object string Object within the project to grant / deny access . Use ' * ' for a wildcard . Will want access to ' <project>/<object> ' - p , -- permission string Whether to allow or deny access to object with the action . This can only be ' allow ' or ' deny ' ( default \" allow \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_role_remove-policy/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_role_remove-policy/#see-also","text":"argocd proj role - Manage a project's roles","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_set/","text":"argocd proj set \u00b6 Set project parameters argocd proj set PROJECT [ flags ] Options \u00b6 -- description string Project description - d , -- dest stringArray Permitted destination server and namespace ( e . g . https : // 192 . 168 . 99 . 100 : 8443 , default ) - h , -- help help for set -- orphaned - resources Enables orphaned resources monitoring -- orphaned - resources - warn Specifies if applications should be a warning condition when orphaned resources detected -- signature - keys strings GnuPG public key IDs for commit signature verification - s , -- src stringArray Permitted source repository URL Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects","title":"Argocd proj set"},{"location":"user-guide/commands/argocd_proj_set/#argocd-proj-set","text":"Set project parameters argocd proj set PROJECT [ flags ]","title":"argocd proj set"},{"location":"user-guide/commands/argocd_proj_set/#options","text":"-- description string Project description - d , -- dest stringArray Permitted destination server and namespace ( e . g . https : // 192 . 168 . 99 . 100 : 8443 , default ) - h , -- help help for set -- orphaned - resources Enables orphaned resources monitoring -- orphaned - resources - warn Specifies if applications should be a warning condition when orphaned resources detected -- signature - keys strings GnuPG public key IDs for commit signature verification - s , -- src stringArray Permitted source repository URL","title":"Options"},{"location":"user-guide/commands/argocd_proj_set/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_set/#see-also","text":"argocd proj - Manage projects","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_windows/","text":"argocd proj windows \u00b6 Manage a project's sync windows argocd proj windows [ flags ] Options \u00b6 - h , -- help help for windows Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj - Manage projects argocd proj windows add - Add a sync window to a project argocd proj windows delete - Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows disable-manual-sync - Disable manual sync for a sync window argocd proj windows enable-manual-sync - Enable manual sync for a sync window argocd proj windows list - List project sync windows argocd proj windows update - Update a project sync window","title":"Argocd proj windows"},{"location":"user-guide/commands/argocd_proj_windows/#argocd-proj-windows","text":"Manage a project's sync windows argocd proj windows [ flags ]","title":"argocd proj windows"},{"location":"user-guide/commands/argocd_proj_windows/#options","text":"- h , -- help help for windows","title":"Options"},{"location":"user-guide/commands/argocd_proj_windows/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_windows/#see-also","text":"argocd proj - Manage projects argocd proj windows add - Add a sync window to a project argocd proj windows delete - Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows disable-manual-sync - Disable manual sync for a sync window argocd proj windows enable-manual-sync - Enable manual sync for a sync window argocd proj windows list - List project sync windows argocd proj windows update - Update a project sync window","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_windows_add/","text":"argocd proj windows add \u00b6 Add a sync window to a project argocd proj windows add PROJECT [ flags ] Options \u00b6 --applications strings Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website) --clusters strings Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging) --duration string Sync window duration. (e.g. --duration 1h) -h, --help help for add -k, --kind string Sync window kind, either allow or deny --manual-sync Allow manual syncs for both deny and allow windows --namespaces strings Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod) --schedule string Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\") Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows add"},{"location":"user-guide/commands/argocd_proj_windows_add/#argocd-proj-windows-add","text":"Add a sync window to a project argocd proj windows add PROJECT [ flags ]","title":"argocd proj windows add"},{"location":"user-guide/commands/argocd_proj_windows_add/#options","text":"--applications strings Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website) --clusters strings Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging) --duration string Sync window duration. (e.g. --duration 1h) -h, --help help for add -k, --kind string Sync window kind, either allow or deny --manual-sync Allow manual syncs for both deny and allow windows --namespaces strings Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod) --schedule string Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\")","title":"Options"},{"location":"user-guide/commands/argocd_proj_windows_add/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_windows_add/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_windows_delete/","text":"argocd proj windows delete \u00b6 Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows delete PROJECT ID [ flags ] Options \u00b6 - h , -- help help for delete Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows delete"},{"location":"user-guide/commands/argocd_proj_windows_delete/#argocd-proj-windows-delete","text":"Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows delete PROJECT ID [ flags ]","title":"argocd proj windows delete"},{"location":"user-guide/commands/argocd_proj_windows_delete/#options","text":"- h , -- help help for delete","title":"Options"},{"location":"user-guide/commands/argocd_proj_windows_delete/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_windows_delete/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_windows_disable-manual-sync/","text":"argocd proj windows disable-manual-sync \u00b6 Disable manual sync for a sync window Synopsis \u00b6 Disable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows disable - manual - sync PROJECT ID [ flags ] Options \u00b6 - h , -- help help for disable - manual - sync Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows disable manual sync"},{"location":"user-guide/commands/argocd_proj_windows_disable-manual-sync/#argocd-proj-windows-disable-manual-sync","text":"Disable manual sync for a sync window","title":"argocd proj windows disable-manual-sync"},{"location":"user-guide/commands/argocd_proj_windows_disable-manual-sync/#synopsis","text":"Disable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows disable - manual - sync PROJECT ID [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_proj_windows_disable-manual-sync/#options","text":"- h , -- help help for disable - manual - sync","title":"Options"},{"location":"user-guide/commands/argocd_proj_windows_disable-manual-sync/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_windows_disable-manual-sync/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_windows_enable-manual-sync/","text":"argocd proj windows enable-manual-sync \u00b6 Enable manual sync for a sync window Synopsis \u00b6 Enable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows enable - manual - sync PROJECT ID [ flags ] Options \u00b6 - h , -- help help for enable - manual - sync Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows enable manual sync"},{"location":"user-guide/commands/argocd_proj_windows_enable-manual-sync/#argocd-proj-windows-enable-manual-sync","text":"Enable manual sync for a sync window","title":"argocd proj windows enable-manual-sync"},{"location":"user-guide/commands/argocd_proj_windows_enable-manual-sync/#synopsis","text":"Enable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows enable - manual - sync PROJECT ID [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_proj_windows_enable-manual-sync/#options","text":"- h , -- help help for enable - manual - sync","title":"Options"},{"location":"user-guide/commands/argocd_proj_windows_enable-manual-sync/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_windows_enable-manual-sync/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_windows_list/","text":"argocd proj windows list \u00b6 List project sync windows argocd proj windows list PROJECT [ flags ] Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows list"},{"location":"user-guide/commands/argocd_proj_windows_list/#argocd-proj-windows-list","text":"List project sync windows argocd proj windows list PROJECT [ flags ]","title":"argocd proj windows list"},{"location":"user-guide/commands/argocd_proj_windows_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_proj_windows_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_windows_list/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_proj_windows_update/","text":"argocd proj windows update \u00b6 Update a project sync window Synopsis \u00b6 Update a project sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows update PROJECT ID [ flags ] Options \u00b6 --applications strings Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website) --clusters strings Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging) --duration string Sync window duration. (e.g. --duration 1h) -h, --help help for update --namespaces strings Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod) --schedule string Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\") Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd proj windows - Manage a project's sync windows","title":"Argocd proj windows update"},{"location":"user-guide/commands/argocd_proj_windows_update/#argocd-proj-windows-update","text":"Update a project sync window","title":"argocd proj windows update"},{"location":"user-guide/commands/argocd_proj_windows_update/#synopsis","text":"Update a project sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\" argocd proj windows update PROJECT ID [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_proj_windows_update/#options","text":"--applications strings Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-\\*,website) --clusters strings Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging) --duration string Sync window duration. (e.g. --duration 1h) -h, --help help for update --namespaces strings Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,\\*-prod) --schedule string Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\")","title":"Options"},{"location":"user-guide/commands/argocd_proj_windows_update/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_proj_windows_update/#see-also","text":"argocd proj windows - Manage a project's sync windows","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_relogin/","text":"argocd relogin \u00b6 Refresh an expired authenticate token Synopsis \u00b6 Refresh an expired authenticate token argocd relogin [ flags ] Options \u00b6 - h , -- help help for relogin -- password string the password of an account to authenticate -- sso - port int port to run local OAuth2 login application ( default 8085 ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server","title":"Argocd relogin"},{"location":"user-guide/commands/argocd_relogin/#argocd-relogin","text":"Refresh an expired authenticate token","title":"argocd relogin"},{"location":"user-guide/commands/argocd_relogin/#synopsis","text":"Refresh an expired authenticate token argocd relogin [ flags ]","title":"Synopsis"},{"location":"user-guide/commands/argocd_relogin/#options","text":"- h , -- help help for relogin -- password string the password of an account to authenticate -- sso - port int port to run local OAuth2 login application ( default 8085 )","title":"Options"},{"location":"user-guide/commands/argocd_relogin/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_relogin/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repo/","text":"argocd repo \u00b6 Manage repository connection parameters argocd repo [ flags ] Options \u00b6 - h , -- help help for repo Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server argocd repo add - Add git repository connection parameters argocd repo get - Get a configured repository by URL argocd repo list - List configured repositories argocd repo rm - Remove repository credentials","title":"Argocd repo"},{"location":"user-guide/commands/argocd_repo/#argocd-repo","text":"Manage repository connection parameters argocd repo [ flags ]","title":"argocd repo"},{"location":"user-guide/commands/argocd_repo/#options","text":"- h , -- help help for repo","title":"Options"},{"location":"user-guide/commands/argocd_repo/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repo/#see-also","text":"argocd - argocd controls a Argo CD server argocd repo add - Add git repository connection parameters argocd repo get - Get a configured repository by URL argocd repo list - List configured repositories argocd repo rm - Remove repository credentials","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repo_add/","text":"argocd repo add \u00b6 Add git repository connection parameters argocd repo add REPOURL [ flags ] Examples \u00b6 # Add a Git repository via SSH using a private key for authentication , ignoring the server 's host key: argocd repo add git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here argocd repo add ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa # Add a private Git repository via HTTPS using username/password and TLS client certificates: argocd repo add https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key # Add a private Git repository via HTTPS using username/password without verifying the server' s TLS certificate argocd repo add https : // git . example . com / repos / repo -- username git -- password secret -- insecure - skip - server - verification # Add a public Helm repository named 'stable' via HTTPS argocd repo add https : // kubernetes - charts . storage . googleapis . com -- type helm -- name stable # Add a private Helm repository named 'stable' via HTTPS argocd repo add https : // kubernetes - charts . storage . googleapis . com -- type helm -- name stable -- username test -- password test # Add a private Helm OCI - based repository named 'stable' via HTTPS argocd repo add helm - oci - registry . cn - zhangjiakou . cr . aliyuncs . com --type helm --name stable --enable-oci --username test --password test Options \u00b6 -- enable - lfs enable git - lfs ( Large File Support ) on this repository -- enable - oci enable helm - oci ( Helm OCI - Based Repository ) - h , -- help help for add -- insecure - ignore - host - key disables SSH strict host key checking ( deprecated , use -- insecure - skip - server - verification instead ) -- insecure - skip - server - verification disables server certificate and host key checks -- name string name of the repository , mandatory for repositories of type helm -- password string password to the repository -- ssh - private - key - path string path to the private ssh key ( e . g . ~/ . ssh / id_rsa ) -- tls - client - cert - key - path string path to the TLS client cert ' s key path (must be PEM format) -- tls - client - cert - path string path to the TLS client cert ( must be PEM format ) -- type string type of the repository , \" git \" or \" helm \" ( default \" git \" ) -- upsert Override an existing repository with the same name even if the spec differs -- username string username to the repository Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd repo - Manage repository connection parameters","title":"Argocd repo add"},{"location":"user-guide/commands/argocd_repo_add/#argocd-repo-add","text":"Add git repository connection parameters argocd repo add REPOURL [ flags ]","title":"argocd repo add"},{"location":"user-guide/commands/argocd_repo_add/#examples","text":"# Add a Git repository via SSH using a private key for authentication , ignoring the server 's host key: argocd repo add git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here argocd repo add ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa # Add a private Git repository via HTTPS using username/password and TLS client certificates: argocd repo add https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key # Add a private Git repository via HTTPS using username/password without verifying the server' s TLS certificate argocd repo add https : // git . example . com / repos / repo -- username git -- password secret -- insecure - skip - server - verification # Add a public Helm repository named 'stable' via HTTPS argocd repo add https : // kubernetes - charts . storage . googleapis . com -- type helm -- name stable # Add a private Helm repository named 'stable' via HTTPS argocd repo add https : // kubernetes - charts . storage . googleapis . com -- type helm -- name stable -- username test -- password test # Add a private Helm OCI - based repository named 'stable' via HTTPS argocd repo add helm - oci - registry . cn - zhangjiakou . cr . aliyuncs . com --type helm --name stable --enable-oci --username test --password test","title":"Examples"},{"location":"user-guide/commands/argocd_repo_add/#options","text":"-- enable - lfs enable git - lfs ( Large File Support ) on this repository -- enable - oci enable helm - oci ( Helm OCI - Based Repository ) - h , -- help help for add -- insecure - ignore - host - key disables SSH strict host key checking ( deprecated , use -- insecure - skip - server - verification instead ) -- insecure - skip - server - verification disables server certificate and host key checks -- name string name of the repository , mandatory for repositories of type helm -- password string password to the repository -- ssh - private - key - path string path to the private ssh key ( e . g . ~/ . ssh / id_rsa ) -- tls - client - cert - key - path string path to the TLS client cert ' s key path (must be PEM format) -- tls - client - cert - path string path to the TLS client cert ( must be PEM format ) -- type string type of the repository , \" git \" or \" helm \" ( default \" git \" ) -- upsert Override an existing repository with the same name even if the spec differs -- username string username to the repository","title":"Options"},{"location":"user-guide/commands/argocd_repo_add/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repo_add/#see-also","text":"argocd repo - Manage repository connection parameters","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repo_get/","text":"argocd repo get \u00b6 Get a configured repository by URL argocd repo get [ flags ] Options \u00b6 - h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide | url ( default \" wide \" ) -- refresh string Force a cache refresh on connection status Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd repo - Manage repository connection parameters","title":"Argocd repo get"},{"location":"user-guide/commands/argocd_repo_get/#argocd-repo-get","text":"Get a configured repository by URL argocd repo get [ flags ]","title":"argocd repo get"},{"location":"user-guide/commands/argocd_repo_get/#options","text":"- h , -- help help for get - o , -- output string Output format . One of : json | yaml | wide | url ( default \" wide \" ) -- refresh string Force a cache refresh on connection status","title":"Options"},{"location":"user-guide/commands/argocd_repo_get/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repo_get/#see-also","text":"argocd repo - Manage repository connection parameters","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repo_list/","text":"argocd repo list \u00b6 List configured repositories argocd repo list [ flags ] Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | url ( default \" wide \" ) -- refresh string Force a cache refresh on connection status Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd repo - Manage repository connection parameters","title":"Argocd repo list"},{"location":"user-guide/commands/argocd_repo_list/#argocd-repo-list","text":"List configured repositories argocd repo list [ flags ]","title":"argocd repo list"},{"location":"user-guide/commands/argocd_repo_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | url ( default \" wide \" ) -- refresh string Force a cache refresh on connection status","title":"Options"},{"location":"user-guide/commands/argocd_repo_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repo_list/#see-also","text":"argocd repo - Manage repository connection parameters","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repo_rm/","text":"argocd repo rm \u00b6 Remove repository credentials argocd repo rm REPO [ flags ] Options \u00b6 - h , -- help help for rm Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd repo - Manage repository connection parameters","title":"Argocd repo rm"},{"location":"user-guide/commands/argocd_repo_rm/#argocd-repo-rm","text":"Remove repository credentials argocd repo rm REPO [ flags ]","title":"argocd repo rm"},{"location":"user-guide/commands/argocd_repo_rm/#options","text":"- h , -- help help for rm","title":"Options"},{"location":"user-guide/commands/argocd_repo_rm/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repo_rm/#see-also","text":"argocd repo - Manage repository connection parameters","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repocreds/","text":"argocd repocreds \u00b6 Manage repository connection parameters argocd repocreds [ flags ] Options \u00b6 - h , -- help help for repocreds Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server argocd repocreds add - Add git repository connection parameters argocd repocreds list - List configured repository credentials argocd repocreds rm - Remove repository credentials","title":"Argocd repocreds"},{"location":"user-guide/commands/argocd_repocreds/#argocd-repocreds","text":"Manage repository connection parameters argocd repocreds [ flags ]","title":"argocd repocreds"},{"location":"user-guide/commands/argocd_repocreds/#options","text":"- h , -- help help for repocreds","title":"Options"},{"location":"user-guide/commands/argocd_repocreds/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repocreds/#see-also","text":"argocd - argocd controls a Argo CD server argocd repocreds add - Add git repository connection parameters argocd repocreds list - List configured repository credentials argocd repocreds rm - Remove repository credentials","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repocreds_add/","text":"argocd repocreds add \u00b6 Add git repository connection parameters argocd repocreds add REPOURL [ flags ] Examples \u00b6 # Add credentials with user / pass authentication to use for all repositories under https : // git . example . com / repos argocd repocreds add https : // git . example . com / repos / -- username git -- password secret # Add credentials with SSH private key authentication to use for all repositories under ssh : // git @git . example . com / repos argocd repocreds add ssh : // git @git . example . com / repos / --ssh-private-key-path ~/.ssh/id_rsa Options \u00b6 - h , -- help help for add -- password string password to the repository -- ssh - private - key - path string path to the private ssh key ( e . g . ~/ . ssh / id_rsa ) -- tls - client - cert - key - path string path to the TLS client cert ' s key path (must be PEM format) -- tls - client - cert - path string path to the TLS client cert ( must be PEM format ) -- upsert Override an existing repository with the same name even if the spec differs -- username string username to the repository Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd repocreds - Manage repository connection parameters","title":"Argocd repocreds add"},{"location":"user-guide/commands/argocd_repocreds_add/#argocd-repocreds-add","text":"Add git repository connection parameters argocd repocreds add REPOURL [ flags ]","title":"argocd repocreds add"},{"location":"user-guide/commands/argocd_repocreds_add/#examples","text":"# Add credentials with user / pass authentication to use for all repositories under https : // git . example . com / repos argocd repocreds add https : // git . example . com / repos / -- username git -- password secret # Add credentials with SSH private key authentication to use for all repositories under ssh : // git @git . example . com / repos argocd repocreds add ssh : // git @git . example . com / repos / --ssh-private-key-path ~/.ssh/id_rsa","title":"Examples"},{"location":"user-guide/commands/argocd_repocreds_add/#options","text":"- h , -- help help for add -- password string password to the repository -- ssh - private - key - path string path to the private ssh key ( e . g . ~/ . ssh / id_rsa ) -- tls - client - cert - key - path string path to the TLS client cert ' s key path (must be PEM format) -- tls - client - cert - path string path to the TLS client cert ( must be PEM format ) -- upsert Override an existing repository with the same name even if the spec differs -- username string username to the repository","title":"Options"},{"location":"user-guide/commands/argocd_repocreds_add/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repocreds_add/#see-also","text":"argocd repocreds - Manage repository connection parameters","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repocreds_list/","text":"argocd repocreds list \u00b6 List configured repository credentials argocd repocreds list [ flags ] Options \u00b6 - h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | url ( default \" wide \" ) Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd repocreds - Manage repository connection parameters","title":"Argocd repocreds list"},{"location":"user-guide/commands/argocd_repocreds_list/#argocd-repocreds-list","text":"List configured repository credentials argocd repocreds list [ flags ]","title":"argocd repocreds list"},{"location":"user-guide/commands/argocd_repocreds_list/#options","text":"- h , -- help help for list - o , -- output string Output format . One of : json | yaml | wide | url ( default \" wide \" )","title":"Options"},{"location":"user-guide/commands/argocd_repocreds_list/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repocreds_list/#see-also","text":"argocd repocreds - Manage repository connection parameters","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_repocreds_rm/","text":"argocd repocreds rm \u00b6 Remove repository credentials argocd repocreds rm CREDSURL [ flags ] Options \u00b6 - h , -- help help for rm Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd repocreds - Manage repository connection parameters","title":"Argocd repocreds rm"},{"location":"user-guide/commands/argocd_repocreds_rm/#argocd-repocreds-rm","text":"Remove repository credentials argocd repocreds rm CREDSURL [ flags ]","title":"argocd repocreds rm"},{"location":"user-guide/commands/argocd_repocreds_rm/#options","text":"- h , -- help help for rm","title":"Options"},{"location":"user-guide/commands/argocd_repocreds_rm/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_repocreds_rm/#see-also","text":"argocd repocreds - Manage repository connection parameters","title":"SEE ALSO"},{"location":"user-guide/commands/argocd_version/","text":"argocd version \u00b6 Print version information argocd version [ flags ] Examples \u00b6 # Print the full version of client and server to stdout argocd version # Print only full version of the client - no connection to server will be made argocd version --client # Print the full version of client and server in JSON format argocd version -o json # Print only client and server core version strings in YAML format argocd version --short -o yaml Options \u00b6 -- client client version only ( no server required ) - h , -- help help for version - o , -- output string Output format . One of : json | yaml | wide | short ( default \" wide \" ) -- short print just the version number Options inherited from parent commands \u00b6 -- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file SEE ALSO \u00b6 argocd - argocd controls a Argo CD server","title":"Argocd version"},{"location":"user-guide/commands/argocd_version/#argocd-version","text":"Print version information argocd version [ flags ]","title":"argocd version"},{"location":"user-guide/commands/argocd_version/#examples","text":"# Print the full version of client and server to stdout argocd version # Print only full version of the client - no connection to server will be made argocd version --client # Print the full version of client and server in JSON format argocd version -o json # Print only client and server core version strings in YAML format argocd version --short -o yaml","title":"Examples"},{"location":"user-guide/commands/argocd_version/#options","text":"-- client client version only ( no server required ) - h , -- help help for version - o , -- output string Output format . One of : json | yaml | wide | short ( default \" wide \" ) -- short print just the version number","title":"Options"},{"location":"user-guide/commands/argocd_version/#options-inherited-from-parent-commands","text":"-- auth - token string Authentication token -- client - crt string Client certificate file -- client - crt - key string Client certificate key file -- config string Path to Argo CD config ( default \" /home/user/.argocd/config \" ) -- grpc - web Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . -- grpc - web - root - path string Enables gRPC - web protocol . Useful if Argo CD server is behind proxy which does not support HTTP2 . Set web root . - H , -- header strings Sets additional header to all requests made by Argo CD CLI . ( Can be repeated multiple times to add multiple headers , also supports comma separated headers ) -- insecure Skip server certificate and domain verification -- logformat string Set the logging format . One of : text | json ( default \" text \" ) -- loglevel string Set the logging level . One of : debug | info | warn | error ( default \" info \" ) -- plaintext Disable TLS -- port - forward Connect to a random argocd - server port using port forwarding -- port - forward - namespace string Namespace name which should be used for port forwarding -- server string Argo CD server address -- server - crt string Server certificate file","title":"Options inherited from parent commands"},{"location":"user-guide/commands/argocd_version/#see-also","text":"argocd - argocd controls a Argo CD server","title":"SEE ALSO"}]}